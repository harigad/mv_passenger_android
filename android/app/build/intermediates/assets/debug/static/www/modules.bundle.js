(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('OneMVController', OneMVController);

    OneMVController.$inject = ['$location', '$scope', 'DivisionService', '$rootScope', '$interval', 'env', 'PageService', 'RedirectionService', '$log'];

    function OneMVController($location, $scope, DivisionService, $rootScope, $interval, env, PageService, RedirectionService, $log) {

        var vm = this;
        vm.division = "default";
        vm.PageService = PageService;
        vm.brand = 'base';
        if (env.ionic) {
            vm.ionic = env.ionic;
        } else {
            vm.ionic = {};
            vm.ionic.showMenu = false;
        }


        function activate() {
            if (DivisionService.getDivisionId())
                DivisionService
                     .getDivisionInfo()
                 .then(handleSuccess, handleFailure);
            else
                handleFailure();
        }

        function handleSuccess(response) {
            if (response.data.status === 1) {
                setDivisionValues(response.data.result);
            }
        }

        function handleFailure(error) {
            $location.path('/division');
        }

        function getMajorAppVersion(majorNo) {
            var _majorAppNo = null;
            if (majorNo) {
                var _arr = majorNo.split('v');
                if (_arr && _arr.length > 1) {
                    _majorAppNo = _arr[1];
                }
            } else {
                $log.error("App Version not setup correctly in DB.");
        };
            return _majorAppNo;
        }

        function getMajorSwVersion(majorNo) {
            var _majorSwNo = null;
            if (majorNo) {
                var _arr = majorNo.split('sw');
                if (_arr && _arr.length > 1) {
                    _majorSwNo = _arr[1];
                }
            }
            return _majorSwNo;
        };

        function isANumber(no) {
            return !isNaN(no);
        }

        function isMinVersion(division) {
            var isMinVersion = true;
            if (division.MinAppVersion) {
                var dbAppVersions = division.MinAppVersion.split('.');
                var currentVersions = env.appVersion.split('.');
                
                var dbNo = (getMajorAppVersion(dbAppVersions[0]) * 10000) + 
                            (eval(dbAppVersions[1]) * 100) +
                            (dbAppVersions[2] ? eval(dbAppVersions[2]) : 0)

                var currentAppNo = (getMajorAppVersion(currentVersions[0]) * 10000) +
                                    (eval(currentVersions[1]) * 100) +
                                    (currentVersions[2] ? eval(currentVersions[2]) : 0)

                isMinVersion = currentAppNo >= dbNo;
            };

            return isMinVersion;
        };

        function setDivisionValues(division) {
            var msg = {type:"checkMinAppVersion", data: division};
             try{
                console.dir(msg);
                window.postMessage(JSON.stringify(msg));
             }catch(e){
                console.log(e);
             }
            if (env.ionic && !isMinVersion(division)) {
                RedirectionService.redirectTo('/min-app-support');
                return false;
            }
            if (division.HasCustomSetup){
                vm.brand = division.DivisionID;
            } else {
                vm.brand = 'base';
            }

            vm.division = division.DivisionID;


            // document.title = division.MetaTitle;
            // vm.title = division.MetaTitle;;
            // vm.description = division.MetaDescription;
            $rootScope.supportPhoneNumber = division.SupportPhoneNumber;
    }


        if (DivisionService.getDivisionId())
            activate();

        $rootScope.$on('divisionChanged', activate);
        
    }

})();

(function() {
    'use strict';

    angular
        .module('oneMVApp')
        .directive('dynamic', HtmlDirective);

    HtmlDirective.$inject = ['$compile'];
    
    function HtmlDirective($compile) {
        return {
            restrict: 'A',
            replace: true,
            link: function (scope, ele, attrs) {
                scope.$watch(attrs.dynamic, function (html) {
                    ele.html(html);
                    $compile(ele.contents())(scope);
                });
            }
        };
    }

})();
//var mod = angular.module('oneMVApp');
//mod.directive('onKeydown', function () {
//    return {
//        restrict: 'A',
//        link: function (scope, elem, attrs) {
//            // this next line will convert the string
//            // function name into an actual function
//            var functionToCall = scope.$eval(attrs.onKeydown);
//            elem.on('keydown', function (e) {
//                // on the keydown event, call my function
//                // and pass it the keycode of the key
//                // that was pressed
//                // ex: if ENTER was pressed, e.which == 13
//                functionToCall(e);
//            });
//        }
//    };
//});
/*global angular */
(function (ng) {
  'use strict';

  var app = ng.module('ngLoadScript', []);

  app.directive('script', function ($parse, $rootScope, $compile) {
      return {
          restrict: 'E',
          terminal: true,
          link: function (scope, element, attr) {
              if (attr.ngSrc) {
                  var domElem = '<script src="' + attr.ngSrc + '" async defer></script>';
                  $(element).append($compile(domElem)(scope));


              }
          }
      };
  });

}(angular));
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .directive('phonenumberDirective', phonenumberDirective)
        .filter('phonenumber', phonenumber);
    phonenumberDirective.$inject = ['$filter', '$browser'];

    function phonenumberDirective($filter, $browser) {
        /*
		Intended use:
			<phonenumber-directive placeholder='prompt' model='someModel.phonenumber'></phonenumber-directive>
		Where:
			someModel.phonenumber: {String} value which to bind only the numeric characters [0-9] entered
				ie, if user enters 617-2223333, value of 6172223333 will be bound to model
			prompt: {String} text to keep in placeholder when no numeric input entered
		*/

        return {
            require: 'ngModel',
            link: function ($scope, $element, $attrs, ngModelCtrl) {
                var listener = function () {
                    var value = $element.val().replace(/[^0-9]/g, '');
                    $element.val($filter('phonenumber')(value, false));
                };

                // This runs when we update the text field
                ngModelCtrl.$parsers.push(function ($viewValue) {
                    return $viewValue.replace(/[^0-9]/g, '');
                });

                // This runs when the model gets updated on the scope directly and keeps our view in sync
                ngModelCtrl.$render = function () {
                    $element.val($filter('phonenumber')(ngModelCtrl.$viewValue, false));
                };

                $element.bind('change', listener);
                $element.bind('keydown', function (event) {
                    var key = event.keyCode;
                    // If the keys include the CTRL, SHIFT, ALT, or META keys, or the arrow keys, do nothing.
                    // This lets us support copy and paste too
                    if (key == 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) {
                        return;
                    }
                    $browser.defer(listener); // Have to do this or changes don't get picked up properly
                });

                $element.bind('paste cut', function () {
                    $browser.defer(listener);
                });
            }

        };
    }

    function phonenumber() {
        /* 
	    Format phonenumber as: c (xxx) xxx-xxxx
	    	or as close as possible if phonenumber length is not 10
	    	if c is not '1' (country code not USA), does not use country code
	    */

        return function (number) {
            /* 
		    @param {Number | String} number - Number that will be formatted as telephone number
		    Returns formatted number: (###) ###-####
		    	if number.length < 4: ###
		    	else if number.length < 7: (###) ###
 
		    Does not handle country codes that are not '1' (USA)
		    */
            if (!number) { return ''; }

            number = String(number);

            // Will return formattedNumber. 
            // If phonenumber isn't longer than an area code, just show number
            var formattedNumber = number;

            // if the first character is '1', strip it out and add it back
            var c = (number[0] == '1') ? '1 ' : '';
            number = number[0] == '1' ? number.slice(1) : number;

            // # (###) ###-#### as c (area) front-end
            var area = number.substring(0, 3);
            var front = number.substring(3, 6);
            var end = number.substring(6, 10);

            if (front) {
                formattedNumber = (c + "(" + area + ") " + front);
            }
            if (end) {
                formattedNumber += ("-" + end);
            }
            return formattedNumber;
        };
    }


})();
(function () {
    //debugger;
    'use strict';

    angular.module('oneMVApp').factory('ConfigFactory', ConfigFactory);
    ConfigFactory.$inject = ['$http', '$q', 'env'];



function ConfigFactory($http, $q, env) {
    var Factory = {
        getOneMVApiURL: getOneMVApiURL,
        getOneMVApiURLPromise: getOneMVApiURLPromise,
        resetUserAndDivision: resetUserAndDivision,
        getCurrentUser: getCurrentUser,
        getCurrentDivision: getCurrentDivision,
        getCurrentDivisionTime: getCurrentDivisionTime,
        getDivisionParameters: getDivisionParameters
    };

    var configData;
    var currentUser;
    var currentDivision;
    var currentDivisionDate;
    var currentDivisionSysParams;
    var value;

    function getDivisionParameters(divisionId) {
        var defer = $q.defer();
            getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var _url = oneMVURL + 'division/' + divisionId + '/systemParameters?appType=desktop&rnd=' + new Date().getTime();
                $http({
                    method: 'GET',
                    url: _url
                }).then(function successCallback(response) {
                    if (response.data.status == 1) {
                        defer.resolve(response.data.result);
                    } else {
                        defer.reject(response.data.result);
                    }
                }, function errorCallback(response) {
                    defer.reject(response);
                });
            }
        });
        return defer.promise;
    }
   
    //function getOneMVApiURLPromise() {
    //    var _url = '../clientappsettings.json';
    //    var defer = $q.defer();
    //    if (!configData) {
    //        $http({
    //            method: 'GET',
    //            url: _url
    //        }).then(function successCallback(response) {
    //            //TBD
    //            configData = response.data
    //            defer.resolve(configData.ApiURLs.OneMVApiURL);
    //        }, function errorCallback(response) {
    //            //Error handling TBD
    //            defer.reject(response);
    //        });
    //    } else {
    //        defer.resolve(configData.ApiURLs.OneMVApiURL);
    //    }
    //    return defer.promise;
    //}
    function getOneMVApiURLPromise() {
       
        var defer = $q.defer();
       
        defer.resolve(env.oneMVApiUrl);
       
        return defer.promise;
    }
    function getOneMVApiURL() {
        return configData.ApiURLs.OneMVApiURL;
    }
    function resetUserAndDivision() {
        currentUser = null;
        currentDivision = null;
    }
    function getCurrentUser() {
        _url = '../Operation/GetCurrentUserDetails?rnd=' + new Date().getTime();
        var defer = $q.defer();
        if (!currentUser) {
            $http({
                method: 'GET',
                url: _url
            }).then(function successCallback(response) {
                currentUser = response.data;
                if (!currentDivision)
                    currentDivision = {};
                currentDivision = currentUser.Divisions[0];
                if (currentUser.CurrentLogin && currentUser.CurrentLogin.Division) {
                    currentDivision = currentUser.CurrentLogin.Division;

                }

                defer.resolve(currentUser);
            }, function errorCallback(response) {
                //Error handling TBD
                defer.reject(response);
            });
        } else {
            defer.resolve(currentUser);
        }
        return defer.promise;

    }
    function getCurrentDivision() {
        var _url = '../Operation/GetCurrentUserDetails?rnd=' + new Date().getTime();
        var defer = $q.defer();
        if (!currentDivision) {
            $http({
                method: 'GET',
                url: _url
            }).then(function successCallback(response) {
                currentUser = response.data;
                if (!currentDivision)
                    currentDivision = {};
                currentDivision = currentUser.Divisions[0];
                if (currentUser.CurrentLogin && currentUser.CurrentLogin.Division) {
                    currentDivision = currentUser.CurrentLogin.Division;
                }
                defer.resolve(currentDivision);
            }, function errorCallback(response) {
                //Error handling TBD
                defer.reject(response);
            });
        } else {
            defer.resolve(currentDivision);
        }
        return defer.promise;
    }
    function getCurrentDivisionTime() {
        var defer = $q.defer();
        var _url = '../Operation/GetCurrentDivisionTime?rnd=' + new Date().getTime();
        $http({
            method: 'GET',
            url: _url
        }).then(function successCallback(response) {
            currentDivisionDate = response.data;
            defer.resolve(currentDivisionDate);
        }, function errorCallback(response) {
            defer.reject(currentDivisionDate);
        });

        return defer.promise;
    }

    getOneMVApiURLPromise(); //One manual call to set the URL. To get the guaranteed url we need to use the promise method.
    return Factory;
}

})();

(function () {
    //debugger;
    'use strict';

    angular.module('oneMVApp').factory('DataValidationFactory', DataValidationFactory);
    DataValidationFactory.$inject = ['$log', '$window', '$http'];


    function DataValidationFactory($log, $window, $http) {
        var factory = {
            validateZipCode: validateZipCode,
            validateZipCodeNew: validateZipCodeNew

        };

        return factory;



        function doPostHttpRequest(url) {
            var googleUrl = url;
            return $http({
                url: googleUrl,
                method: 'GET',
                withCredentials: false
            })
        }

        function validateZipCodeNew(zip) {
            var googleUrl = "//maps.googleapis.com/maps/api/geocode/json?address=" + zip + "&sensor=true";
            return doPostHttpRequest(googleUrl);
        }

        function validateZipCode(zip, vm) {
            var stateCode;
            var state;
            var googleUrl = "//maps.googleapis.com/maps/api/geocode/json?address=" + zip + "&sensor=true";
            return $http({
                method: 'GET',
                url: googleUrl,
                withCredentials: false
            }).then(function successCallback(response) {
                // this callback will be called asynchronously

                if (response.data != null) {
                    var addressComponents = response.data.results[0].address_components;

                    stateCode = addressComponents[addressComponents.length - 2].short_name;
                    state = addressComponents[addressComponents.length - 2].long_name;
                }
                if (stateCode != '') {
                    vm.stateabbr = stateCode;

                    return stateCode;
                } else
                    return '';

            }, function errorCallback(response) {
                return "N/A";
                // $scope.err = response;
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });
        }
    }

})();


(function () {
    'use strict';
    //debugger

    angular
        .module('oneMVApp')
        .factory('DateFactory', DateFactory);

    DateFactory.$inject = ['$log', 'UtilityFactory', '$rootScope'];

function DateFactory($log, UtilityFactory, $rootScope) {
    var factory = {
        getCustomTime: getCustomTime,
        getDateFromCustomTime: getDateFromCustomTime,
        getPreviousDate: getPreviousDate,
        getTimeDifference: getTimeDifference,
        isDayLightsavingOn: isDayLightsavingOn,
        getMinutesFromTimeString: getMinutesFromTimeString,
        getPromiseWindowTimeDisplay: getPromiseWindowTimeDisplay,
        getPromiseWindowEndTime: getPromiseWindowEndTime
        
    };

    return factory;

    //get difference in minutes from given dateTime and current browser datetime
    function getTimeDifference(divisionDate) {
        var today = new Date();
        var serverDate = new Date(Date.parse(divisionDate));  //get the date in correct format for Date function

        var difference = today - serverDate;

        //convert difference from milliseconds to minutes
        if (Math.abs(difference / 1000 / 60) < 1)
            difference = 0
        else {
            if (difference < 0)
                difference = Math.floor(difference / 1000 / 60);
            else
                difference = Math.ceil((difference / 1000) / 60)
        }
        //we only care if the time is 1 minute less or 1 minute more than should be because of rounding
        if (Math.abs(difference) % 10 > 0) {
            if (difference < 0) {
                if (Math.abs(difference) % 10 == 1)
                    difference = difference + 1;
                if (Math.abs(difference) % 10 == 9)
                    difference = difference - 1;
            }

            else {
                if (Math.abs(difference) % 10 == 1)
                    difference = difference - 1;
                if (Math.abs(difference) % 10 == 9)
                    difference = difference + 1;
            }
        }
        return difference;
    }

    // 33 hr display logic
    function getCustomTime(dateToRender, serviceDate) {
        var _customTime = "";

        try {
            if (dateToRender && serviceDate) {
                var _hrsToAdd = moment(dateToRender).hours();
                if (moment(dateToRender).date() != moment(serviceDate).date()) {
                    //Add the difference days * 24. Generic solution to handle more than 33 hrs.
                    var _diff = moment(dateToRender).diff(moment(serviceDate), 'days');
                    _hrsToAdd = _hrsToAdd + (_diff * 24);
                }
                if (_hrsToAdd < 0 && _hrsToAdd > -10)
                    _hrsToAdd = "-0" + (_hrsToAdd * -1)//When service date is less than datetoRender
                if (_hrsToAdd < 10)
                    _hrsToAdd = "0" + _hrsToAdd;

                _customTime = _hrsToAdd + ":" + moment(dateToRender).format('mm');
            }
        }
        catch (err) {
            console.log(err)
        }

        return _customTime
    };

    // Reverse of getCustomTime function
    // Using custom time and service date calculate the actual date
    // We need to figure out based on division so get difference from division time and adjust time accordingly
    function getDateFromCustomTime(customTime, serviceDate) {
        var date;
        var diff_Minutes;
        var _serviceDate;
        var difference = $rootScope.timeDifference;


        //Handling both moment date and native JS date format
        if (serviceDate._isAMomentObject)
            _serviceDate = serviceDate.startOf('day')
        else
            _serviceDate = serviceDate.setHours(0, 0, 0);
        if (typeof customTime == "string") {
            if (customTime.indexOf(':') == -1) {
                diff_Minutes = (parseInt(customTime[0] + customTime[1])) * 60 + parseInt(customTime[2] + customTime[3]);
                if (difference) {
                    diff_Minutes = diff_Minutes + difference;
                }
            }
            else if (customTime.indexOf(':') == 2) {
                diff_Minutes = (parseInt(customTime[0] + customTime[1])) * 60 + parseInt(customTime[3] + customTime[4]);
                if (difference) {
                    diff_Minutes = diff_Minutes + difference;
                }
            }
        } else if (typeof customTime == "date") {
            //handle date time
        }


        if (diff_Minutes) {
            date = moment(_serviceDate).add(diff_Minutes, 'm');
        }
        else {
            $log.error("getDateFromCustomTime: Time is invalid!, Cannot calulate actual time");
            $log.log("error details", "getDateFromCustomTime customTime: " + customTime);
            $log.log("error details", "getDateFromCustomTime serviceDate: " + _serviceDate);
        }
        return date;

    }
    function getPreviousDate(date) {
        if (date == null) date = new Date();
        date.setDate(date.getDate() - 1);
        return date;
    }
    function isDayLightsavingOn() {
        var today = new Date();
        var january = new Date(today.getFullYear(), 0, 1);
        var july = new Date(today.getFullYear(), 6, 1);
        var timezoneDiff = Math.max(january.getTimezoneOffset(), july.getTimezoneOffset());
        return today.getTimezoneOffset() < timezoneDiff;
    }

    function getMinutesFromTimeString(timeString) {
        var diff_Minutes = 0;
        if (typeof timeString == "string") {
            if (timeString.indexOf(':') == -1) {
                diff_Minutes = (parseInt(timeString[0] + timeString[1])) * 60 + parseInt(timeString[2] + timeString[3]);
            }
            else if (timeString.indexOf(':') == 2) {
                diff_Minutes = (parseInt(timeString[0] + timeString[1])) * 60 + parseInt(timeString[3] + timeString[4]);
            }
            return diff_Minutes;
        }
    }
  
    function getPromiseWindowTimeDisplay(scheduleTime, promiseWindow, serviceDate) {
        var scheduleTimeView = getCustomTime(scheduleTime, serviceDate);
        var formatDate = moment(scheduleTime).add(promiseWindow, 'minutes');
        var promiseWindowTime = scheduleTimeView + "-" + getCustomTime(formatDate, serviceDate);
        return promiseWindowTime;
    }

    //windowStartTime is expected to be in ISO string format
    //promiseWindow in minutes
    function getPromiseWindowEndTime(windowStartTime, promiseWindow) {
        var oldDateObj = moment(windowStartTime);
        var newDateObj = oldDateObj.add('m', promiseWindow);
        return newDateObj.format();
    }
};
})();
(function () {

    'use strict';

    angular.module('oneMVApp').factory('LocationFactory', LocationFactory);

    LocationFactory.$inject = ['$http', '$q', 'ConfigFactory', 'authService'];

    function LocationFactory($http, $q, ConfigFactory, authService) {

    var locationFrom = [];
    var locationTo = [];
    var AdLocationFrom = [];
    var AdLocationTo = [];
    var GoogleLocationFrom = [];
    var GoogleLocationTo = [];
    var addressRest = '';
    var locationFilter = '';
    var factory = {
        setadd: stt,
        getLocations: getLocations,
        findClosestLocation: findClosestLocation
    };

    return factory;

    function stt(newName) {
        addressRest = newName;

    }
    function setLocationFilter(filterStatus) {
        locationFilter = filterStatus;
    }

    function getAddress(AdLocationFrom, loc) {
        var addressDetails = "";
        if (loc) {
        	//var addressDetails = AdLocationFrom[loc].IsManuallyAdded ? (AdLocationFrom[loc].Name).toUpperCase() : '';
        	if (AdLocationFrom[loc].Name)
        		addressDetails = AdLocationFrom[loc].Name.toUpperCase();
        	if (AdLocationFrom[loc].AliasNames)
        		addressDetails = addressDetails + " (" + AdLocationFrom[loc].AliasNames + ")";
        }
        return addressDetails;
    }

    //move to UtilityFactory (may be)
    function isNullOrEmpty(input) {
        if (angular.isUndefined(input) || input === null || input == '')   //angular.equals(input, {});//empty object comparison
            return true;
        else
            return false;
    }

    function findClosestLocation(myposition, locations) {

        for (var i = 0; i < locations.length; i++) {
            locations[i].distance = rectilinearHaversine(myposition, locations[i].loc);
        }
        locations.sort(function (a, b) {
            return a.distance - b.distance;

        })
        return locations[0];
    }
    function haversineFormula(gpsLoc, bldg) {
        //position1 =  vm.position
        //position2 = stop
        var lat1 = gpsLoc.Latitude;
        var lon1 = gpsLoc.Longitude;
        var lat2 = bldg.Latitude;
        var lon2 = bldg.Longitude

        var R = 6371; // km 
        var x1 = lat2 - lat1;
        var dLat = x1 * Math.PI / 180;
        var x2 = lon2 - lon1;
        var dLon = x2 * Math.PI / 180;
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                        Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c * 0.62137; //convert to miles
        return d.toFixed(2);
    }

    function rectilinearHaversine(loc1, loc2) {
        var tempPoint = {
            "Latitude": loc1.Latitude,
            "Longitude": loc2.Longitude
        }

        var d1 = parseFloat(haversineFormula(loc1, tempPoint));
        var d2 = parseFloat(haversineFormula(tempPoint, loc2));
        return (d1 + d2).toFixed(2);
    }


    function checkIfValid(address) {
        for (var i in address.address_components) {
            if (address.address_components[i].types[0] == "street_number") {
                return true;
            }
        }
        return false;
    }
    // this is the only function that will be in use for both from and to locations, when the directive is in place.
    //The above 2 functions are only for the existing functionality, they can be cleaned up once the new advanced reservation is ready

    function getLocations(SearchTerm, locationfilter, divisionId, passengerId, googleOnly) {
        var defer = $q.defer();
        var locationData = [];
        if (googleOnly == true || googleOnly == "true") {
        	$http.get('https://maps.googleapis.com/maps/api/geocode/json', {
        		params: {
        			address: SearchTerm + ' ' + addressRest,
        			sensor: true,
        			key: 'AIzaSyCztqRTaQzgBxu0DMV9cDKq0IciqMaQI5E'
        		},
        		withCredentials: false,
        		skipAuthorization: true
        	}).then(function successCallback(response) {
        		GoogleLocationFrom = response.data.results;
        		for (var loc in GoogleLocationFrom) {
        		    if (checkIfValid(GoogleLocationFrom[loc])) {
        		        locationData.push(
                        {
                            address: GoogleLocationFrom[loc].formatted_address,
                            isGoogleLocation: true,
                            loc: GoogleLocationFrom[loc],
                            description: GoogleLocationFrom[loc].Name,
                            title: GoogleLocationFrom[loc].formatted_address
                        });
        		    }
        		}
        		defer.resolve({ "data": locationData });
        	});
        } else {
        	ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
        		if (oneMVURL && oneMVURL != "") {
        			var serviceUrl = oneMVURL + "location/" + divisionId + "/?SearchTerm=" + SearchTerm;

        			$http.get(serviceUrl)
			   .then(function successCallback(response) {
			   	AdLocationFrom = response.data.result;
			   	for (var loc in AdLocationFrom) {
			   		locationData.push(
						 {
						 	name: AdLocationFrom[loc].Name,
						 	address: AdLocationFrom[loc].Address +
                                 (!isNullOrEmpty(AdLocationFrom[loc].City) ? ", " + AdLocationFrom[loc].City : " ") +
                                 (!isNullOrEmpty(AdLocationFrom[loc].Zip) ? ", " + AdLocationFrom[loc].Zip : ""),
						 	isGoogleLocation: false,
						 	loc: AdLocationFrom[loc],
						 	title: getAddress(AdLocationFrom, loc),
						 	description: AdLocationFrom[loc].Address +
                                 (!isNullOrEmpty(AdLocationFrom[loc].City) ? ", " + AdLocationFrom[loc].City : " ") +
                                 (!isNullOrEmpty(AdLocationFrom[loc].Zip) ? ", " + AdLocationFrom[loc].Zip : "")
						 });
			   	}
			   	if (locationFilter == false || locationFilter == "false") {
			   		defer.resolve({ "data": locationData });
			   		return defer.promise;
			   	}
			   	else if (locationFilter == true || locationFilter == "true") {

			   		$http.get('https://maps.googleapis.com/maps/api/geocode/json', {
			   			params: {
			   				address: SearchTerm + ' ' + addressRest,
			   				sensor: true,
			   				key: 'AIzaSyCztqRTaQzgBxu0DMV9cDKq0IciqMaQI5E'
			   			},
			   			withCredentials: false,
			   			skipAuthorization: true
			   		}).then(function successCallback(response) {
			   			GoogleLocationFrom = response.data.results;
			   			for (var loc in GoogleLocationFrom) {
			   			    if (checkIfValid(GoogleLocationFrom[loc])) {
			   			        locationData.push(
                                     {
                                         address: GoogleLocationFrom[loc].formatted_address,
                                         isGoogleLocation: true,
                                         loc: GoogleLocationFrom[loc],
                                         description: GoogleLocationFrom[loc].Name,
                                         title: GoogleLocationFrom[loc].formatted_address
                                     });
			   			    }
			   			}
			   			defer.resolve({ "data": locationData });
			   		}, function errorCallback(err) {
			   			defer.reject(err);
			   		});
			   	}
			   }, function errorCallback(err) {
			   	defer.reject(err);
			   });


        		}
        	}, function errorhandler(err) {
        	});
        	setLocationFilter(locationfilter);
        }
        return defer.promise;
    };
}

})();
(function () {
    'use strict';

    angular.module('oneMVApp').factory('SecurityFactory', SecurityFactory);
    SecurityFactory.$inject = ['$http', '$q', '$cacheFactory', 'securityService'];


    function SecurityFactory($http, $q, $cacheFactory, securityService) {
        var _permissions = {};
        var cache = $cacheFactory("PermissionsCache");
        var service = {
            getPermissions: getPermissions,
            getLoadedPermissions: getLoadedPermissions,
            setupSession: setupSession
        };
        return service;

        function getPermissions(userId, divisionid) {
            var defer = $q.defer();
            _permissions = cache.get("permissions");
            if (_permissions) {
                defer.resolve(_permissions);
            } else {
                securityService.getPermissions(userId, divisionid).then(function (permissions) {
                    cache.put("permissions", permissions);
                    defer.resolve(permissions);
                });
            }
            return defer.promise;
        };

        function setupSession(userId, divisionid) {
            return securityService.setupSession(userId, divisionid);
        };

        function getLoadedPermissions() {
            return cache.get("permissions");
        };
    }


})();



(function () {

    'use strict';

    angular.module('oneMVApp').factory('UtilityFactory', UtilityFactory);
    UtilityFactory.$inject = ['$log', '$window'];
    function UtilityFactory($log, $window) {


        var service = {

            getData: getData,
            setData: setData,
            getAPIBaseUrl: getAPIBaseUrl,

            toastError: toastError,
            toastInfo: toastInfo,
            toastSuccess: toastSuccess,
            toastWarning: toastWarning,

            logError: logError,
            logInfo: logInfo,
            logSuccess: logSuccess,
            logWarning: logWarning,

            log: $log.log,

            getUsStates: getUsStates,
            getBrowserInfo: getBrowserInfo,

            isChrome: isChrome,
            isIE: isIE,
            isFirefox: isFirefox,
            isSafari: isSafari,

            usStates: [
                 {
                     "name": "Alabama",
                     "abbreviation": "AL"
                 },
                 {
                     "name": "Alaska",
                     "abbreviation": "AK"
                 },
                 {
                     "name": "American Samoa",
                     "abbreviation": "AS"
                 },
                 {
                     "name": "Arizona",
                     "abbreviation": "AZ"
                 },
                 {
                     "name": "Arkansas",
                     "abbreviation": "AR"
                 },
                 {
                     "name": "California",
                     "abbreviation": "CA"
                 },
                 {
                     "name": "Colorado",
                     "abbreviation": "CO"
                 },
                 {
                     "name": "Connecticut",
                     "abbreviation": "CT"
                 },
                 {
                     "name": "Delaware",
                     "abbreviation": "DE"
                 },
                 {
                     "name": "District Of Columbia",
                     "abbreviation": "DC"
                 },
                 {
                     "name": "Federated States Of Micronesia",
                     "abbreviation": "FM"
                 },
                 {
                     "name": "Florida",
                     "abbreviation": "FL"
                 },
                 {
                     "name": "Georgia",
                     "abbreviation": "GA"
                 },
                 {
                     "name": "Guam",
                     "abbreviation": "GU"
                 },
                 {
                     "name": "Hawaii",
                     "abbreviation": "HI"
                 },
                 {
                     "name": "Idaho",
                     "abbreviation": "ID"
                 },
                 {
                     "name": "Illinois",
                     "abbreviation": "IL"
                 },
                 {
                     "name": "Indiana",
                     "abbreviation": "IN"
                 },
                 {
                     "name": "Iowa",
                     "abbreviation": "IA"
                 },
                 {
                     "name": "Kansas",
                     "abbreviation": "KS"
                 },
                 {
                     "name": "Kentucky",
                     "abbreviation": "KY"
                 },
                 {
                     "name": "Louisiana",
                     "abbreviation": "LA"
                 },
                 {
                     "name": "Maine",
                     "abbreviation": "ME"
                 },
                 {
                     "name": "Marshall Islands",
                     "abbreviation": "MH"
                 },
                 {
                     "name": "Maryland",
                     "abbreviation": "MD"
                 },
                 {
                     "name": "Massachusetts",
                     "abbreviation": "MA"
                 },
                 {
                     "name": "Michigan",
                     "abbreviation": "MI"
                 },
                 {
                     "name": "Minnesota",
                     "abbreviation": "MN"
                 },
                 {
                     "name": "Mississippi",
                     "abbreviation": "MS"
                 },
                 {
                     "name": "Missouri",
                     "abbreviation": "MO"
                 },
                 {
                     "name": "Montana",
                     "abbreviation": "MT"
                 },
                 {
                     "name": "Nebraska",
                     "abbreviation": "NE"
                 },
                 {
                     "name": "Nevada",
                     "abbreviation": "NV"
                 },
                 {
                     "name": "New Hampshire",
                     "abbreviation": "NH"
                 },
                 {
                     "name": "New Jersey",
                     "abbreviation": "NJ"
                 },
                 {
                     "name": "New Mexico",
                     "abbreviation": "NM"
                 },
                 {
                     "name": "New York",
                     "abbreviation": "NY"
                 },
                 {
                     "name": "North Carolina",
                     "abbreviation": "NC"
                 },
                 {
                     "name": "North Dakota",
                     "abbreviation": "ND"
                 },
                 {
                     "name": "Northern Mariana Islands",
                     "abbreviation": "MP"
                 },
                 {
                     "name": "Ohio",
                     "abbreviation": "OH"
                 },
                 {
                     "name": "Oklahoma",
                     "abbreviation": "OK"
                 },
                 {
                     "name": "Oregon",
                     "abbreviation": "OR"
                 },
                 {
                     "name": "Palau",
                     "abbreviation": "PW"
                 },
                 {
                     "name": "Pennsylvania",
                     "abbreviation": "PA"
                 },
                 {
                     "name": "Puerto Rico",
                     "abbreviation": "PR"
                 },
                 {
                     "name": "Rhode Island",
                     "abbreviation": "RI"
                 },
                 {
                     "name": "South Carolina",
                     "abbreviation": "SC"
                 },
                 {
                     "name": "South Dakota",
                     "abbreviation": "SD"
                 },
                 {
                     "name": "Tennessee",
                     "abbreviation": "TN"
                 },
                 {
                     "name": "Texas",
                     "abbreviation": "TX"
                 },
                 {
                     "name": "Utah",
                     "abbreviation": "UT"
                 },
                 {
                     "name": "Vermont",
                     "abbreviation": "VT"
                 },
                 {
                     "name": "Virgin Islands",
                     "abbreviation": "VI"
                 },
                 {
                     "name": "Virginia",
                     "abbreviation": "VA"
                 },
                 {
                     "name": "Washington",
                     "abbreviation": "WA"
                 },
                 {
                     "name": "West Virginia",
                     "abbreviation": "WV"
                 },
                 {
                     "name": "Wisconsin",
                     "abbreviation": "WI"
                 },
                 {
                     "name": "Wyoming",
                     "abbreviation": "WY"
                 }
            ]

        };

        return service;


        //  *************  base api URL  **********************************
        // This will be removed and moved to a ConfigFactory and to USE a JSON data 
        var apiBaseUrl = 'https://onemvapi-dev.mvtransit.com/api/';

        function getAPIBaseUrl() {
            return apiBaseUrl;
        }


        // *********   session    *******************

        //set default values 1st  --- not using to remove 
        //data['isDispatch'] = false;
        //data['isReporting'] = false;
        //data['isUserManagement'] = false;

        var data = {};




        function getData(key) {
            return data[key];
        };

        function setData(key, value) {
            data[key] = value;
        };



        // *************   ---    get browser information 

        function getBrowserInfo() {

            var userAgent = $window.navigator.userAgent;

            var browsers = { chrome: /chrome/i, safari: /safari/i, firefox: /firefox/i, ie: /internet explorer/i };

            for (var key in browsers) {
                if (browsers[key].test(userAgent)) {
                    return key;
                }
            };

            return 'unknown';

        }

        // *************   ---    detect browsers information 
        function isChrome() {
            return !!window.chrome && !!window.chrome.webstore;
        }
        function isIE() {
            return false || !!document.documentMode;
        }
        function isFirefox() {
            return typeof InstallTrigger !== 'undefined';
        }
        function isSafari() {
            return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
        }

        //  *********   Toaster    *******************

        function toastError(title, message, timeout) {
                
            timeout = timeout || 1000;
            toastr.error(message, title, { timeOut: timeout });

            $log.error('Error: - ' + title + '  - ' + message, '')
        }

        function toastInfo(title, message, timeout) {

            timeout = timeout || 1000;

            toastr.info(message, title, {
                timeOut: timeout
            });
        }

        function toastSuccess(title, message) {
            toastr.success(message, title);
            $log.debug('Success: - ' + title + '  - ' + message, '')
        }

        function toastWarning(title, message) {
            toastr.warning(message, title);
            $log.warn('Warning: - ' + title + '  - ' + message, '')
        }


        //  *********   Logging    *******************

        function logError(message, data) {
            $log.error('Error:' + message, data)
        }

        function logInfo(message, data) {
            $log.info('Info:' + message, data)
        }

        function logSuccess(message, data) {
            $log.debug('Success:' + message, data)
        }

        function logWarning(message, data) {
            $log.warn('Warning:' + message, data)
        }


        //  *********   US State    *******************


        function getUsStates() {
            //debugger;
            return service.usStates;
        }

    };

})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('authInterceptorService', authInterceptorService);

    authInterceptorService.$inject = ['$q', '$injector', '$location', '$rootScope', 'localStorageService'];

    function authInterceptorService($q, $injector,$location,$rootScope, localStorageService) {
        var authInterceptorServiceFactory = {};

        var _request = function (config) {

            config.headers = config.headers || {};


            if (!config.url.includes('https://maps.googleapis.com')) {
            	var authData = localStorageService.get('authorizationData');
            	if (authData) {
            		config.headers.Authorization = 'Bearer ' + authData.token;
            	}
            }

            return config;
        }

        var _responseError = function (rejection) {
            if (rejection.status === 401) {
                var authService = $injector.get('authService');
                var authData = localStorageService.get('authorizationData');

                authService.logOut().then(function () {
                    $rootScope.$broadcast('loggedout', null);
                    $location.path('/login');
                });
                
            }
            return $q.reject(rejection);
        }

        authInterceptorServiceFactory.request = _request;
        authInterceptorServiceFactory.responseError = _responseError;

        return authInterceptorServiceFactory;
    }
})();
(function () {
    'use strict';

    //var authApp = angular.module('authApp', []);

    angular
   .module('oneMVApp')
        .factory('authService', authService);

    authService.$inject = ['$rootScope','$http', '$q' ,'localStorageService', 'env'];

    function authService($rootScope, $http, $q, localStorageService, env) {
        var serviceBase = env.authServerUrl;
        var authServiceFactory = {};

        var _authentication = {
            isAuth: false,
            passengerId: "",
            userId: "",
            useRefreshTokens: false
        };

        var _externalAuthData = {
            provider: "",
            userName: "",
            externalAccessToken: "",
            firstName: "",
            lastName: ""
        };
       
        $rootScope.$on('loggedIn', function (data) {
            debugger;
            console.log('loggedIn', data);
            var msg = {};
            msg.type = "register_push";
            msg.alias = localStorage.getItem("ls.alias");
            msg.division = localStorage.getItem("ls.division");
            var authData = localStorage.getItem("ls.authorizationData");
            try{
                var authDataObj = JSON.parse(authData);
                msg.passengerId = authDataObj.passengerId;
                window.postMessage(JSON.stringify(msg));
            }catch(e){
                console.log("error calling push registration");
            }
        });
       
        var _saveRegistration = function (registration) {

            _logOut();

            return $http.post(serviceBase + 'account/register', registration).then(function (response) {
                return response;
            });

        };

        var _login = function (loginData) {

            var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password;

            if (loginData.useRefreshTokens) {
                data = data + "&client_id=" + "mobiWeb";
            }

            var deferred = $q.defer();

            $http.post(serviceBase + 'token', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).success(function (response) {

                if (loginData.useRefreshTokens) {
                    localStorageService.set('authorizationData',
                        {
                            token: response.access_token,
                            userName: loginData.userName,
                            refreshToken: response.refresh_token,
                            useRefreshTokens: true
                        });
                }
                else {
                    localStorageService.set('authorizationData',
                        {
                            token: response.access_token,
                            userName: loginData.userName,
                            refreshToken: "",
                            useRefreshTokens: false
                        });
                }
                _authentication.isAuth = true;
                _authentication.userName = loginData.userName;
                _authentication.useRefreshTokens = loginData.useRefreshTokens;

                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
            });

            return deferred.promise;

        };


        var _clearUpSession = function () {            

            localStorageService.remove('authorizationData');

            _authentication.isAuth = false;
            _authentication.passengerId = "";
            _authentication.useRefreshTokens = false;
            _authentication.userId = "";
            _authentication.loginProvider = "";
        }

        var _logOut = function () {

            var deferred = $q.defer();

            $http.post(env.authServerUrl + 'account/signout', {}).then(function (response) {

                _clearUpSession();

                deferred.resolve(response);
            }, function (err) {
                console.log('Unable to logout user.');
                deferred.reject(err);
        });
            return deferred.promise;
        };


        var _fillAuthData = function () {

            var authData = localStorageService.get('authorizationData');
            if (authData) {
                _authentication.isAuth = true;
                _authentication.useRefreshTokens = authData.useRefreshTokens;
                _authentication.userId = authData.userId;
                _authentication.passengerId = authData.passengerId;
                _authentication.loginProvider = authData.loginProvider;
        }

        };

        var _isLoggedIn = function () {
            var authData = localStorageService.get('authorizationData');
            if (authData && authData.userId !== "") return true;
            return false;
        }


        var _refreshToken = function () {
            var deferred = $q.defer();

            var authData = localStorageService.get('authorizationData');

            if (authData) {

                if (authData.useRefreshTokens) {

                    var data = "grant_type=refresh_token&refresh_token=" +authData.refreshToken + "&client_id=" +ngAuthSettings.clientId;

                    localStorageService.remove('authorizationData');

                    $http.post(serviceBase + 'token', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).success(function (response) {

                        localStorageService.set('authorizationData', {
                            token: response.access_token,
                            refreshToken: response.refresh_token,
                            useRefreshTokens: true,
                            loginProvider: response.loginProvider
                    });

                        deferred.resolve(response);

                    }).error(function (err, status) {
                        _logOut();
                        deferred.reject(err);
                });
            }
        }

            return deferred.promise;
        };
        var _checkUserHasRegistered = function (externalData) {
            var deferred = $q.defer();
            $http.get(serviceBase + 'account/CheckUserHasRegistered',
                            {
                                params:
                                    {
                                        provider: externalData.provider,
                                        providerKey: externalData.providerKey,
                                        divisionId: externalData.divisionId,
                                        userName: externalData.userName,
                                        divisionSupportsFeed: externalData.divisionSupportsFeed
                                    }
                            }).success(function (success) {
                                deferred.resolve(success);
                            }).error(function (err, status) {
                                deferred.reject(err);
                            });
            return deferred.promise;
        }
        var _obtainAccessToken = function (externalData) {

            var deferred = $q.defer();

            $http.get(serviceBase + 'account/ObtainLocalAccessToken',
                {
                    params:
                        {
                            provider: externalData.provider,
                            externalAccessToken: externalData.externalAccessToken,
                            divisionId: externalData.divisionId,
                            userName:externalData.userName
                        }
                })
                .success(function (response) {                    
                    localStorageService.set('authorizationData',
                        {
                            token: response.access_token,
                            refreshToken: "",
                            useRefreshTokens: false,
                            userId: response.userId,
                            passengerId: response.passengerId,
                            loginProvider: response.loginProvider
                        });

                _authentication.isAuth = true;
                _authentication.useRefreshTokens = false;
                _authentication.userId = response.userId;
                _authentication.passengerId = response.passengerId;
                _authentication.loginProvider = response.loginProvider;
                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
        });

            return deferred.promise;

        };

        var _registerExternal = function (registerExternalData) {

            var deferred = $q.defer();

            $http.post(serviceBase + 'account/registerexternal', registerExternalData).success(function (response) {

                localStorageService.set('authorizationData',
                    {
                        token: response.access_token,
                        refreshToken: "",
                        useRefreshTokens: false,
                        userId: response.userId,
                        passengerId: response.passengerId,
                        loginProvider: response.loginProvider
                    });

                _authentication.isAuth = true;
                _authentication.userId = response.userId;
                _authentication.useRefreshTokens = false;
                _authentication.passengerId = response.passengerId;
                _authentication.loginProvider = response.loginProvider;

                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
        });

            return deferred.promise;
        };

        function _registerOneMv(registrationObject)
        {
            var deferred = $q.defer();
            $http.post(serviceBase + 'account/Register', registrationObject).success(function (response) {

                localStorageService.set('authorizationData',
                    {
                        token: response.access_token,
                        refreshToken: "",
                        useRefreshTokens: false,
                        userId: response.userId,
                        passengerId: response.passengerId,
                        loginProvider: response.loginProvider
                    });

                _authentication.isAuth = true;
                _authentication.userId = response.userId;
                _authentication.useRefreshTokens = false;
                _authentication.passengerId = response.passengerId;
                _authentication.loginProvider = response.loginProvider;

                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
            });

            return deferred.promise;
        }
        function _loginOneMv(loginData)
        {
            var deferred = $q.defer();
            $http.post(serviceBase + 'account/LoginOneMv', loginData).success(function (response) {

                localStorageService.set('authorizationData',
                    {
                        token: response.access_token,
                        refreshToken: "",
                        useRefreshTokens: false,
                        userId: response.userId,
                        passengerId: response.passengerId,
                        loginProvider: response.loginProvider
                    });

                _authentication.isAuth = true;
                _authentication.userId = response.userId;
                _authentication.useRefreshTokens = false;
                _authentication.passengerId = response.passengerId;
                _authentication.loginProvider = response.loginProvider;

                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
            });

            return deferred.promise;
        }

        function _verifyCaptcha(captcha) {
            var deferred = $q.defer();
            $http.post(serviceBase + 'account/VerifyCaptcha', '"' + captcha + '"').success(function (response) {

                deferred.resolve(response);

            }).error(function (err, status) {
                
                deferred.reject(err);
            });

            return deferred.promise;
        }
        authServiceFactory.saveRegistration = _saveRegistration;
        authServiceFactory.login = _login;
        authServiceFactory.logOut = _logOut;
        authServiceFactory.fillAuthData = _fillAuthData;
        authServiceFactory.authentication = _authentication;
        authServiceFactory.refreshToken = _refreshToken;

        authServiceFactory.obtainAccessToken = _obtainAccessToken;
        authServiceFactory.externalAuthData = _externalAuthData;
        authServiceFactory.registerExternal = _registerExternal;
        authServiceFactory.isLoggedIn = _isLoggedIn;
        authServiceFactory.loginOneMV = _loginOneMv;
        authServiceFactory.registerOneMV = _registerOneMv;
        authServiceFactory.verifyCaptcha = _verifyCaptcha;
        authServiceFactory.checkUserHasRegistered = _checkUserHasRegistered;

        return authServiceFactory;
    }
})();
(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .factory('CommonService', CommonService);

	CommonService.$inject = ['$http', '$q', 'env'];

	function CommonService($http, $q, env) {
		var serviceBase = env.oneMVApiUrl;

		var service = {
		    GetAllStates: GetAllStates,
		    GetStatesWithDivisions: GetStatesWithDivisions,
		    ScheduleType: GetScheduleTypes()
		};

		return service;

		function GetAllStates() {
			var deferred = $q.defer();
			var url = serviceBase + 'common/GetAllStates';

			$http({
				method: 'GET',
				url: url + '?rnd=' + new Date().getTime(),
			}).then(function (response) {
				if (response.status == 200) {
					deferred.resolve(response.data.result);
				} else {
					deferred.reject(response);
				}
			}, function (err) {
				deferred.reject(err);
			});

			return deferred.promise;
		}
		function GetStatesWithDivisions()
		{
		    var deferred = $q.defer();
		    var url = serviceBase + 'common/GetStatesWithDivisions';

		    $http({
		        method: 'GET',
		        url: url + '?rnd=' + new Date().getTime(),
		    }).then(function (response) {
		        if (response.status == 200) {
		            deferred.resolve(response.data.result);
		        } else {
		            deferred.reject(response);
		        }
		    }, function (err) {
		        deferred.reject(err);
		    });

		    return deferred.promise;
		}

		function GetScheduleTypes() {
		    return Object.freeze({ 'Morning': 'AM', 'Evening': 'PM' });
		}

	}
})();

(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.factory('CommunicationsService', CommunicationsService);
    CommunicationsService.$inject = ['$http', '$q', 'ConfigFactory'];

    function CommunicationsService($http, $q, ConfigFactory) {
        var service = {
            contactDriver: contactDriver
        };
        return service;

        function contactDriver(tripId) {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    //get the base url from config.
                    var _url = oneMVURL + "communications/contactdriver/" + tripId + "?rnd=" + new Date().getTime();
                    $http({
                        method: 'GET',
                        url: _url
                    }).then(function successCallback(response) {
                        if (response && response.data && response.data.status && (response.data.status == 1 || response.data.status == 2)) {
                            defer.resolve(response.data);
                        } else {
                          defer.reject(response);
                        }
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }
    }
})();
//(function () {
//    'use strict';

//    angular
//        .module('oneMVApp')
//        .factory('DateUtilityService', DateUtilityService);

//    DateUtilityService.$inject = [];

//    function DateUtilityService() {
//        var service = {
//            addDays: addDays,
//            getWeek: getWeek,
//            getDayOfYear: getDayOfYear
//        };

//        return service;

//        function addDays(input, numOfDays) {
//            var dat = new Date(input);
//            dat.setDate(dat.getDate() + numOfDays);
//            return dat;
//        }

//        function getWeek(input) {
//            var date = new Date(input.getTime());
//            date.setHours(0, 0, 0, 0);
//            // Thursday in current week decides the year.
//            date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
//            // January 4 is always in week 1.
//            var week1 = new Date(date.getFullYear(), 0, 4);
//            // Adjust to Thursday in week 1 and count number of weeks from date to week1.
//            return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000
//                                  - 3 + (week1.getDay() + 6) % 7) / 7);
//        }

//        function getDayOfYear(input) {
//            var now = new Date(input);
//            var start = new Date(now.getFullYear(), 0, 0);
//            var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);
//            var oneDay = 1000 * 60 * 60 * 24;
//            var day = Math.floor(diff / oneDay);
//            return day;
//        }
//    }
//})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('DivisionService', DivisionService);

    DivisionService.$inject = [ '$http', '$q', '$rootScope', 'localStorageService', 'env', 'authService'];

    function DivisionService($http, $q, $rootScope,  localStorageService, env, authService) {
        var service = {
            setDivision: _setDivision,
            getDivisionInfo: _getDivisionInfo,            
            getDivisions: _getAllDivisions,
            getDivisionId: _getDivisionIdFromLocalStorage,
            getTimeZone: _getTimeZoneFromLocalStorage,            
            getAllowedServices: _getAllowedServicesFromLocalStorage,
            getDivisionAlias: _getDivisionAliasFromLocalStorage,
            getSupportPhoneNumber: _getSupportPhoneNumberFromLocalStorage,
            getSystemParameters: _getSystemParametersFromLocalStorage,
            getServiceDateByDivisionTime: _getServiceDateByDivisionTime,
            getCurrentDivisionTime: _getCurrentDivisionTime,
            getDivisionByState: _getDivisionByState,
            getDivisionsByLocation: _getDivisionsByLocation,
            isWaitlistAllowedByDivision: _isWaitlistAllowedByDivision
        };

        return service;

        function _getCurrentDivisionTime() {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiOrgUrl + 'division/' + _getDivisionIdFromLocalStorage() + '/currentTime?rnd=' + new Date().getTime()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {                    
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }



        function _setDivision(inputAlias) {
            var deferred = $q.defer();

			// get division info
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/v1?alias=' + inputAlias
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    var hasDivisionChanged = _hasDivisionChanged(inputAlias);
                	var division = response.data.result;

                	// get division system parameters
                    $http({
                    	method: 'GET',
                    	'url': env.oneMVApiUrl + '/division/' + division.DivisionID +'/systemParameters?appType=Desktop'
                    }).then(function (paramResponse) {
                    	if (paramResponse.status == 200) {
                    		division.SystemParameters = paramResponse.data.result;
							// convert boolean text to boolean
                    		for (var param in division.SystemParameters) {
                    			var value = division.SystemParameters[param];
                    			if (value != null) {
                    				value = value.toLowerCase();
                    				if (value == "true") {
                    					division.SystemParameters[param] = true;
                    				} else if (value == "false") {
                    					division.SystemParameters[param] = false;
                    				}
                    			}
                    		}

                    	    // remember division properties for future access
                    		_setDivisionProperties(division);
                    		_setServices(response);

                    		_broadcastDivisionChanged(hasDivisionChanged);
                    		deferred.resolve(response);
                    	}
                    	else deferred.reject('division not found');
                    }, function (err) {
                    	deferred.reject('division not found');
                    });
                }
                else deferred.reject('division not found');
            }, function (err) {
                deferred.reject('division not found');
            });

            return deferred.promise;
        }
        
        function _hasDivisionChanged(inputAlias) {
            var localStorageAlias = _getDivisionAliasFromLocalStorage();
            
            if(angular.isUndefined(localStorageAlias) 
                ||  localStorageAlias === null 
                || localStorageAlias.trim() === '') 
                return true;

            return inputAlias.toLowerCase() !== localStorageAlias.toLowerCase();
        }

        function _getDivisionInfo() {            

            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/' + _getDivisionIdFromLocalStorage()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    _setServices(response);
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }

        function _getAllDivisions() {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/all/v1'
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {                   
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;                     
        }

        function _getServiceDateByDivisionTime(divisionId, divisionTime) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/' + divisionId + '/' + divisionTime + '/serviceDateByDivisionTime?rnd=' + new Date().getTime()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }
        function _getDivisionByState(stateCode)
        {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/GetDivisionsByState/' + stateCode + '?rnd=' + new Date().getTime()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }

        function _getDivisionsByLocation(latitude, longitude)
        {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiUrl + 'division/' + latitude + '/' + longitude + '/GetClosestDivisions?rnd=' + new Date().getTime()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    deferred.resolve(response);
                }
                else deferred.reject();
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }
        function _setDivisionProperties(division) {
            localStorageService.set('division', division.DivisionID);
            localStorageService.set('timeZone', division.TimeZone);
            //localStorageService.set('allowedServices', division.AllowedServices.toLowerCase());
            //
            // Test stuf because it is broken. 
            // Do not publish this.
            //
            if (division.CommuterDivisionId == null) {
                var mapCommuterDivisionId = '';
                var divisionID = division.DivisionID;
                switch (divisionID) {
                    case '206':
                        mapCommuterDivisionId = '206'
                        break;
                    case '1001':
                        mapCommuterDivisionId = '1001.1'
                        break;
                    case '1002':
                        mapCommuterDivisionId = '1002.1'
                        break;
                    case '1003':
                        mapCommuterDivisionId = '1003.1'
                        break;
                    case '1004':
                        mapCommuterDivisionId = '1004.1'
                        break;
                    case '1005':
                        mapCommuterDivisionId = '1005.1'
                        break;
                    default:
                        mapCommuterDivisionId = '-999'
                        break;
                }; division.CommuterDivisionId = mapCommuterDivisionId;
            }
            localStorageService.set('cid', division.CommuterDivisionId);
            localStorageService.set('supportPhoneNumber', division.SupportPhoneNumber);
            localStorageService.set('alias', division.Alias);
            localStorageService.set('systemParameters', division.SystemParameters);
        }

        function _setServices(response) {
            var serviceInfo = [];    
            for (var i = 0; i < response.data.result.DivisionServices.length; i++) {
                var svcInfo =   response.data.result.DivisionServices[i].Service;              
                serviceInfo.push(
                    {
                        id: svcInfo.Id,
                        name:svcInfo.Name,
                        alias: response.data.result.DivisionServices[i].Alias || svcInfo.Name
                    });
                }
            localStorageService.set("serviceInfo",serviceInfo);            
        }

        function _broadcastDivisionChanged(hasDivisionChanged) {
            if (authService.isLoggedIn() && hasDivisionChanged) {
                authService
                    .logOut()
                    .then(function () {
                        $rootScope.$broadcast('divisionChanged');
                    });
            }
            else if (hasDivisionChanged)
            {
                // only broadcast if the division has actually changed.
                $rootScope.$broadcast('divisionChanged');
            }

                
        }

        function _getTimeZoneFromLocalStorage() {
            return localStorageService.get('timeZone');
        }

        function _getDivisionIdFromLocalStorage() {
            return localStorageService.get('division');
        }

        function _getAllowedServicesFromLocalStorage() {
            return localStorageService.get('serviceInfo');
        }

        function _getDivisionAliasFromLocalStorage() {
            return localStorageService.get('alias');
        }

        function _getSupportPhoneNumberFromLocalStorage() {
        	return localStorageService.get('supportPhoneNumber');
        }

        function _getSystemParametersFromLocalStorage() {
        	return localStorageService.get('systemParameters');
        }    
             
        function _isWaitlistAllowedByDivision() {

            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVApiOrgUrl + 'division/' + _getDivisionIdFromLocalStorage()
                        + '/systemParameters/allowcommuterwaitlist' + '?rnd=' + new Date().getTime()
            }).then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    deferred.resolve(response.data.result == 'true');
                }
                else deferred.reject(false);
            }, function (err) {
                deferred.reject(false);
            });
            return deferred.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('DynamicContentService', DynamicContentService);

    DynamicContentService.$inject = ['$http', '$q', 'env', 'DivisionService'];

    function DynamicContentService($http, $q, env, DivisionService) {
        var service = {
            getWhatsNewData: getWhatsNewData,
            getData: getData,
            getSupportFAQ: getSupportFAQ
        };

        return service;

        function getSupportFAQ() {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'common/' + DivisionService.getDivisionId() + '/supportFAQ';
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getWhatsNewData() {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiOrgUrl + 'whatsNew/GetCurrentWhatsNewList/' + DivisionService.getDivisionId();
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getData(page) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'common/' + DivisionService.getDivisionId() + '/dynamic/' + page;
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('GeoLocationService', GeoLocationService);

    GeoLocationService.$inject = ['$rootScope','$q', '$window', '$timeout'];

    function GeoLocationService($rootScope, $q, $window, $timeout) {
        var service = {
            getCurrentPosition: getCurrentPosition
        };

        return service;

        function getCurrentPosition() {
            var deferred = $q.defer();
            //
            // We have multiple people calling this function to determine if GPS is turned on.
            // This is an issue in Android environment.  I added a Broadcast so that anyone can
            // listen to find out if GPS is turned on, or off.
            //
            if (!$window.navigator.geolocation) {
                $rootScope.$broadcast('GeoLocationService.gpsIsAvailable', { gpsIsEnabled: false, lastPosition: {}, timestamp: new Date() });
                deferred.reject('Geolocation not supported');
            } else {
               var timeoutPromise =  $timeout(function () {
                   deferred.reject('User cancelled');                   
                }, 10000);
                    $window.navigator.geolocation.getCurrentPosition(function (position) {
                        $rootScope.$broadcast('GeoLocationService.gpsIsAvailable', { gpsIsEnabled: true, lastPosition: position, timestamp: new Date() });
                        $timeout.cancel(timeoutPromise);
                        deferred.resolve(position);
                    }, function (err) {
                        $rootScope.$broadcast('GeoLocationService.gpsIsAvailable', { gpsIsEnabled: false, lastPosition: {}, timestamp: new Date() });
                        $timeout.cancel(timeoutPromise);
                        deferred.reject(err);
                    },{maximumAge: 0, enableHighAccuracy: true });
                
            }
            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('LoginService', LoginService);

    LoginService.$inject = ['$http','$q','env'];

    function LoginService($http, $q,env) {
        var service = {
            authenticate: authenticate
        };

        return service;

        function authenticate(provider, returnUrl) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'account/ExternalLogin?provider=' + provider + '&returnUrl=' + returnUrl;
            $http({
                method: 'POST',
                'url': serviceUrl,
                headers: {
                    'Content-Type': 'text/plain'
                },
                data: {}
            }).then(function (response) {
               
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('LuumLinkedService', LuumLinkedService);

    LuumLinkedService.$inject = ['$http', '$q', 'env','$rootScope','$uibModal','$location'];

    function LuumLinkedService($http, $q, env, $rootScope, $uibModal, $location) {

        var service = {
            verify: verify,
            getNewPassengerLuumLinkageInfo: getNewPassengerLuumLinkageInfo,
            displayNewPassengerMessage : displayNewPassengerMessage
        };

        return service;


        function displayNewPassengerMessage(message) {
             $uibModal.open({
            template: '<div class="modal-header" >' +
                            '<h3 class="modal-title">OneMV-LUUM Integration Info</h3>' +
                          ' </div>' +
                          '<div class="modal-body">' +
                            '<p>' +message + '</p>' +
                          '</div>' +
                          '<div class="modal-footer">' +
                          '<button class="btn btn-warning" type="button" ng-click="close()">OK</button>' +
                              ' </div>',
                                  replace : true,
                              controller: function ($scope, $uibModalInstance) {
                                  $scope.close = function () {
                                      $uibModalInstance.close();
                                      $location.replace().path('dashboard/');
                                      };
                                      },
                                          backdrop: 'static',
                                          keyboard: false
                                      });
        }

        function getNewPassengerLuumLinkageInfo(divisionId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiOrgUrl + 'division/' + divisionId + '/newPassengerMessage';
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }


        function verify(passengerId) {
            var url = env.oneMVApiOrgUrl + 'passenger/luumLinkage/' + passengerId;
            return $http({
                method: 'GET',
                url: url + '?rnd=' + new Date().getTime()
            }).then(function (response) {

                if (response && response.data.status == 1) {
                    //execute iff, division need or current date has passed start date for applicable division.
                    if (response.data.result && response.data.result.verify) {
                        if (!response.data.result.isLinkedToLuum) {

                            var message = response.data.result.message;

                            $uibModal.open({
                                template: '<div class="modal-header" >' +
                                            '<h3 class="modal-title">OneMV-LUUM Integration Info</h3>' +
                                          ' </div>' +
                                          '<div class="modal-body">' +
                                            '<p>' + message + '</p>' +
                                          '</div>' +
                                          '<div class="modal-footer">' +
                                          '<button class="btn btn-warning" type="button" ng-click="close()">OK</button>' +
                                  ' </div>',
                                replace: true,
                                controller: function ($scope, $uibModalInstance) {
                                    $scope.close = function () {
                                        $uibModalInstance.close();

                                        if (response.data.result.disableCommuterNavigation) {
                                            var path = $location.path();
                                            if (path.indexOf('/commuter/selected-stop') > -1
                                                || path.indexOf('/passenger-trips') > -1
                                                || path.indexOf('/commuter/adv-schedule-setup') > -1
                                                || path.indexOf('/commuter/my-vehicles') > -1) {

                                                $rootScope.passengerNotified = true;
                                                $location.replace().path('dashboard/');
                                            }

                                            // return;
                                        }

                                    };
                                },
                                backdrop: 'static',
                                keyboard: false
                            });
                        }
                    }
                }
            }, function (err) {
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('oneMVApp')
    .factory('MapIconService', MapIconService);

    MapIconService.$inject = ['PortalUtilityService'];

    function MapIconService(PortalUtilityService) {                        

        var service = {
            getCommuterStopIcon : _getCommuterStopIcon,
            getCommuterHubIcon: _getCommuterHubIcon,
            getDrtPickupIcon: _getDrtPickupIcon,
            getDrtDropoffIcon: _getDrtDropoffIcon
        };

        function _getCommuterHubIcon() {
            return PortalUtilityService.isIE() ? 'images/pin-hub.png' : 'images/pin-hub.svg';
        }

        function _getCommuterStopIcon() {
            return PortalUtilityService.isIE() ? 'images/pin-busstop-green.png' : 'images/pin-busstop-green.svg';
        }

        function _getDrtPickupIcon() {
            return 'images/default/i-drt-pin-b.png';
        }

        function _getDrtDropoffIcon() {
            return 'images/default/i-drt-pin-g.png';
        }

        return service;
    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('MapService', MapService);

    MapService.$inject = ['$timeout', 'uiGmapIsReady', 'googleMapsConfig'];

    function MapService($timeout, uiGmapIsReady, googleMapsConfig) {


        var _map = undefined;


        var service = {
            setMapBounds: setMapBounds,
            initializeMap: _setMap,
        };

        return service;

        function setMapBounds(markers, events) {

            if (angular.isUndefined(_map) || angular.isUndefined(markers) || markers.length == 0)
                return;

            var bounds = new google.maps.LatLngBounds();
            angular.forEach(markers, function (marker) {
                bounds.extend({
                    'lat': marker.latitude,
                    'lng': marker.longitude
                });
            });


            if (events) 
                _map.markerEvent = setMarkerEvents(events);

            _map.control.getGMap().fitBounds(bounds);
            _map.control.getGMap().setZoom(_map.control.getGMap().getZoom() - 1);
        }


        function _setMap() {

            _map = {
                center:
                    {
                        latitude: 47.6216026,
                        longitude: -122.342862
                    },
                zoom: 15,
                mapOptions: {
                    mapTypeControl: false,
                    zoomControl: false,
                    streetViewControl: false,
                    styles: googleMapsConfig.mapStyles
                },
                control: {},
            }
            return _map;
        }

        function setMarkerEvents(events) {
            var evntObj = {};

            angular.forEach(events, function (e) {
                if (e.event && typeof e.callback === 'function')
                    evntObj[e.event] = function (gMarker, eventName, model) {
                        if (model.$id) {
                            e.callback(model);
                        }
                    };
            });

            return evntObj;
        }

    }
})();

(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .factory('MessageBox', MessageBox);

	MessageBox.$inject = ['$q', '$uibModal', '$uibModalStack'];

	function MessageBox($q, $uibModal, $uibModalStack) {
		var service = {
			info: info
		};

		return service;

		function info(title, message) {
			var template =
			'<div class="modal__content">\
				<div class="modal__header">\
					<h4 class="modal-title">' + title + '</h4>\
				</div>\
				<div class="modal__body">\
					<p>' + message + '</p>\
					<button type="button" ng-click="ok()" class="btn btn--primary">Ok</button>\
				</div>\
			</div>';

			var deferred = $q.defer();

			var messageBox = $uibModal.open({
				backdrop: false, // prevent user from dismissing messagebox by clicking background
				template: template,
				size:'-fs',
				controller: function ($scope) {
					$scope.ok = function () {
						$uibModalStack.dismissAll();
					};
				}
			}).closed.then(function () {
				deferred.resolve();
			});

			return deferred.promise;
		}
	}
})();

(function(){
    'use strict';

    angular
        .module('oneMVApp')
        .factory('OneMvServices',OneMvServices);

    OneMvServices.$inject = ['DivisionService'];

    function OneMvServices(DivisionService){
        var service = {
            getCommuterInfo :_getCommuterServiceInfo,
            getFixedRouteInfo :_getFixedRouteServiceInfo,
            getDrtInfo :_getDrtServiceInfo       
        };

        return service;

        function _getCommuterServiceInfo(){            
            return find('commuter');
        }

        function _getFixedRouteServiceInfo(){            
            return find('fixed');
        }

        function _getDrtServiceInfo(){
            return find('drt');    
        }

        function find(serviceName){
            var services = DivisionService.getAllowedServices() || [] ;

            for(var i = 0; i<services.length;i++){
                if(services[i].name.toLowerCase() == serviceName.toLowerCase())
                    return services[i];
            }

            return undefined;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('PageService', PageService);

    PageService.$inject = [];

    function PageService() {
        var title = '';
        var headline = '';
        var product = '';
        return {
            title: function () { return title; },
            setTitle: function (newTitle) { title = newTitle; },

            headline: function () { return headline; },
            setHeadline: function (newHeadline) { headline = newHeadline; },

            product: function () { return product; },
            setProduct: function (newProduct) { product = newProduct; }
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('PasswordService', PasswordService);

    PasswordService.$inject = ['$http', '$q', 'env', 'DivisionService', 'authService'];

    function PasswordService($http, $q, env, DivisionService, authService) {
        var service = {
            ChangePassword: changePassword,
            VerifyAndUpdatePassword: updateAndVerifyPassword,
            SendPasscode: sendPasscode
        };

        return service;

        function updateAndVerifyPassword(verifyAndUpdateVM) {
            var deferred = $q.defer();
            var divisionId = DivisionService.getDivisionId();
            var url = env.oneMVApiUrl + 'password/' + divisionId + '/updatePasswordWithTempCode';
            $http({
                method: 'POST',
                url: url + '?rnd=' + new Date().getTime(),
                data: JSON.stringify(verifyAndUpdateVM)
            }).then(function (response) {
                deferred.resolve(response);  //put all hte if statments here also what to resolve.

            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        }

        function changePassword(changePwdVM) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + "/passenger/" + authService.authentication.passengerId + "/changePassword";
            $http({
                method: 'POST',
                'url': serviceUrl + '?rnd=' + new Date().getTime(),
                headers: {
                    'Content-Type': 'text/json'
                },
                data: JSON.stringify(changePwdVM)
            }).then(function (response) {

                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;

        }

        function sendPasscode(email)
        {
            var deferred = $q.defer();
            var divisionId = DivisionService.getDivisionId();
            var serviceUrl = env.oneMVApiUrl + "password/"  + divisionId + "/sendTemporaryCode";
            //$http({
            //    method: 'POST',
            //    'url': serviceUrl + '?rnd=' + new Date().getTime(),
            //    data: JSON.stringify({ email })
            //})
            
            $http.post(serviceUrl, '"' + email + '"').then(function (response) {

                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

    }
    
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('PortalUtilityService', PortalUtilityService);

    PortalUtilityService.$inject = ['$window'];

    function PortalUtilityService($window) {
        var service = {
            hasValue: hasValue,
            isIE :isIE
        };

        return service;

        function hasValue(input) {
            return input != null && input != undefined && input != '';
        }


        function isIE() {
            return $window.navigator.userAgent.indexOf("Trident") > 0
                    || $window.navigator.userAgent.indexOf("MSIE") > 0;
        }
    }
})();
(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .factory('ProfileService', ProfileService);

	ProfileService.$inject = ['$http', '$q', 'env', 'DivisionService', 'ConfigFactory', 'authService'];

	function ProfileService($http, $q, env, DivisionService, ConfigFactory, authService) {
		var serviceBase = env.oneMVApiUrl;

		var service = {
			// passenger profile, including home address
			GetProfile: GetProfile,
			UpdateProfile: UpdateProfile,
            GetPassengerAge: getPassengerAge,

			// home address only
			GetHomeAddress: GetHomeAddress,
			UpdateHomeAddress: UpdateHomeAddress,

			AllowEditHomeAddress: AllowEditHomeAddress,
			ShowHomeAddress: ShowHomeAddress,
			GetDefaultMobilityAids: GetDefaultMobilityAids
		};

		return service;

		// determine if home location should be displayed
		function ShowHomeAddress() {
			var divisionParameters = DivisionService.getSystemParameters();
			return divisionParameters.DropoffHomeLocationOnly;
		}

		// determine if the given passenger may change his home location
		function AllowEditHomeAddress() {
			var divisionParameters = DivisionService.getSystemParameters();
			var allowEditProfile = divisionParameters.DropoffHomeLocationOnly
				&& divisionParameters.DropoffHomeLocationEdit;
			return allowEditProfile;
		}

		function getPassengerAge(passengerId)
		{
		    var url = serviceBase + 'passenger/' + passengerId + '/age';

		    return $http({
		        method: 'GET',
		        url: url + '?rnd=' + new Date().getTime()
		    }).then(function (response) {
		        if (response.status == 200) {
		            return response;
		        }
		    }, function (err) {
		        throw err;
		    });
		}
		function GetHomeAddress(passengerId) {
			var url = serviceBase + 'passenger/GetHomeAddress/' + passengerId;

			return $http({
				method: 'GET',
				url: url + '?rnd=' + new Date().getTime()
			}).then(function (response) {
				if (response.status == 200) {
					return response.data.result;
				} else {
					return response;
				}
			}, function (err) {
				throw err;
			});
		}

		function GetProfile(passengerId) {
			var url = serviceBase + 'passenger/GetProfile/' + passengerId;

			return $http({
				method: 'GET',
				url: url + '?rnd=' + new Date().getTime()
			}).then(function (response) {
				if (response.status == 200) {
					return response.data.result;
				} else {
					return response;
				}
			}, function (err) {
				return null;
			});
		}

		function UpdateHomeAddress(passengerId, homeAddress) {
			return $http.post(serviceBase + 'passenger/UpdateHomeAddress/' + passengerId, homeAddress)
				.then(function (response) {
					if (response.status == 200) {
						return response;
					}
				});
		}

		function UpdateProfile(profile) {
			return $http.post(serviceBase + 'passenger/UpdateProfile', profile)
				.then(function (response) {
					if (response.status == 200) {
						return response;
					}
				});
		}

		function GetDefaultMobilityAids(divisionId, passengerId) {
			var url = serviceBase + 'passenger/GetDefaultMobilityAids/' + divisionId + '/' + passengerId;
			return $http({
				method: 'GET',
				url: url + '?rnd=' + new Date().getTime()
			}).then(function (response) {
				if (response.status == 200) {
					return response.data.result;
				} else {
					return response;
				}
			}, function (err) {
				return null;
			});
		}
	}
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('RedirectionService', RedirectionService);

    RedirectionService.$inject = ['$location','localStorageService'];

    function RedirectionService($location,localStorageService) {
        var service = {
            save: save,
            redirect: redirect,
            redirectTo: redirectTo
        };

        return service;

        function save(path) {
            localStorageService.set('coming-from', path);
        }

        function redirect() {
            var comingFrom = localStorageService.get('coming-from');
            if (comingFrom)
                localStorageService.remove('coming-from');
            else
                comingFrom = 'dashboard/';

            redirectTo(comingFrom);
        }

        function redirectTo(url) {
            $location.path(url);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('ReservationService', ReservationService);

    ReservationService.$inject = ['$http', '$q', 'env','DivisionService'];

    function ReservationService($http, $q, env, DivisionService) {
        var service = {
            cancelReservation: cancelReservation,
            getAllReservationsForPassenger: getAllReservationsForPassenger,
            getStopInfoforReservations: getStopInfoforReservations,
            getPassengerReservationsForToday: getPassengerReservationsForToday,
            getUserReservationFor: getUserReservationFor,
            getUserReservationsByDuration: getUserReservationsByDuration,
            getTripTimingsByDuration: getTripTimingsByDuration,
            addReservations: addReservations,
            manageParkingForReservation: manageParkingForReservation,            
            getAllTripsForCurrentReservation: getAllTripsForCurrentReservation,
            modifyReservation: modifyReservation,
            getAdvReservationAllowedWeeks: getAdvReservationAllowedWeeks,
            getReservationById: getReservationById,
            addWaitlistedReservations: addWaitlistedReservations,
            getAvailableSeatsForTrip: getAvailableSeatsForTrip,
            getPassengerTemplates: getPassengerTemplates,
            addPassengerTemplate:addPassengerTemplate
        };

        return service;


        function getAdvReservationAllowedWeeks() {
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/advReservationWindow?rnd=' + new Date().getMilliseconds();
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }


        function modifyReservation(reservationId,newTripId, passengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() +
                                '/reservations/' + reservationId + '/changePickup/' + newTripId + '/' +passengerId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'                
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        }


        function getAllTripsForCurrentReservation(reservationId, passengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/' + reservationId + '/altTrips/' + passengerId +
                '?rnd' + new Date().getMilliseconds();
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }


        function getUserReservationFor(passengerId, scheduleType, reservationDate) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/for/' + passengerId + '/' + scheduleType +
                '/' + reservationDate + '/' + '?rnd' + new Date().getMilliseconds();
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
                }).then(function (response) {
                    deferred.resolve(response);
                    }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
            }
       
        function addReservations(passengerId, reservations) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/add/' + passengerId;
            $http({
                method: 'POST',
                url: serviceUrl,
                contentType: 'application/json',
                data: JSON.stringify(reservations),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        };

        function addWaitlistedReservations(passengerId, reservations) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/waitlist/add/' + passengerId;
            $http({
                method: 'POST',
                url: serviceUrl,
                contentType: 'application/json',
                data: JSON.stringify(reservations),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        };

        function cancelReservation(passengerId,reservationId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId()  + '/' + passengerId + '/reservations/' + reservationId + '/cancel';
            $http({
                method: 'DELETE',
                url: serviceUrl,
                contentType: 'application/json',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        }

        function getAllReservationsForPassenger(passengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/all/' + passengerId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }

        function getStopInfoforReservations(incidentId,stopId) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'reservation/' + DivisionService.getDivisionId() + '/stopInfo/' + incidentId + '/' + stopId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        }

        function getPassengerReservationsForToday( passengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservations/today/' + passengerId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }

        function getUserReservationsByDuration(userId, scheduleType, duration) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'reservation/' + DivisionService.getDivisionId() + '/user/' + userId + '/' + scheduleType + '?duration=' + duration;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }

        function getTripTimingsByDuration(fromStopId, toStopId, scheduleType, duration) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'reservation/' + DivisionService.getDivisionId() + '/tripTimings/' + fromStopId + '/' + toStopId + '/' + scheduleType + '?duration=' + duration;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        };


        function manageParkingForReservation(passengerId, reservationId, vehicleId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/' + passengerId + '/' + reservationId + '/manageParkingReservation/' + vehicleId;
            $http({
                method: 'PUT',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        };

        
        function getReservationById(passengerId, id) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/' + passengerId + '/reservations/' + id;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }

        function getAvailableSeatsForTrip(tripId, reservationDate) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/availableSeats/' + tripId + '/' + reservationDate;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        };

        function getPassengerTemplates(passengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservationTemplates/' + passengerId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }

        function addPassengerTemplate(passengerId, template) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/reservationTemplates/' + passengerId;
            $http({
                method: 'POST',
                url: serviceUrl,
                contentType: 'application/json',
                data: template,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        };        
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('ServiceAreaService', ServiceAreaService);

    ServiceAreaService.$inject = ['$http','$q','env'];

    function ServiceAreaService($http,$q,env) {
        var service = {
            isInServiceArea: isInServiceArea
        };

        return service;

        function isInServiceArea(divisionId, lat, lon) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiOrgUrl + 'servicearea/canRegisterOrLogin/' + divisionId + '/' + lat + '/' + lon;
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('oneMVApp')
        .controller('AllStopsController', AllStopsController)
        .controller('infoWindowController', infoWindowController);

    infoWindowController.$inject = ['$location', '$scope', 'StopDataService'];
    function infoWindowController($location, $scope, StopDataService) {
       
        $scope.navigateToSelectedStop = function (stop) {
            StopDataService.setStop(stop);
            $location.path('/commuter/selected-stop');
        };
        $scope.getDirectionsToSelectedStop = function (stop) {
            StopDataService.setStop(stop);
            $location.path('/commuter/directions');
        };
        $scope.openMapApp = function (stop) {
            var url = "";
            if ((navigator.platform.indexOf("iPhone") != -1)
                || (navigator.platform.indexOf("iPod") != -1)
                || (navigator.platform.indexOf("iPad") != -1)) {
                url = "http://maps.apple.com/?q=" + stop.latitude + "," + stop.longitude;
            } else {
                url = "http://maps.google.com/?q=" + stop.latitude + "," + stop.longitude;
            }
                
            if (url.length > 0) {
                // For Ionic
                if ($('body').hasClass('platform-cordova')) {
                    window.open(url, '_system', '');
                } else {
                    window.open(url);
                }
            }
        };    
    }
    //address not in service area
    AllStopsController.$inject = ['$location', 'GeoLocationService', 'StopDataService',
        'uiGmapIsReady', 'LocationService', '$http', '$timeout', '$window', 'MessageService', '$filter', 'PageService','OneMvServices'];

    function AllStopsController($location, GeoLocationService, StopDataService,
        uiGmapIsReady, LocationService, $http, $timeout, $window, MessageService, $filter, PageService,OneMvServices) {
        var vm = this;
        vm.PageService = PageService;
        vm.PageService.setTitle('Find a bus stop');
        vm.PageService.setHeadline(OneMvServices.getCommuterInfo().alias);
        vm.stops = [];
        vm.closestBusStop = [];
       // vm.otherBusStops = [];
        vm.allOtherStops = [];
        vm.search = '';
        vm.isLoading = true;
        vm.center = {
            latitude: 47.604356,
            longitude: -122.3360817
        };
        vm.position = null;
        vm.location = null;
        vm.selectedLocation = null;
        vm.showList = true;
        
        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0)
        {
            closestPin = 'images/pin-busstop-green.png';
            otherPin = 'images/pin-busstop-grey.png';
            locationPin = 'images/pin-location.png';
            myLocationPin = 'images/pin-my-location.png';
            hubIcon = 'images/pin-hub.png';
        }
        else
        {
            closestPin = 'images/pin-busstop-green.svg';
            otherPin = 'images/pin-busstop-grey.svg';
            locationPin = 'images/pin-location.svg';
            myLocationPin = 'images/pin-my-location.svg';
            hubIcon = 'images/pin-hub.svg';
        }
        //if close to amazon current location does not apply
        // if you are way out current Location does not apply
        //havershine formula to get distance
        vm.zoom = 15;
        vm.myStyles = [
        {
            featureType: "poi",
            elementType: "labels",
            stylers: [
                  { visibility: "off" }
            ]
        },
        {
            "featureType": "transit",
            "elementType": "labels.icon",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        }
        ];

        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: true,
            streetViewControl: false,
            styles: vm.myStyles
            
        };
        vm.mapControl = {}; //this object gets the map control instance so that we can manipulate it
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        
        activate();

        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                
                        return GeoLocationService.getCurrentPosition();
                }, function (err) {
                    MessageService.showError('Map cannot be loaded.');
                })
            .then(function (position) {
               
                if (position == undefined || position == null)
                    return StopDataService.getAllBusStops();
                vm.position = {
                        "coords": {
                            "latitude": position.coords.latitude,
                            "longitude": position.coords.longitude
                        },
                        "icon": vm.myLocationIcon
                    };

                    var selectedPos = StopDataService.getGeoLocation();
                    if (selectedPos == undefined || selectedPos == null || selectedPos.isAddress == undefined || selectedPos.isAddress == false)
                    {
                        vm.selectedLocation = vm.position;
                   
                    } else {
                        vm.location = selectedPos;
                        vm.selectedLocation = vm.location;
                        vm.search = selectedPos.formatted_address
                    }
               // vm.center = vm.position;
                    return StopDataService.getAllBusStops()
            }, function (err) {
                vm.selectedLocation = StopDataService.getGeoLocation() || null;
                if (vm.selectedLocation != null && vm.selectedLocation.isAddress)
                    vm.search = vm.selectedLocation.formatted_address;
                else {
                    vm.selectedLocation = null;
                    StopDataService.clearItem('currLocation');
                }
                

                StopDataService
                   .getAllBusStops()
                       .then(function (response) {
                           fillStops(response);

                       }, function (err) {
                           vm.isLoading = false;
                           MessageService.showError('Error loading stops. Please try again later');
                           //alert(err);
                       })
            })
            .then(function (response) {
                if (response)
                    fillStops(response);

            }, function (err) {
                vm.isLoading = false;
                MessageService.showError('Error loading stops. Please try again later.');
                //alert(err);
            });
        }
        //marker click function
        vm.markerEvent = {
                click: function (gMarker, eventName, model) {
                if (model.$id) {
                    //navigateToSelectedStop(model.coords);
                    
                    if(vm.selectedLocation)
                        StopDataService.setGeoLocation(vm.selectedLocation);
                    StopDataService.setStop(model.coords);
                    vm.coords = model.coords;
                    vm.show = true;
                }
              
            }
        };

        vm.navigateToClosestStop = function (index) {
            vm.navigateToSelectedStop(vm.closestBusStop[index]);
        }
        vm.getDirectionsToClosestStop = function (index) {
            vm.getDirectionsToSelectedStop(vm.closestBusStop[index]);
        }
        vm.getDirectionsToOtherStop = function (index) {
            vm.getDirectionsToSelectedStop(vm.allOtherStops[index]);
        }
        //vm.getDirectionsToSelectedStop = function (stop) {
        //    StopDataService.setStop(stop);
        //    StopDataService.setGeoLocation(vm.selectedLocation);
        //    $location.path('/commuter/directions');
        //};
        vm.displayMap = function () {
            
           
            vm.showList = false;
            $timeout(function () {
                google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
                resetMap();
            }, 50);
            
            
        };
      
        vm.navigateToOtherStop = function (index) {
            vm.navigateToSelectedStop(vm.allOtherStops[index]);
        };
        
        vm.locationSearch = function () {
            vm.selectedLocation = null;
            vm.show = false;
            if (vm.search.trim() == '')
            {
                StopDataService.clearItem('currLocation')
                if(vm.position != null)
                    vm.selectedLocation = vm.position;
                else {
                    vm.selectedLocation = null;
                }
                vm.location = null;
                populateStops();
                return;
            }
            LocationService.getLocation(vm.search).then(function (response) {
                if(response.length > 0)
                {
                    vm.search = response[0].formatted_address;
                    var locationIcon = {
                        url: locationPin

                    };
                    vm.location = {
                        "coords": {
                            "latitude": response[0].geometry.location.lat(),
                            "longitude": response[0].geometry.location.lng()
                        },
                        "isAddress": true,
                        "formatted_address": response[0].formatted_address, 
                        "icon": locationIcon
                    };
                    vm.selectedLocation = vm.location;
                    StopDataService.setGeoLocation(vm.selectedLocation);
                }
                populateStops();

            }, function (err) {
                MessageService.showError('Cannot find the location');
                        //alert(err);
            });
        };

        

       vm.navigateToSelectedStop = function (stop) {
            StopDataService.setStop(stop);
                //if (vm.position != undefined && vm.position != null)
            StopDataService.setGeoLocation(vm.selectedLocation)
            $location.path('/commuter/selected-stop');
        }
       //vm.openMapApp = function (stop) {
       //    var url = "";
       //    if ((navigator.platform.indexOf("iPhone") != -1)
       // || (navigator.platform.indexOf("iPod") != -1)
       //        || (navigator.platform.indexOf("iPad") != -1)) {
       //        url = "http://maps.apple.com/?q=" + stop.latitude + "," + stop.longitude;
       //    }
       //    else {
       //        url = "http://maps.google.com/?q=" + stop.latitude + "," + stop.longitude;
       //    }
                       
       //    if (url.length > 0) {
       //        // For Ionic
       //        if ($('body').hasClass('platform-cordova')) {
       //            window.open(url, '_system', '');
       //        } else {
       //            window.open(url);
       //        }
       //    }
       //}
      
        function fillStops(response) {
            
            var stops = response.data.result.stops;
            for (var i = 0; i < stops.length; i++) {
                if (stops && stops[i].id) {
                    var stop = stops[i];
                    stop.distance = null;
                    stop.icon = 'images/pin_pickup@1x.png';
                    vm.stops.push(stop);
                }
            }
            populateStops();
        }

      function populateStops() {
            if (vm.stops.length == 0)
                    return;
            vm.mapControl.getGMap().markers =[];
            vm.closestBusStop = [];
            vm.allOtherStops = [];
            var stopsToCheck = [];
           

            for (var i = 0; i < vm.stops.length; i++) {
                if (vm.selectedLocation != undefined && vm.selectedLocation != null) {//here cull the ones with long distances
                    var d = rectilinearHaversine(vm.selectedLocation.coords, vm.stops[i]);
                    if (d <= vm.distance) {
                        vm.stops[i].distance = d;
                        stopsToCheck.push(vm.stops[i])
                    } else {
                        vm.stops[i].distance = null;
                        vm.allOtherStops.push(vm.stops[i]);
                    }

                }
                else {
                    vm.stops[i].distance = null;
                    vm.allOtherStops.push(vm.stops[i]);
                }
                    
            }
        
            
            if (vm.selectedLocation != null && stopsToCheck.length > 0) {
                LocationService.getDrivingDistances(vm.selectedLocation.coords, stopsToCheck)
                    .then(function (response) {
                        for (var i = 0; i < response.rows[0].elements.length; i++) {
                            stopsToCheck[i].distance = (parseFloat(response.rows[0].elements[i].distance.value) / 1000 * 0.621371).toFixed(2);
                            if (stopsToCheck[i].distance > vm.distance) {
                                stopsToCheck[i].distance = null;
                                if(vm.allOtherStops.indexOf(stopsToCheck[i]) < 0)
                                    vm.allOtherStops.push(stopsToCheck[i]);
                            }
                            else {
                                vm.closestBusStop.push(stopsToCheck[i]);
                            }
                        }

                        updateStops();


                    }, function (err) {
                        //when location services err.
                        Array.prototype.push.apply(vm.allOtherStops, vm.stops);
                         var otherStopIcon = {
                             url: otherPin,
                             size: new google.maps.Size(34, 60),
                             origin: new google.maps.Point(0, 0),
                             anchor: new google.maps.Point(24, 57)
                        };

                        vm.allOtherStops.sort(function (a, b) {
                            if(a.distance == null || b.distance == null)
                                return 10000
                             return a.distance -b.distance
                        });
       
                         angular.forEach(vm.allOtherStops, function (stop) {
                             stop.icon = otherStopIcon;
                             stop.distance = null;
                        });
                        google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
                        resetMap();
                        
                    });
            } else {
                updateStops();
            }
                 
           
        }

      
      function updateStops()
      {
          vm.closestBusStop.sort(function (a, b) {
              if(a.distance == null || b.distance == null)
                  return 10000      
              return a.distance - b.distance
          });
          
          vm.allOtherStops.sort(function (a, b) {
              return (a.name < b.name) ? -1 : (a.name > b.name) ? 1 : 0;
          });
          
          var otherStopIcon = {
              url: otherPin,
              size: new google.maps.Size(34, 60),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(23, 57)
          };
          var closestStopIcon = {
              url: closestPin,
              size: new google.maps.Size(34, 60),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(23, 57)
          };
          angular.forEach(vm.closestBusStop, function (stop) {
              if (stop.isHub)
                  stop.icon = hubIcon;
              else
                  stop.icon = closestStopIcon;
          });
          angular.forEach(vm.allOtherStops, function (stop) {
              if (stop.isHub)
                  stop.icon = hubIcon;
              else
                  stop.icon = otherStopIcon;
          });
          vm.closestCount = $filter('filter')(vm.closestBusStop, { isHub: false }).length;
          vm.otherCount = $filter('filter')(vm.allOtherStops, { isHub: false }).length;

          google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
          resetMap();
         
      }

      function resetMap()
      {
          var bounds = new google.maps.LatLngBounds();

          angular.forEach(vm.stops, function (stop) {
              bounds.extend(new google.maps.LatLng(stop.latitude, stop.longitude));
          });
         
          if (vm.selectedLocation != undefined && vm.selectedLocation != null && vm.stops[0].distance != null && vm.stops[0].distance < vm.distance) {
              bounds.extend(new google.maps.LatLng(vm.selectedLocation.coords.latitude, vm.selectedLocation.coords.longitude));
          }
          vm.mapControl.getGMap().fitBounds(bounds);
          vm.mapControl.getGMap().setZoom(vm.mapControl.getGMap().getZoom() - 1); 
          vm.isLoading = false;
        }
      function haversineFormula(origin, stop) {
          //position1 =  vm.position
          //position2 = stop
          var lat1 = origin.latitude;
          var lon1 = origin.longitude;
          var lat2 = stop.latitude;
          var lon2 = stop.longitude

          var R = 6371; // km 
          var x1 = lat2 - lat1;
          var dLat = x1 * Math.PI / 180;
          var x2 = lon2 - lon1;
          var dLon = x2 * Math.PI / 180;
          var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                          Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                          Math.sin(dLon / 2) * Math.sin(dLon / 2);
          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          var d = R * c * 0.62137; //convert to miles
          return d.toFixed(2);
      }

      function rectilinearHaversine(loc1, loc2) {
          var tempPoint = {
              "latitude": loc1.latitude,
               "longitude": loc2.longitude
          }
            
          var d1 = parseFloat(haversineFormula(loc1, tempPoint));
          var d2 = parseFloat(haversineFormula(tempPoint, loc2));
          return (d1 + d2).toFixed(2);
       }

 function activate()
    {
     $http.get('clientappsettings.json').then(function (response) {
         vm.distance = response.data.stopDistance;
         vm.myStyles = response.data.googleMapOptons;
         getMap();
     }, function (err) {
         MessageService.showError('Error Loading Stops.')
         //alert(err);
     });
 }

        // Start of code for Ionic
         vm.ionicInclude = 'app/modules/commuter/all-stops/all-stops.html';
         vm.ionicCustomClassName = '';
         vm.ionicHideNavBar = false;
         vm.ionicUseRefresher = false;
        // End of code for Ionic

 
    }
   
   

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('DirectionsController', DirectionsController);

    DirectionsController.$inject = ['$rootScope','$location', '$stateParams', 'ScheduleService', 'StopDataService', 'uiGmapIsReady'];

    function DirectionsController($rootScope,$location, $stateParams, ScheduleService, StopDataService, uiGmapIsReady) {

        var vm = this;
        
        vm.selectedStop = StopDataService.getStop();
        vm.hasStopDescription = false;

        //if (vm.selectedStop == undefined || vm.selectedStop == null || vm.selectedStop.latitude == undefined || vm.selectedStop.latitude == null)
        //    vm.selectedStop = {
        //        latitude: 40.651739,
        //        longitude: -73.953148
        //    }
        var currentLocation = StopDataService.getGeoLocation();
        //currentLocation = {
        //    coords: {
        //        latitude: 32.604777,
        //        longitude: -99.4343127
        //    }
        //}

        vm.fromLocation = currentLocation != null ? currentLocation.coords.latitude + ',' + currentLocation.coords.longitude : '';
        
        vm.center = {
            latitude: 40.651739,
            longitude: -73.953148
        };

        vm.zoom = 14;
        vm.mapControl = {};
        var myStyles = [
           {
               featureType: "poi",
               elementType: "labels",
               stylers: [
                     { visibility: "off" }
               ]
           },
           {
               "featureType": "transit",
               "elementType": "labels.icon",
               "stylers": [
                   {
                       "visibility": "off"
                   }
               ]
           }
        ];
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: myStyles

        };
        vm.options = {};
        vm.markerEvents = function () {
            //for future?
        };
        vm.showDirections = currentLocation == null;

        var bounds = new google.maps.LatLngBounds();
        var directionsDisplay;
        var directionsService;
        uiGmapIsReady.promise().then(function (maps) {

            directionsDisplay = new google.maps.DirectionsRenderer;
            directionsService = new google.maps.DirectionsService;
            var directions = document.getElementById('directions');

            directionsDisplay.setMap(vm.mapControl.getGMap());
            directionsDisplay.setPanel(directions);

            if (vm.showDirections) {
                bounds.extend(new google.maps.LatLng(vm.selectedStop.latitude, vm.selectedStop.longitude));
                vm.center.latitude = vm.selectedStop.latitude;
                vm.center.longitude = vm.selectedStop.longitude;
              //  vm.mapControl.getGMap().fitBounds(bounds);
                google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
            }
            else {
                mapDirection(vm.fromLocation);
            }
        });

        vm.getDirection = function () {

            var geocoder = new google.maps.Geocoder;
            geocoder.geocode({ 'address': vm.fromLocation },
                function (response, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        mapDirection(response[0].geometry.location.lat() + ',' + response[0].geometry.location.lng());
                    }
                });
        };

        var mapDirection = function (start) {

            

            directionsService.route({
                origin: start,
                destination: vm.selectedStop.latitude + ',' + vm.selectedStop.longitude,
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    vm.stopDescription = vm.selectedStop.description;
                    if (vm.stopDescription !== "" && !angular.isUndefined(vm.stopDescription))
                        vm.hasStopDescription = true;
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        };


        //vm.navigateToTripPage = function (index) {
        //    var incident = vm.nonPerformedIncidents[index];
        //    $location.path('/selected-trip/' + 249.1 + '/' + incident.BlockId + '/' + incident.IncidentId);
        //}

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/directions/directions.html';
        vm.ionicCustomClassName = '';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }
})();

/// <reference path="home.html" />


(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('CommuterHomeController', CommuterHomeController);

    CommuterHomeController.$inject =
        ['$scope', '$rootScope', '$location', 'ReservationService', 'authService',
             '$uibModal', 'MessageService', 'env', 'vehicleService', 'PageService','OneMvServices'];

    function CommuterHomeController($scope, $rootScope, $location, ReservationService,
        authService, 
        $uibModal, MessageService, env, vehicleService, PageService,OneMvServices) {

        var vm = this;
        vm.PageService = PageService;
        vm.PageService.setTitle('Dashboard');
        vm.PageService.setHeadline(OneMvServices.getCommuterInfo().alias);
        vm.isUserLoggedIn = authService.isLoggedIn();
        vm.reservationsAllowed = env.reservationsAllowed;
        vm.passengerId = '';
        vm.passengerReservations = [];
        vm.isLoading = true;
        vm.vehicles = [];
        vm.updatingVehicleInfo = [];
        vm.commuterFeatures = [

                                {
                                    "class": "carousel__item--all-stops",
                                    "headline": "Explore",
                                    "title": "Bus Stops",
                                    "description": "Find a bus stop near you.",
                                    "link": "commuter/all-stops",
                                    "cta" : "View Stops"
                                },
                                {
                                    "class": "carousel__item--advanced-reservations",
                                    "headline": "Book",
                                    "title": "Reservations",
                                    "description": "Up to two weeks in advance.",
                                    "link": "commuter/adv-schedule-setup",
                                    "cta": "Get Started"
                                },
                                {
                                    "class": "carousel__item--commuter-schedule",
                                    "headline": "View",
                                    "title": "Published Schedules",
                                    "description": "See all of the published schedule times at a glance.",
                                    "link": "commuter/published-schedule",
                                    "cta": "Show Schedule"
                                }
                            ];


        
        //method exposed to view
        vm.showCommuterTrip = showCommuterTrip;

        //var vm = this;

        $scope.carouselOptions = {
            navText: ["", ""],
            responsiveClass: false,
            nav: true,

            responsive: {
                0: {
                    items: 1,
                    stagePadding: 34,
                    startPosition: 1,
                    center: true,
                },
                375: {
                    items: 1,
                    stagePadding: 34,
                    startPosition: 1,
                    center: true,
                },
                768: {
                    items: 2,
                    stagePadding: 16,
                    startPosition: 1,
                    center: true,
                },
                992: {
                    items: 3,
                    stagePadding: 0,
                    center: false,
                }

            }
        };


        function getUserReservations(callback) {
            ReservationService.getPassengerReservationsForToday(vm.passengerId)
            .then(function (response) {
                if (response && response.data && response.data.status == 1 && response.data.result.reservations) {
                    vm.passengerReservations = response.data.result.reservations;
                    if (callback)
                        callback();
                    else
                        vm.isLoading = false;
                } else {
                    vm.passengerReservations = [];
                }
            }, function (err) {
                if (err.status !== 401) {
                    MessageService.showError('Sorry! Could not load your Reservation!');
                }
                vm.isLoading = false;
            });

        };


        function getVehicles() {
            vehicleService.getVehiclesForPassenger(vm.passengerId)
            .then(function (response) {
                if (response.data && response.data.status == 1 && response.data.result != null)
                    vm.vehicles = response.data.result;
                vm.isLoading = false;
            }, function (error) {
                vm.isLoading = false;
            });
        };

        function showCommuterTrip(trip) {
            var commuterTripModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/shared/trips/commuter-trip-modal.html',
                controller: 'CommuterTripModalController as vm',
                size: '-fs',
                backdrop: false,
                keyboard: false,
                resolve: {
                    tripId: trip.id
                }
            });

            commuterTripModal.result.then(function (response) {
                if (response.cancelled || response.isModified) {
                    getUserReservations(getVehicles);
                }
            });
        }
        function activate() {
            if (vm.isUserLoggedIn) {
                vm.passengerId = authService.authentication.passengerId;
                getUserReservations(getVehicles);
            }
        }


        vm.updateParkingVehicle = function (reservation, index) {
            vm.updatingVehicleInfo[index] = true;
            ReservationService
                .updateVehicleForReservation(reservation.ReservationId, reservation.VehicleId)
                .then(function (response) {
                    vm.updatingVehicleInfo[index] = false;
                }, function (error) {
                    vm.updatingVehicleInfo[index] = false;
                });
        };

        vm.showStopsMap = function (inc) {
            var modalGetMap = $uibModal.open({
                animation: true,
                windowClass: 'map-modal',
                templateUrl: 'app/modules/commuter/modals/reservation-map-modal/reservation-map.html',
                controller: 'ReservationMapController as vm',
                backdrop: 'static',
                resolve: {
                    reservation_stops: function () {
                        return inc;
                    }
                }
            });

            modalGetMap.result.then(function (isDone) {
                if (isDone) {
                }

            }, function () {

            });
        };

        vm.login = function () {
            $location.path('/login');
        };
        vm.ctaAction = function(link){
            $location.path(link);
        };
        activate();

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/home/home.html';
        vm.ionicCustomClassName = 'ionic-top-padding';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh';
        vm.ionicRefreshingText = 'Loading';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            vm.isLoading = true;
            vm.title = 'Home';
            vm.isUserLoggedIn = authService.isLoggedIn();
            vm.reservationsAllowed = env.reservationsAllowed;
            vm.passengerId = '';
            vm.userReservations = {};
            vm.vehicles = [];
            vm.updatingVehicleInfo = [];
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
            vm.isLoading = false;
        }
        // End of code for Ionic
    }
})();


(function () {
    'use strict';

    angular
   .module('oneMVApp')
   .controller('AdvScheduleConfirmationController', AdvScheduleConfirmationController);

    AdvScheduleConfirmationController.$inject = ['$state', '$stateParams', '$filter', '$uibModal',
        'ReservationService', 'DivisionService', 'authService', 'StopDataService'];

    function AdvScheduleConfirmationController($state, $stateParams, $filter, $uibModal,
        ReservationService, DivisionService, authService, StopDataService) {

        var vm = this;
        vm.title = 'Advance Reservations Confirmation';
        if (isNotFromAdvSchedule()) {
            $state.go('adv-schedule-setup');
            return;
        }

        var selectedConfig = $stateParams.obj.config;
        var weeks = $stateParams.obj.reservationInfo;
        var reservations = [];
        var passengerId = authService.authentication.passengerId;
        vm.divisionAllowsWaitlist = true;
       
        vm.successAnime = successAnime;
        vm.schedule = selectedConfig.schedule;
        vm.reserve = reserve;

        vm.showReservation = showReservation;
        vm.bookReturnTrip = bookReturnTrip;
        vm.back = back;
        vm.pickup = selectedConfig.pickup;
        vm.dropoff = selectedConfig.dropoff;
        vm.weeksToDisplay = filterSelectedTrips();
        vm.reserving = false;

        //Success Animation
        function successAnime(){
            setTimeout(function(){
            anime({
                targets: '.anim--success .lines path',
                strokeDashoffset: [anime.setDashoffset, 0],
                easing: 'easeInOutSine',
                duration: 1500,
                direction: 'alternate',
                loop: false
            });
        }, 0);
        }


        DivisionService
               .isWaitlistAllowedByDivision()
           .then(function (response) {
               vm.divisionAllowsWaitlist = response;
           });
        

        function bookReturnTrip() {

            StopDataService.getPickupForReturnTrip(selectedConfig.pickup.id, selectedConfig.dropoff.id)
            .then(function (response) {

                selectedConfig.schedule = "PM";
                selectedConfig.dropoff = angular.copy(vm.pickup);
                selectedConfig.pickup = mapPickup(response);
                selectedConfig.vehicle = { 'licenceplate': '--', 'vehicleId': undefined };

                $state.go('adv-schedule-setup', { obj: { config: selectedConfig } });

            }, function (error) {
                console.log("error fetching pickup for return trip.");
            });
        }

        function mapPickup(response) {
            if (response && response.data.status == 1 && response.data.result)
                return response.data.result;
            else
                return angular.copy(vm.dropoff);

        }


        function filterSelectedTrips() {

            var result = [];

            angular.forEach(weeks, function (week) {
                var selectedRecords = { from: '', to: '', days: [] };
                selectedRecords.from = $filter('date')(week[0].date, 'MM/dd/yyyy');
                selectedRecords.to = $filter('date')(week[week.length - 1].date, 'MM/dd/yyyy');
                angular.forEach(week, function (day) {                    
                    if (canReserve(day))
                        selectedRecords.days.push({
                            date: day.date,
                            vehicle: day.vehicle,
                            trip: getTrip(day),
                            isReserved: false,
                            isWaitlist: isWaitlistRequest(day),
                            waitlistCount: getWaitlistCount(day),
                        });
                });
                result.push(selectedRecords);
            });

            return result;
        }


        function isWaitlistRequest(day) {
            var waitlistCount = getWaitlistCount(day);

            return (day.vehicle.id && day.availableParking <= 0) || (waitlistCount != undefined && waitlistCount >= 0);
        }

        function getWaitlistCount(day) {

            var trip = getTrip(day);
            if (trip.availableCapacity <= 0) return trip.numberOfWaitlists;

            return undefined;
        }


        function getTrip(day) {
            if (day.trips && day.selectedTrip) {
                for (var i = 0; i < day.trips.length; i++) {
                    if (day.trips[i].tripId == day.selectedTrip)
                        return day.trips[i];
                }
            }

            return undefined;
        }

        function back() {
            $state.go('adv-schedule', { obj: $stateParams.obj });
        }

        function isNotFromAdvSchedule() {
            return $stateParams.obj == undefined || $stateParams.obj == null ||
                $stateParams.obj.reservationInfo == null || $stateParams.obj.reservationInfo == undefined;
        }

        function canReserve(day) {

            var selectedTrip = getTrip(day);

            return day.isOpen && selectedTrip != null && selectedTrip.totalPassengers > 0;
        }

        function createReservationRequest() {

            var reservations = [];

            var weekIndex = 0;
            angular.forEach(weeks, function (week) {
                var dayIndex = 0;
                angular.forEach(week, function (day) {
                    if (canReserve(day)) {

                        var trip = getTrip(day);

                        var reservation = {
                            reservationDate: day.date,
                            tripId: trip.tripId,
                            pickupStopId: vm.pickup.id,
                            dropoffStopId: vm.dropoff.id,
                            passengerId: passengerId,
                            routeId: trip.routeId,
                            schedule :vm.schedule,
                            divisionId: DivisionService.getDivisionId(),
                            vehicleId: day.vehicle != null ? day.vehicle.id : null,
                            isAdvance: true
                        };
                        reservations.push(
                            {
                                'reservation': reservation,
                                'id': weekIndex + '_' + dayIndex
                            });
                        dayIndex++;
                    }
                });
                weekIndex++;
            });
            return reservations;
        }

        function resetReservationVariables(id) {
            var day = getDayIdentifier(id);
            day.reservationFailed = false;
            day.reservationError = '';
            day.isReserved = false;
        }

        function reserve() {
            var reservations = createReservationRequest();

            if (reservations && reservations.length > 0)
                vm.reserving = true;

            for (var i = 0; i < reservations.length; i++) {
                (createReservation)(reservations[i].reservation, reservations[i].id);
                
            }
        }
        function createReservation(request, id) {

            resetReservationVariables(id);

            ReservationService.addReservations(passengerId, [request])
                    .then(function (response) {
                        if (response && response.data && response.data.status == 1
                            && response.data.result.errors.length == 0){
                            markReserved(id, response.data.result.id[0]);
                            successAnime();
                        }else {
                            setReservationFailureMessage(id, response.data.result.errors ? response.data.result.errors[0] : response.data.result);
                        }
                    }, function (error) {
                        setReservationFailureMessage(id, error);
                    });
        }

        function getDayIdentifier(dayIdentifier) {
            var idParts = dayIdentifier.split('_');
            var week = idParts[0];
            var day = idParts[1];
            return vm.weeksToDisplay[week].days[day];
        }

        function setReservationFailureMessage(dayIdentifier, errorMessage) {
            var day = getDayIdentifier(dayIdentifier);
            day.reservationFailed = true;
            day.reservationError = errorMessage; 
        }

        function markReserved(dayIdentifier, reservationId) {
            var day = getDayIdentifier(dayIdentifier);
            day.isReserved = true;
            day.reservation = reservationId;
        }


        function showReservation(id) {

            ReservationService.getReservationById(passengerId, id)
            .then(function (response) {

                if (response && response.data.status == 1)
                    var modalReserve = $uibModal.open({
                        animation: true,
                        size: '-fs',
                        backdrop: false,
                        templateUrl: 'app/modules/commuter/adv-schedule/reservation-modal.html',
                        controller: 'ReservationModalController as vm',
                        resolve: {
                            reservation: response.data.result
                        }
                    });
            });


        }

    }

})();
(function () {

    'use strict';
    angular
    .module('oneMVApp')
    .controller('AdvScheduleController', AdvScheduleController);
    AdvScheduleController.$inject = ['$scope', '$state', '$stateParams', '$q', '$location', '$anchorScroll', '$timeout', '$uibModal',
        'authService', 'StopDataService', 'vehicleService', 'PageService',
        'ReservationService', 'DivisionService', 'MessageService', 'CommonService', 'ScheduleService', 'smoothScroll'];

    function AdvScheduleController($scope, $state, $stateParams, $q, $location, $anchorScroll, $timeout, $uibModal,
        authService, StopDataService, vehicleService, PageService,
        ReservationService, DivisionService, MessageService, CommonService, ScheduleService, smoothScroll) {

        var vm = this;
        vm.PageService = PageService;

        if (isNotFromAdvSetup() && !isFromAdvConfirm()) {
            $state.go('adv-schedule-setup');
            return;
        }

        var passengerId = undefined;
        var passengerReservations = [];
        var pickup = undefined;
        var dropoff = undefined;
        var advWeeks = undefined;
        var divisionDate = moment();


        function init() {

            //event bindings
            vm.reserve = reserve;
            vm.filterWeekend = filterWeekend;
            vm.showSchedule = showSchedule;
            vm.dayClass = applyClass;
            vm.resetPassengerVehicle = resetPassengerVehicle;
            vm.back = back;
            vm.showReservationInfo = showReservationInfo;

            //global variables
            vm.noVehicle = { 'licenceplate': '--', 'id': undefined };
            vm.carouselOptions = setCarouselOptions();
            vm.selectedConfig = $stateParams.obj.config;
            vm.passengerVehicles = $stateParams.obj.vehicles;
            vm.weeks = [];
            vm.divisionAllowsWaitlist = true;

            //local variables
            passengerId = authService.authentication.passengerId;
            passengerReservations = [];
            pickup = vm.selectedConfig.pickup;
            dropoff = vm.selectedConfig.dropoff;
            advWeeks = vm.selectedConfig.numOfWeeks.name;

            vm.PageService.setTitle(pickup.name + '-' + dropoff.name);
        }

        function setCarouselOptions() {
            return {
                navText: ["", ""],
                responsiveClass: false,
                nav: true,
                loop: false,
                itemElement: 'cal__week',
                onDragged: carouselItemChangedEvent,
                items: 1
            };
        }

        function carouselItemChangedEvent(event) {
            var element = document.getElementById(event.page.index);
            var options = {
                duration: 700,
                easing: 'easeInQuad',
                offset: 120
            };
            smoothScroll(element, options);
        }


        function getStartDate(input) {
            var momentInput = moment(input);
            var day = momentInput.day();
            if (day == 6) return momentInput.add(1, 'days').toDate();
            if (day == 0) return momentInput.toDate();
            return momentInput.subtract(day, 'days').toDate();
        }

        function activate() {

            init();

            DivisionService
             .isWaitlistAllowedByDivision()
            .then(function (response) {
                    vm.divisionAllowsWaitlist = response;
                });

            getPassengerReservations()
              .then(function () {
                  populateWeeks();
              });
        }

        function getPassengerReservations() {
            var deferred = $q.defer();

            ReservationService
            .getAllReservationsForPassenger(passengerId)
            .then(function (response) {
                if (response.data.status == 1 && response.data.result.reservations)
                    passengerReservations = response.data.result.reservations.filter(reservationsForSchedule);
                deferred.resolve(response);
            });

            return deferred.promise;
        }

        function reservationsForSchedule(r) {
            return r.scheduleType.toLowerCase() == vm.selectedConfig.schedule.toLowerCase();
        }

        function reservationForDay(date) {
            var reservations = passengerReservations.filter(function (r) {
                return moment(r.reservationDate).dayOfYear() == date.dayOfYear() && r.status != 'Canceled';
            });
            return reservations == null || reservations.length == 0 ? undefined : reservations[0];
        }

        function populateWeeks() {
            ScheduleService.getServiceDateByDivision(DivisionService.getDivisionId())
                .then(function (response) {
                    divisionDate = response.data.result;
                    var startWeek = 0;
                    var endWeek = advWeeks;
                    var startDate = getStartDate(divisionDate);


                    populateCalendar(startWeek, endWeek, startDate, isInPast);

                    if (isWeekday(divisionDate)) {
                        startWeek = advWeeks;
                        endWeek = startWeek + 1;
                        startDate = (moment(startDate).add(7 * advWeeks, 'days')).toDate();
                        populateCalendar(startWeek, endWeek, startDate, isOutsideAllowedRange);
                    }
                    getTrips();
                    vm.weeksX = vm.weeks;
                    if (vm.selectedConfig.schedule == CommonService.ScheduleType.Morning)
                        getParking();

                });
        }

        function isWeekday(date) {

            var input = moment(date);
            return input.day() != 6 || input.day() != 0;
        }


        function populateCalendar(from, to, startDate, predicate) {
            var currentDate = moment(startDate);

            for (var week = from; week < to; week++) {
                var calendarDays = [];
                for (var day = 0; day < 7; day++) {
                    calendarDays.push({
                        'dayId': day,
                        'week': week,
                        'dayOfWeek': getWeekDay(currentDate),
                        'date': currentDate.toDate(),
                        'isOpen': setOpen(currentDate, predicate),
                        'disable': disable(currentDate, predicate),
                        'selectedTrip': undefined,
                        'trips': undefined,
                        'vehicle': vm.selectedConfig.vehicle,
                        'reservation': reservationForDay(currentDate)
                    });
                    currentDate = currentDate.add(1, 'days');
                }
                vm.weeks[week] = calendarDays;
            }
        }

        function disable(currentDate, predicate) {
            return predicate(currentDate) || reservationForDay(currentDate) != undefined;
        }

        function setOpen(currentDate, predicate) {
            return !predicate(currentDate) && wasSelected(currentDate) && reservationForDay(currentDate) === undefined;
        }

        function isInPast(date) {
            return date.dayOfYear() < moment(divisionDate).dayOfYear();
        }

        function isOutsideAllowedRange(date) {
            return date.dayOfYear() > moment(divisionDate).dayOfYear() + advWeeks * 7;
        }

        function getWeekDay(date) {
            var weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            return weekDays[date.weekday()];
        }

        function wasSelected(date) {
            for (var i = 0; i < vm.selectedConfig.weekDays.length; i++) {
                if (vm.selectedConfig.weekDays[i].id == date.day())
                    return true;
            }
            return false;
        }



        function getTrips() {
            for (var j = 0; j < vm.weeks.length; j++) {
                for (var i = 0; i < vm.weeks[j].length; i++) {
                    if (vm.weeks[j][i].isOpen && !vm.weeks[j][i].disable)
                        (getTripInfo)(j, i);
                }
            }
        }

        function getParking() {
            for (var j = 0; j < vm.weeks.length; j++) {
                for (var i = 0; i < vm.weeks[j].length; i++) {
                    if (vm.weeks[j][i].isOpen && !vm.weeks[j][i].disable)
                        (getAvailableParking)(j, i);
                }
            }
        }

        function getAvailableParking(week, day) {
            StopDataService
              .getAvailableParkingsForStop(pickup.id, Date.parse(vm.weeks[week][day].date))
          .then(function (response) {
              if (response.data.status == 1) {
                  vm.weeks[week][day].availableParking = response.data.result;
              }
          });
        }

        function getTripInfo(week, day) {
            StopDataService
              .getNonPerformedTrips(pickup.id, dropoff.id, vm.selectedConfig.schedule, Date.parse(vm.weeks[week][day].date))
          .then(function (response) {
              if (response.data.status == 1 && response.data.result) {
                  vm.weeks[week][day].trips = response.data.result.NonPerformedTrips;
                  mapSelectedTrip(week, day);
              }

              if (vm.weeks[week][day].trips == null) {
                  vm.weeks[week][day].isOpen = false;
                  vm.weeks[week][day].disable = true;
              }
          });
        }

        function mapSelectedTrip(week, day) {
            if (vm.weeks[week][day] == undefined || vm.weeks[week][day].trips == undefined)
                return;

            var trips = vm.weeks[week][day].trips;
            for (var i = 0; i < trips.length; i++) {
                if (vm.selectedConfig.tripTime.tripId == trips[i].tripId) {
                    vm.weeks[week][day].selectedTrip = trips[i].tripId;
                    return;
                }
            }
        }

        function applyClass(day) {
            if (isWeekend(day)) return 'cal__day--disabled';

            if (angular.isUndefined(day.trips) || !day.isOpen) return 'cal__day--inactive';
            return 'cal__day--active';
        }

        function showSchedule(day) {

            if (isWeekend(day) || day.disable) return;

            day.isOpen = !day.isOpen;

            if (!day.isOpen)
                day.trips = undefined;

            getTripInfo(day.week, day.dayId);
            getAvailableParking(day.week, day.dayId);

            var hash = day.dayId + '_' + day.week;
        }

        function filterWeekend() {
            return function (day) {
                return day.dayOfWeek != 'Sat' && day.dayOfWeek != 'Sun';
            };
        };

        function isWeekend(day) {
            day.dayOfWeek == 'Sat' || day.dayOfWeek == 'Sun'
        }

        function resetPassengerVehicle(day) {
            if (vm.passengerVehicles && vm.passengerVehicles.length > 0)
                day.vehicle = vm.passengerVehicles[0];
        }

        function isNotFromAdvSetup() {
            return $stateParams.obj == null
                || $stateParams.obj == undefined
                || $stateParams.obj.config == null
                || $stateParams.obj.config == undefined;
        }

        function isFromAdvConfirm() {
            return $stateParams.obj != null
                && $stateParams.obj != undefined
                && $stateParams.obj.reservationInfo != null
                && $stateParams.obj.reservationInfo != undefined;
        }

        function back() {
            $state.go('adv-schedule-setup');
        }

        function showReservationInfo(reservation) {
            $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/adv-schedule/reservation-modal.html',
                controller: 'ReservationModalController as vm',
                backdrop: false,
                size: '-fs',
                resolve: {
                    reservation: reservation
                }
            });
        }

        function reserve() {
            var allowReservation = false;
            angular.forEach(vm.weeks, function (week) {
                angular.forEach(week, function (day) {
                    if (day.isOpen && day.selectedTrip != null) {
                        allowReservation = true;
                    }
                });
            });

            if (allowReservation) {
                $state.go('adv-schedule-confirmation',
                {
                    obj:
                    {
                        config: vm.selectedConfig,
                        vehicles: vm.passengerVehicles,
                        reservationInfo: vm.weeks
                    }
                });
            }

        }
        activate();
    }
})();



(function () {
    'use strict';

    angular.module('oneMVApp')
    .directive('owlCarousel', MVOwlCarousel);

    MVOwlCarousel.$inject = [];

    function MVOwlCarousel() {
        return {
            restrict: 'E',
            transclude: false,
            link: function (scope) {
                scope.initCarousel = function (element) {
                    // provide any default options you want
                    var defaultOptions = {
                    };
                    var customOptions = scope.$eval($(element).attr('data-options'));
                    // combine the two options objects
                    for (var key in customOptions) {
                        defaultOptions[key] = customOptions[key];
                    }
                    // init carousel
                    angular.element(element).owlCarousel(defaultOptions);
                };
            }
        };
    }

})();

(function () {
    'use strict';

    angular.module('oneMVApp')
    .directive('owlCarouselItem', MVOwlCarouselItem);

    MVOwlCarouselItem.$inject = [];

    function MVOwlCarouselItem() {
        return {
            restrict: 'A',
            transclude: false,
            link: function (scope, element) {
                // wait for the last item in the ng-repeat then call init
                if (scope.$last) {
                    scope.initCarousel(element.parent());
                }
            }
        };
    }
})();


(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('AdvScheduleSetupController', AdvScheduleSetupController);

    AdvScheduleSetupController.$inject = ['$scope', '$state', '$uibModal', '$stateParams',
        'authService', 'StopDataService', 'vehicleService', 'CommonService',
        'ReservationService', 'MapService', 'MapIconService', 'PageService','LuumLinkedService','OneMvServices'];

    function AdvScheduleSetupController($scope, $state, $uibModal, $stateParams,
        authService, StopDataService, vehicleService, CommonService,
        ReservationService, MapService, MapIconService, PageService, LuumLinkedService,OneMvServices) {

        var vm = this;
        vm.PageService = PageService;             
        vm.PageService.setTitle('Advanced Reservations');
        vm.PageService.setHeadline(OneMvServices.getCommuterInfo().alias);
        var passengerId = authService.authentication.passengerId;
        var allStops = [];
        var noTripTime = { 'pickupTime': 'Optional', 'tripId': undefined };
        var noVehicle = { 'licenceplate': '--', 'vehicleId': undefined };
        var noStop = { 'id': undefined, 'name': '--', 'latitude': null, 'longitude': null };
        var markerEvents = [{ event: 'click', callback: iconClickHandler }];

        vm.map = MapService.initializeMap();
        vm.title = 'Advance Reservations Setup';
        vm.isLoading = false;
        vm.isPassengerLoggedIn = authService.isLoggedIn();
        vm.markers = [];
        vm.selectedConfig = getDefaultConfig();

        var returnTripConfig = getReturnTripConfig();

        vm.pickupStops = [];
        vm.dropoffStops = [];
        vm.tripTimes = [];
        vm.passengerVehicles = [];
        vm.coords = undefined;
        vm.numOfWeeks = [];
        vm.daysOfWeek =
                    [
                    { 'name': 'S', 'selected': false, 'id': 0 },
                    { 'name': 'M', 'selected': false, 'id': 1 },
                    { 'name': 'T', 'selected': false, 'id': 2 },
                    { 'name': 'W', 'selected': false, 'id': 3 },
                    { 'name': 'TH', 'selected': false, 'id': 4 },
                    { 'name': 'F', 'selected': false, 'id': 5 },
                    { 'name': 'S', 'selected': false, 'id': 6 }
                    ];

        vm.hasTemplates = false;
        vm.templates = [];
        vm.useDefaultTemplate = false;
        vm.overrideTemplate = false;
        vm.addTemplate = false;

        function isReturnTripRequest() {
            return $stateParams.obj != null
                && $stateParams.obj != undefined
                && $stateParams.obj.config != null
                && $stateParams.obj.config != undefined;
        }

        function getReturnTripConfig() {
            return isReturnTripRequest() ? $stateParams.obj.config : undefined;
        }

        function getDefaultConfig() {
            return {
                schedule: CommonService.ScheduleType.Morning,
                pickup: undefined,
                dropoff: undefined,
                weekDays: [],
                tripTime: undefined,
                numOfWeeks: undefined,
                vehicle: undefined
            };
        }


        vm.pickupChanged = function () {
            if (!vm.selectedConfig.pickup || !vm.selectedConfig.pickup.id) {
                vm.selectedConfig.dropoff = vm.pickupStops[0];
                vm.markers = [];
                vm.addTemplate = false;
                return;
            };
            
            vm.selectedConfig.dropoff = noStop;
            vm.show = false;
            setMarkers();
            MapService.setMapBounds(vm.markers, markerEvents);
            getDropoffs();
        }

        vm.dropoffChanged = function () {
            if (!vm.selectedConfig.pickup || !vm.selectedConfig.pickup.id) {                
                return
            };

            vm.show = false;
            if (vm.selectedConfig.dropoff && vm.selectedConfig.dropoff.id)
                getTripTimes();
            else
                vm.addTemplate = false;

            setMarkers();
            MapService.setMapBounds(vm.markers, markerEvents);
        }     

        $scope.$watch('vm.daysOfWeek|filter:{selected:true}', function (value) {
            vm.selectedConfig.weekDays = value.map(function (day) {
                return day;
            });
        }, true);

        $scope.$watch('vm.parkingSelected', function (value) {
            if (!value)
                vm.selectedConfig.vehicle = noVehicle;
        });



        $scope.$watch('vm.useDefaultTemplate', function (value) {

            if (!value)
                vm.parkingSelected = false;

            setSelectedTrip();
            filterPickups();
            resetWeekDays();
            setSelectedVehicle();
            

            if (vm.templates.length > 0 && vm.useDefaultTemplate) {
                var template = getTemplate();
                for (var i = 0; i < vm.daysOfWeek.length; i++) {
                    vm.daysOfWeek[i].selected = isWeekdaySelected(vm.daysOfWeek[i], template.daysOfWeek);
                }
            }
        });


        function getTemplate() {
            for (var i = 0; i < vm.templates.length; i++) {
                if (vm.templates[i].schedule == vm.selectedConfig.schedule)
                    return vm.templates[i];
            }

            return undefined;
        }

        vm.scheduleChanged = function () {
            vm.dropoffStops = [];
            vm.markers = [];
            vm.show = false;
            vm.useDefaultTemplate = false;
            filterPickups();
            resetWeekDays();
            resetTripTimes();
            setHasTemplate();
        }

        vm.clearWeekSelection = function () {
            resetWeekDays();
        }


        vm.next = function () {
            if (vm.addTemplate || vm.overrideTemplate) {

                var template = {
                    PickupStopId: vm.selectedConfig.pickup.id,
                    DropoffStopId: vm.selectedConfig.dropoff.id,
                    TripId: vm.selectedConfig.tripTime.tripId,
                    Schedule: vm.selectedConfig.schedule,
                    VehicleId : vm.selectedConfig.vehicle.id,
                    SelectedDays : getSelectedDays()
                };

                ReservationService.addPassengerTemplate(passengerId, template)
                .then(function () {
                    next();
                }, function () {
                    next();
                });
            }

            next();
        }


        function getSelectedDays() {

            var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            
            var selectedDays = {};
            for (var i = 0; i < vm.selectedConfig.weekDays.length; i++) {
                var key = weekdays[vm.selectedConfig.weekDays[i].id];
                selectedDays[key] = vm.selectedConfig.weekDays[i].selected;
            }

            return selectedDays;
        }


        function next() {
            $state.go('adv-schedule', {
                obj: {
                    config: vm.selectedConfig, vehicles: vm.passengerVehicles
                }
            });
        }


        vm.login = function () {
            redirectToLogin();
        }


        vm.showAddVehicleDialog = function () {
            var modalReserve = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/modals/add-vehicle-modal/add-vehicle.html',
                controller: 'AddVehicleController as vm',
                size: "-fs",
                backdrop: false,
                resolve: {
                    atleastOneVehicleExist: vm.passengerVehicles.length > 0
                }
            });
            modalReserve.result.then(function (result) {
                if (result.isAdded)
                    getPassengerVehicles();
            });
        }

        function setMarkers() {
            vm.markers = [];

            if (vm.selectedConfig.pickup && vm.selectedConfig.pickup.id !== undefined)
                vm.markers.push({
                    latitude: vm.selectedConfig.pickup.latitude,
                    longitude: vm.selectedConfig.pickup.longitude,
                    icon: getMapIcon(vm.selectedConfig.pickup.isHub),
                    name: vm.selectedConfig.pickup.name,
                    address: vm.selectedConfig.pickup.address
                });

            if (vm.selectedConfig.dropoff && vm.selectedConfig.dropoff.id !== undefined)
                vm.markers.push({
                    latitude: vm.selectedConfig.dropoff.latitude,
                    longitude: vm.selectedConfig.dropoff.longitude,
                    icon: getMapIcon(vm.selectedConfig.dropoff.isHub),
                    name: vm.selectedConfig.dropoff.name,
                    address: vm.selectedConfig.dropoff.address
                });
        }


        function getMapIcon(isHub) {
            return isHub ? MapIconService.getCommuterHubIcon() :
                MapIconService.getCommuterStopIcon();
        }

        function resetWeekDays() {
            vm.selectedConfig.weekDays = [];
           
                angular.forEach(vm.daysOfWeek, function (dayOfWeek, key) {
                    dayOfWeek.selected = false;
                });
        }

        function resetTripTimes() {
            vm.selectedConfig.tripTime = {};
            vm.tripTimes = [];
        }


        function filterPickups() {
            vm.pickupStops = allStops.filter(function (stop) {
                return stop.isHub != (vm.selectedConfig.schedule == CommonService.ScheduleType.Morning);
            });
            vm.pickupStops.splice(0, 0, noStop);

            setPickupStop();            
        }

        function setPickupStop() {

            var pickupId = undefined;            

            if (isReturnTripRequest() && returnTripConfig)
                pickupId = returnTripConfig.pickup.id;
            else if (vm.templates.length > 0 && vm.useDefaultTemplate)
                pickupId = getTemplate().pickupId;
            
            var matchFound = false;
            for (var i = 0; i < vm.pickupStops.length; i++) {
                if (vm.pickupStops[i].id == pickupId){
                    vm.selectedConfig.pickup = vm.pickupStops[i];
                    matchFound =true;
                    break;
                }
            }

            if (!matchFound)
                vm.selectedConfig.pickup = vm.pickupStops[0];

            vm.pickupChanged();
        }


        function setDropoffStop() {

            var dropoffId = undefined;

            if (isReturnTripRequest() && returnTripConfig) 
                dropoffId = returnTripConfig.dropoff.id;            
            else if (vm.templates.length > 0 && vm.useDefaultTemplate)
                dropoffId = getTemplate().dropoffId;

            var matchFound = false;
            for (var i = 0; i < vm.dropoffStops.length; i++) {
                if (vm.dropoffStops[i].id == dropoffId) {
                    vm.selectedConfig.dropoff = vm.dropoffStops[i];
                    matchFound = true;
                    break;
                }
            }

            if(!matchFound)
                vm.selectedConfig.dropoff = vm.dropoffStops[0];

            vm.dropoffChanged();

        }

        function activate() {
            if (!vm.isPassengerLoggedIn)
                redirectToLogin();
            LuumLinkedService.verify(authService.authentication.passengerId);
            getPassengerTemplates();            
            getPassengerVehicles();
        }


        function getPassengerTemplates() {
            ReservationService.getPassengerTemplates(passengerId)
           .then(function (response) {
               if (response && response.data.status && response.data.result && response.data.result.length > 0) {                   
                   mapTemplates(response.data.result);
               }

               getAdvReservationWindow();
               getAllStops();

           });
        }


        function mapTemplates(templates) {
            for (var i = 0; i < templates.length; i++)
                vm.templates.push(templates[i]);

            setHasTemplate();
        }

        function setHasTemplate() {
            var found = false;
            for (var i = 0; i < vm.templates.length; i++) {
                if (vm.selectedConfig.schedule == vm.templates[i].schedule) {
                    found = true;
                    break;
                }
            }
            vm.hasTemplates = found;
        }


        function iconClickHandler(model) {
            vm.show = true;
            vm.coords = model.coords;
        }


        function getAdvReservationWindow() {
            vm.numOfWeeks = [];
            ReservationService.getAdvReservationAllowedWeeks()
            .then(function (response) {
                if (response.data.status == 1) {
                    var numWeeks = response.data.result;
                    for (var i = 1; i <= numWeeks; i++) {
                        vm.numOfWeeks.push({
                            'name': i
                        });
                    }

                    var  weekToSelect = vm.numOfWeeks[vm.numOfWeeks.length - 1];

                    if (isReturnTripRequest()) {
                        for (var i = 0; i < vm.numOfWeeks.length; i++) {
                            if (vm.numOfWeeks[i].name === returnTripConfig.numOfWeeks.name) {
                                weekToSelect = vm.numOfWeeks[i];
                                break;
                            }
                        }
                    }

                    vm.selectedConfig.numOfWeeks = weekToSelect;
                }
            });
        }

        function getAllStops() {
            StopDataService.getAllBusStops()
                .then(function (response) {
                    if (response.data.status == 1 && response.data.result) {
                        allStops = response.data.result.stops;

                        if (isReturnTripRequest() && returnTripConfig) {
                            vm.selectedConfig = angular.copy(returnTripConfig);
                            setHasTemplate();
                            for (var i = 0; i < vm.daysOfWeek.length; i++) {                                                                
                                vm.daysOfWeek[i].selected = isWeekdaySelected(vm.daysOfWeek[i], returnTripConfig.weekDays);
                            }
                        }                        

                        filterPickups();
                    }
                });
        }


        function isWeekdaySelected(input, configurationWeekDays) {
            for (var i = 0; i < configurationWeekDays.length; i++) {
                if (input.name == configurationWeekDays[i].name
                    && configurationWeekDays[i].selected)
                    return true;
            }
            return false;
        }

        function getPassengerVehicles() {
            vehicleService
                .getVehiclesForPassenger(passengerId)
            .then(function (response) {
                if (response.data && response.data.status == 1 && response.data.result.passengerVehicles)
                    vm.passengerVehicles = response.data.result.passengerVehicles;

                if (vm.passengerVehicles.length > 0)
                    vm.passengerVehicles.splice(0, 0, noVehicle);
                else
                    vm.passengerVehicles = [noVehicle];

                setSelectedVehicle();                
            });
        }

        function setSelectedVehicle() {

            var template = getTemplate();

            if (vm.useDefaultTemplate && template != undefined
                    && vm.selectedConfig.schedule == "AM" && template.vehicleId) {

                for (var i = 0; i < vm.passengerVehicles.length; i++) {
                    if (vm.passengerVehicles[i].id == template.vehicleId) {
                        vm.parkingSelected = true;
                        vm.selectedConfig.vehicle = vm.passengerVehicles[i];
                        break;
                    }
                }
            }

            else
                vm.selectedConfig.vehicle = vm.passengerVehicles[0];
        }


        function getDropoffs() {
            if (!vm.selectedConfig.pickup || !(vm.selectedConfig.pickup.id))
                return;

            StopDataService
                .getDropoffsForSelectedPickup(vm.selectedConfig.pickup.id)
            .then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    vm.dropoffStops = response.data.result.dropoffs;
                    vm.dropoffStops.splice(0, 0, noStop);

                    setDropoffStop();
                }
            });
        }

        function getTripTimes() {
            if (!vm.selectedConfig.pickup.id || !vm.selectedConfig.dropoff.id)
                return;

            StopDataService
                .getTripTimesForAdvancedReservation
                (vm.selectedConfig.pickup.id, vm.selectedConfig.dropoff.id, vm.selectedConfig.schedule)
                .then(function (response) {
                    if (response.data.status == 1 && response.data.result.allTrips) {
                        vm.tripTimes = response.data.result.allTrips;
                        vm.tripTimes.splice(0, 0, noTripTime);

                        setSelectedTrip();
                    }
                });
        }


        function setSelectedTrip() {
            if (vm.templates.length > 0 && vm.useDefaultTemplate) {
                var template = getTemplate();
                if (!template)
                    vm.selectedConfig.tripTime = vm.tripTimes[0];
                else {
                    for (var i = 0; i < vm.tripTimes.length; i++) {
                        if (vm.tripTimes[i].tripId == template.tripId) {
                            vm.selectedConfig.tripTime = vm.tripTimes[i];
                            break;
                        }
                    }
                }
            }
            else
                vm.selectedConfig.tripTime = vm.tripTimes[0];
        }

        function redirectToLogin() {
            $state.go('login');
        }

        activate();

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/adv-schedule/adv-schedule-setup.html';
        vm.ionicCustomClassName = '';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh Reservations';
        vm.ionicRefreshingText = 'Loading Reservations';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            vm.isLoading = true;
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
            vm.isLoading = false
        }
        // End of code for Ionic
    }

})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ReservationModalController', ReservationModalController);

    ReservationModalController.$inject = ['$uibModalInstance','reservation'];

    function ReservationModalController($uibModalInstance, reservation) {
        var vm = this;


        vm.passengerReservations = [reservation];

        vm.close = function () {
            $uibModalInstance.close();
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('LastLocationController', LastLocationController);

    LastLocationController.$inject = ['$rootScope','StopDataService', '$q', '$http', 'env', 'uiGmapIsReady', '$stateParams', '$interval', '$window', 'GeoLocationService', '$timeout', '$state', 'MessageService'];

    function LastLocationController($rootScope,StopDataService, $q, $http, env, uiGmapIsReady, $stateParams, $interval, $window, GeoLocationService, $timeout, $state, MessageService) {
        var vm = this;
        vm.mapControl = {};
        var myStyles = [
           {
               featureType: "poi",
               elementType: "labels",
               stylers: [
                     { visibility: "off" }
               ]
           },
           {
               "featureType": "transit",
               "elementType": "labels.icon",
               "stylers": [
                   {
                       "visibility": "off"
                   }
               ]
           }
        ];
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: true,
            streetViewControl: false,
            styles: myStyles

        };
        var busPin, stopPin, locationPin, myLocationPin, pinHub;
        var k = 0.001;
        if($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {
            busPin = 'images/pin-vehicle-blue.png';
            stopPin = 'images/pin-busstop-grey.png';
            locationPin = 'images/pin-location.png';
            myLocationPin = 'images/pin-my-location.png';
            pinHub = 'images/pin-hub.png';
        }
        else {
            busPin = 'images/pin-vehicle-blue.svg';
            stopPin = 'images/pin-busstop-grey.svg';
            locationPin = 'images/pin-location.svg';
            myLocationPin = 'images/pin-my-location.svg';
            pinHub = 'images/pin-hub.svg';
        }

        vm.hubIcon = { url: pinHub };
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        vm.tripDetails = {
            busName: '',
            ETA: ''
            

        };
        vm.show = true;
        vm.markerEvent = {
            click: function (gMarker, eventName, model) {
               vm.show = !vm.show
                }
        };

        vm.center = {
            latitude: 47.604356,
            longitude: -122.3360817
        };
        vm.zoom = 4;
        vm.incident = StopDataService.getIncident();
        vm.vehicleId = StopDataService.getVehicleId();
      //  vm.vehicleId = '103';
        if (angular.isUndefined(vm.vehicleId) || vm.vehicleId == null)
            vm.show = false;
        vm.stop = StopDataService.getStop() || null;
        if (vm.stop != null && vm.stop.latitude != undefined && vm.stop.latitude != null)
            vm.stop.icon = { url: stopPin };
        else
            vm.stop = null;
        vm.vehicle = {};
        vm.myLocation = undefined;
        vm.busLocation = undefined;
       
        vm.hubs = [];
        

        if (vm.incident) {
            //check for -ve in string and say ago or in
            vm.tripDetails.ETA = (vm.incident.EstimatedTimeString.indexOf('-') > -1 ? 'Departed ' : '') + vm.incident.EstimatedTimeString.replace('-', '') + ' min' + (vm.incident.EstimatedTimeString.indexOf('-') > -1 ? ' ago' : '');
            vm.tripDetails.busName = (!angular.isUndefined(vm.incident.TheVehicle) && vm.incident.TheVehicle != null) ? vm.incident.TheVehicle.VehicleName : '';
            vm.schedType = vm.incident.AMPM;
            if (vm.incident.IncidentHubs && vm.incident.IncidentHubs.length > 0) {
                angular.forEach(vm.incident.IncidentHubs, function (hub) {
                    if (hub.latitude != 0 && hub.longitude != 0)
                        vm.hubs.push(hub);
                });
            }
                
        }
        else {
            vm.show = false;
        }

        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                return StopDataService.getVehicle(vm.vehicleId)
            }, function (err) {
                MessageService.showError('Sorrry! Map could not be loaded.')
            })
            .then(function (vehicle) {
                vm.busLocation = {
                    latitude: parseFloat(vehicle.data.MDC.LastLatitude),
                    longitude: parseFloat(vehicle.data.MDC.LastLongitude),
                    icon: { url: busPin }
                };
                $timeout(function () {
                    google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
                    resetMap()
                }, 50);

            },
                function (err) {
                    $timeout(function () {
                        google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
                        resetMap()
                    }, 50);
                });
            //.then(function (position) {
            //     vm.myLocation = {
            //        coords: {
            //            latitude:position.coords.latitude,
            //            longitude: position.coords.longitude
            //        },
            //        icon: vm.myLocationIcon
            //     };
               
            //     $timeout(function () {
            //         google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
            //         resetMap()
            //     }, 50);
            //}, function (err) {
            //    $timeout(function () {
            //        google.maps.event.trigger(vm.mapControl.getGMap(), 'resize');
            //        resetMap();
            //    }, 50);
            //});
        }

        activate();

       function activate() {
           getMap();

            vm.promise = $interval(updateVehiclePosition, 15000);
       }

       vm.$onDestroy = function () {
           $interval.cancel(vm.promise);
       };
       function resetMap() {
           var bounds = new google.maps.LatLngBounds();
           
           if (vm.schedType == 'AM') {
               if (!angular.isUndefined(vm.stop) && vm.stop != null && vm.stop.latitude != null && vm.stop.latitude != 0)
                   bounds.extend(new google.maps.LatLng(vm.stop.latitude, vm.stop.longitude));
           }
           if (vm.busLocation != null && vm.busLocation.latitude != null && vm.busLocation.latitude != 0)
               bounds.extend(new google.maps.LatLng(vm.busLocation.latitude, vm.busLocation.longitude));
           if (vm.schedType == 'PM') {
               if (vm.hubs.length > 0) {
                   angular.forEach(vm.hubs, function (hub) {
                       bounds.extend(new google.maps.LatLng(hub.latitude, hub.longitude));
                   });
               }
           }
           if (!bounds.isEmpty()) {
               vm.mapControl.getGMap().fitBounds(bounds);
               vm.mapControl.getGMap().setZoom(vm.mapControl.getGMap().getZoom() - 1);
           }
           //if (vm.busLocation != null && vm.busLocation.latitude != null && vm.busLocation.latitude != 0) {
           //    vm.center = {
           //        latitude: vm.busLocation.latitude,
           //        longitude: vm.busLocation.longitude
           //    };
           //}

       }

       function updateVehiclePosition() {
           if($state.current.name != 'last-location')
           {
               $interval.cancel(vm.promise);
           }
           else
           {
               
               StopDataService.getVehicle(vm.vehicleId).then(function (vehicle) {
                   if (!angular.isUndefined(vehicle.data.MDC) && vehicle.data.MDC != null) {
                       vm.busLocation = {
                           latitude: parseFloat(vehicle.data.MDC.LastLatitude),
                           longitude: parseFloat(vehicle.data.MDC.LastLongitude),
                           icon: { url: busPin }
                       };
                   }
                   //vm.center = {
                   //    latitude: parseFloat(vehicle.data.MDC.LastLatitude),
                   //    longitude: parseFloat(vehicle.data.MDC.LastLongitude),
                   //};
              
               }, function (err) {
                   $interval.cancel(vm.promise);
               });
           }
       }

        // Start of code for Ionic
       vm.ionicInclude = 'app/modules/commuter/location/last-location.html';
       vm.ionicCustomClassName = '';
       vm.ionicHideNavBar = false;
       vm.ionicUseRefresher = false;
        // End of code for Ionic

    }

    
})();

(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .factory('LocationService', LocationService);

	LocationService.$inject = ['$http', '$q'];

	function LocationService($http, $q) {

		var service = {
			getLocation: getLocationFromGoogle,
			getDrivingDistances: getDrivingDistances

		};

		function getDrivingDistances(position, destinations) {
			var deferred = $q.defer();
			var dests = [];
			angular.forEach(destinations, function (value, key) {
				dests.push({ 'lat': value.latitude, 'lng': value.longitude });
			});

			var service = new google.maps.DistanceMatrixService;
			service.getDistanceMatrix({
				origins: [{ 'lat': position.latitude, 'lng': position.longitude }],
				destinations: dests,
				travelMode: 'DRIVING',
				unitSystem: google.maps.UnitSystem.METRIC,
				avoidHighways: false,
				avoidTolls: false
			}, function (response, status) {
				if (status !== 'OK') {
					deferred.reject('Cannot calculate distance');
				} else {
					deferred.resolve(response);
				}
			});
			return deferred.promise;

		}


		function getLocationFromGoogle(searchTerm) {
			var deferred = $q.defer();
			//$http.get('https://maps.googleapis.com/maps/api/geocode/json', {
			//    params: {
			//        address: searchTerm,
			//        sensor: true,
			//        key: 'AIzaSyCA5jVfa7sJk7OYR_dUbTsZrGJA7E1AduI'
			//    }
			//}).then(function successCallback(response) {
			//    deferred.resolve(response);
			//}, function (err) {
			//    deferred.reject(err);
			//});
			//return deferred.promise;



			var geocoder = new google.maps.Geocoder;
			var address = searchTerm;

			if (geocoder) {
				geocoder.geocode({ 'address': address }, function (results, status) {
					if (status == google.maps.GeocoderStatus.OK) {
						deferred.resolve(results);
					}
					else {
						deferred.reject(status);
					}
				});


			}
			else
				deferred.reject('Geocoder service not available');
			return deferred.promise;


		}



		return service;

	}




})();





(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('MessageController', MessageController);

    MessageController.$inject = ['$location', '$uibModalInstance', 'message'];

    function MessageController($location, $uibModalInstance, message) {
        var vm = this;
        vm.title = message.type;
        vm.content = message.message;

        vm.isError = false;
        vm.isInfo = false;
        vm.isSuccess = false;

        vm.cancel = cancel;
        function cancel() {
            $uibModalInstance.close();
        };

        switch (message.type) {
            case 'Error':
                vm.isError = true;
                break;
            case 'Information':
                vm.isInfo = true;
                break;
            case 'Success':
                vm.isSuccess = true;
                break;
        }
    };
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('MessageService', MessageService);

    MessageService.$inject = ['$http', '$uibModal'];

    function MessageService($http, $uibModal) {
        var service = {
            showError: showError,
            showInformation: showInformation,
            showSuccess: showSuccess
        };

        return service;

        function showError(message) {
            showMessage(message, 'Error');
        }
        function showInformation(message) {
            showMessage(message, 'Information');
        }
        function showSuccess(message) {
            showMessage(message, 'Success');
        }

        function showMessage(messageToDisplay, type) {
            var messageObj = {
                message: messageToDisplay,
                type: type
            };
            var modalReserve = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/message/message.html',
                controller: 'MessageController as vm',
                size: '-fs',
                backdrop: 'static',
                resolve: {
                    message: messageObj
                }
            });
            modalReserve.result.then(function () {
            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('MyVehiclesController', MyVehiclesController);

    MyVehiclesController.$inject = ['$rootScope','$location', '$uibModal', 'authService', 'vehicleService', 'MessageService','LuumLinkedService', 'PageService'];

    function MyVehiclesController($rootScope, $location, $uibModal, authService, vehicleService, MessageService, LuumLinkedService, PageService) {
        var vm = this;
        var passengerId = authService.authentication.passengerId;

        vm.vehicles = [];
        vm.vehicleInfo = undefined;
        vm.isLoading = false;
        vm.isRemoving = false;
        vm.PageService = PageService;
        vm.PageService.setTitle('My Vehicles');
        vm.PageService.setHeadline('Manage Vehicles');

        vm.addNew = function () {
            var modalReserve = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/modals/add-vehicle-modal/add-vehicle.html',
                controller: 'AddVehicleController as vm',
                backdrop: 'static',
                resolve: {
                    atleastOneVehicleExist: vm.vehicles.length > 0
                }
            });
            modalReserve.result.then(function (result) {
                if(result.isAdded)
                    getVehicles();
            });
        };
        
        
        vm.remove = function (id, index) {
            if (id) {
                var removeVehicleConfirmation = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/commuter/modals/remove-vehicle-modal/remove-vehicle-confirmation.html',
                    controller: 'RemoveVehicleConfirmationController as vm',
                    size: '-fs',
                    resolve: {
                        id: function () {
                            return id;
                        }
                    }
                });
                removeVehicleConfirmation.result.then(function (result) {
                    if (result.removed) {
                        vm.vehicles.splice(index, 1);
                    }

                    if (result.errorMessage) {
                        MessageService.showError(result.errorMessage);
                    }
                });
            }
        }

        var activate = function () {
            LuumLinkedService.verify(authService.authentication.passengerId);
            getVehicles();
        }

        vm.makeDefault = function (vId, index) {
            vehicleService.markDefault(vId, passengerId)
            .then(function (response) { 
                if (response.data.status == 1)
                    getVehicles();
            }, function (error) {
                essageService.showError(error.data.result);
            });
        };

        var getVehicles = function () {
            vm.isLoading = true;
            vehicleService.getVehiclesForPassenger(passengerId)
              .then(function (response) {
                  if (response.data && response.data.status == 1 && response.data.result.passengerVehicles != null) {
                      vm.vehicles = response.data.result.passengerVehicles;
                      if (vm.vehicles.length > 0) {
                          vm.selectedVehicle = vm.vehicles[0];
                          vm.hasVehicles = true;
                          vm.needsParking = false;
                  }
              }

                  vm.isLoading = false;
            }, function (error) {
                  vm.hasVehicles = false;
                  vm.isLoading = false;
            });
            };

        activate();

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/my-vehicles/my-vehicles.html';
        vm.ionicCustomClassName = 'is-myVehicles';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh Vehicles';
        vm.ionicRefreshingText = 'Loading Vehicles';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            vm.isLoading = true;
            vm.vehicles = [];
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
            vm.isLoading = false;
        }
        // End of code for Ionic
       

    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('vehicleService', vehicleService);

    vehicleService.$inject = ['$http','$q','env','DivisionService'];

    function vehicleService($http, $q, env, DivisionService) {
        var service = {
            save: saveVehicle,
            getVehiclesForPassenger: getVehicles,
            removeVehicle: deactivateVehicle,
            canPark: getAvailableParkingForStop,
            markDefault :markDefault
        };        

        return service;

        function getVehicles(passengerId) {
            return $http({ method: 'GET', 'url': env.oneMVApiUrl + 'commuter/passengers/' + passengerId + '/vehicles' })
                .then(function (response) {
                    return response;
                }, function (err) { 
                    return err; });
        };

        function saveVehicle(vehicleInfo, passengerId) {
            return $http({ data: vehicleInfo, method: 'POST', 'url': env.oneMVApiUrl + 'commuter/passengers/' + passengerId + '/vehicles' })
                .then(function (response) {
                    return response;
            }, function (err) {
                    return err;
            });
        };

        function deactivateVehicle(vehicleId,passengerId) {            
            return $http({ method: 'PUT', 'url': env.oneMVApiUrl + 'commuter/passengers/' + passengerId + '/vehicles' + '/' + vehicleId + '/deactivate' })
                .then(function (response) {
                return response;
            }, function (err) {
                return err;
            });
        };       

        function markDefault(vehicleId,passengerId) {            
            return $http({ method: 'PUT', 'url': env.oneMVApiUrl + 'commuter/passengers/' + passengerId + '/vehicles' + '/' + vehicleId + '/markDefault' })
                .then(function (response) {
                return response;
            }, function (err) {
                return err;
            });
        };

        //move this out while working on selected stop page
        function getAvailableParkingForStop(stopId, reservationDate) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'commuter/stops/' + stopId + '/availableParking/' + reservationDate;
            return $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('PublishedScheduleController', PublishedScheduleController);

    PublishedScheduleController.$inject = ['$scope', '$location', 'PublishedScheduleService', '$uibModal', 'StopDataService',
        'MessageService', '$filter', '$anchorScroll', 'PageService','OneMvServices'];

    function PublishedScheduleController($scope, $location, PublishedScheduleService, $uibModal, StopDataService,
        MessageService, $filter, $anchorScroll, PageService,OneMvServices) {

        var vm = this;
        vm.PageService = PageService;
        vm.PageService.setTitle('Published Schedule');
        vm.PageService.setHeadline(OneMvServices.getCommuterInfo().alias);


        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        vm.date = mm + '/' + dd + '/' + yyyy;
        vm.scheduleBlock = [];
        vm.publicSchedule = [];
        vm.allSchdeuleForStop = [];
        vm.stopsLatLong = [];
        vm.incidentRecords = [];
        vm.futureRoutes = [];
        vm.turnLatLong = [];
        vm.isLoading = true;
        vm.searchBy = "$";
        vm.selectedRoute = StopDataService.getRoute();

        vm.getDropOffPickUpClass = getDropOffPickUpClass;


        PublishedScheduleService.getSchedules(vm.date)
        .then(function (response) {
            vm.incidentRecords = response.data.result.routes;
            vm.filterChange();
            vm.isLoading = false;
        }, function (err) {
            MessageService.showError('Sorry! Could not load the schedules!');
            vm.isLoading = false;
        });

        PublishedScheduleService.getUpComingSchedules(vm.date)
        .then(function (response) {
            vm.futureRoutes = response.data.result;
            vm.isLoading = false;
        }, function (err) {
        });

        //filter users based on search result
        vm.filterChange = function () {
            if (vm.searchText != '' && vm.searchText != undefined) {
                var serchTerm = '{ "' + vm.searchBy + '" : "' + vm.searchText + '" }';
                var serchTermObj = JSON.parse(serchTerm);
                vm.filterIncidents = $filter('filter')(vm.incidentRecords, serchTermObj);

            } else {
                vm.filterIncidents = vm.incidentRecords;
            }

            sortRoutes();
            sortArrivals();

            if (vm.selectedRoute != null && vm.selectedRoute.routeId != null) {
                var newHash = vm.selectedRoute.routeId;
                if ($location.hash() !== newHash) {
                    // set the $location.hash to `newHash` and
                    // $anchorScroll will automatically scroll to it
                    $location.hash(newHash);
                } else {
                    // call $anchorScroll() explicitly,
                    // since $location.hash hasn't changed
                    $anchorScroll();
                }
            }
        };

        function sortRoutes() {
            if (vm.incidentRecords)
                vm.incidentRecords.sort(function (a, b) {
                    return (a.longName.toLowerCase() > b.longName.toLowerCase())
                        ? 1
                        : ((b.longName.toLowerCase() > a.longName.toLowerCase()) ? -1 : 0);
                });
        }

        function sortArrivals() {
            angular.forEach(vm.incidentRecords, function (route) {
                if (route.stops)
                    angular.forEach(route.stops, function (stop) {
                        if (stop.arrivals)
                            stop.arrivals.sort(function (a, b) {
                                return moment(a, 'h:mm a').isAfter(moment(b, 'h:mm a')) ? 1 :
                                    moment(a, 'h:mm a').isBefore(moment(b, 'h:mm a')) ? -1 : 0;
                            });
                    });
            })
        }


        vm.navigateToStop = function (selectedStop) {

            if (selectedStop.isHub) return;

            var stop = {
                'name': selectedStop.name,
                'id': selectedStop.stopId,
                'distance': null,
                'icon': 'images/pin-busstop.svg',
                'latitude': selectedStop.latitude,
                'longitude': selectedStop.longitude,
                'address': selectedStop.address
            };
            StopDataService.setStop(stop);
            var locationIcon = {
                url: 'images/pin-my-location.svg'
            };
            vm.position = {
                "coords": {
                    "latitude": selectedStop.latitude,
                    "longitude": selectedStop.longitude
                },
                "icon": locationIcon
            };
            //if (vm.position != undefined && vm.position != null)
            StopDataService.setGeoLocation(vm.position)
            $location.path('/commuter/selected-stop');
        };

        vm.getMap = function (index) {

            vm.stopsLatLong = vm.filterIncidents[index];

            PublishedScheduleService.getTurnLatLngs(vm.stopsLatLong.id)
            .then(function (response) {
                var routeData = response.data;
                //if (routeData.RouteDir1.Vertices.length > 0) {
                //    vm.turnLatLong = routeData.RouteDir1.Vertices
                //}
                //else
                //{
                //    MessageService.showError('Sorry! Could not load the map, cannot find the stops.');
                //}
                mapPage(routeData);

            }, function (err) {
            });
        };

        vm.getFutureRouteMap = function (route) {

            vm.stopsLatLong = route;

            PublishedScheduleService.getTurnLatLngs(vm.stopsLatLong.RouteId)
            .then(function (response) {
                var routeData = response.data;


                //else
                //{
                //    MessageService.showError('Sorry! Could not load the map, cannot find the stops.');
                //}
                mapPage(routeData);

            }, function (err) {
            });
        };

        function mapPage(routeData) {
            var modalGetMap = $uibModal.open({
                animation: true,
                windowClass: 'map-modal',
                templateUrl: 'app/modules/commuter/modals/stops-map-modal/stops-map.html',
                controller: 'StopsMapController as vm',
                backdrop: 'static',
                size: '-fs',
                resolve: {
                    schedule_stops: function () {
                        return vm.stopsLatLong;
                    },
                    routeData: function () {
                        return routeData;
                    },

                }
            });

            modalGetMap.result.then(function (isDone) {
                if (isDone) {
                }
            }, function () {
            });
        };
        activate();

        function activate() { }

        function getDropOffPickUpClass(isAM, isHub) {
            var className;
            if (isAM) {
                if (isHub)
                    className = 'dropoff';
                else
                    className = 'pickup';
            } else {
                if (isHub)
                    className = 'pickup';
                else
                    className = 'dropoff';
            }
            return className;
        }

        $scope.$on('$locationChangeStart', function (event) {
            StopDataService.setRoute(null);
        });
        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/published-schedule/published-schedule.html';
        vm.ionicCustomClassName = '';
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh Schedule';
        vm.ionicRefreshingText = 'Loading Schedule';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            activate();
            $scope.$broadcast('scroll.refreshComplete');
        }
        // End of code for Ionic

    }
})();


(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('PublishedScheduleService', PublishedScheduleService);

    PublishedScheduleService.$inject = ['$http', '$q', 'env','DivisionService'];

    function PublishedScheduleService($http, $q, env, DivisionService) {
        var service = {
            getSchedules: getSchedules,
            getIncidents: getIncidents,
            getAllScheduleForStop: getAllScheduleForStop,
            getTurnLatLngs: getTurnLatLngs,
            getUpComingSchedules: getUpComingSchedules
        };

        return service;

        function getSchedules(date) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/schedule/published';
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getUpComingSchedules(date) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/schedule/upcoming';
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getTurnLatLngs(routeId) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.oneMVFixedRouteApiUrl + 'route/shapesByRoute/' + routeId + '/206';// + DivisionService.getDivisionId();
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getIncidents(blockId, minIncId, incCount) {
            var deferred = $q.defer();
            var includeStops = true;
            //get the base url from config.
            var serviceUrl = env.commuterApiUrl + 'common/' + DivisionService.getDivisionId() + '/incidents/' + blockId;
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function getAllScheduleForStop(stopId, routeId) {
            var deferred = $q.defer();
            var routeId = 0;
            //get the base url from config.
            var serviceUrl = env.commuterApiUrl + 'common/' + DivisionService.getDivisionId() + '/stop/' + stopId + '?RouteId=' + routeId;
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ScheduleController', ScheduleController);

    ScheduleController.$inject = ['$location', '$stateParams', '$uibModal',
        'ScheduleService', 'env', 'StopDataService', 'uiGmapIsReady', 'ReservationService','DivisionService'];

    function ScheduleController($location, $stateParams, $uibModal,
        ScheduleService, env, StopDataService, uiGmapIsReady, ReservationService, DivisionService) {
        
        var vm = this;

        vm.userId = 'b1c57df3-7604-47eb-bf51-317332a9f6a0' //hard-coding. Waiting for social login task to get over

        //default values set-up
        vm.ScheduleType = "AM";

        //functions exposed to view
        vm.reserve = reserve;
        vm.cancelReservation = cancelReservation;
        vm.changeSchedule = changeSchedule;
        
        //vm.selectedStop = StopDataService.getStop();
        vm.selectedStop = { "name": "Test Stop 1", "id": 152131145, "distance": null, "icon": { "url": "images/pin-busstop-grey.svg" }, "latitude": 43.75514221191406, "longitude": -116.57597351074219, "$$hashKey": "object:113" };
        var currentLocation = StopDataService.getGeoLocation();
        vm.fromLocation = currentLocation !=null ? currentLocation.coords.latitude + ',' + currentLocation.coords.longitude : '';

        vm.center = {
            latitude: 40.651739,
            longitude: -73.953148
        };

        vm.zoom = 10;
        vm.mapControl = {};
        vm.options = {};
        vm.markerEvents = function () {
            //for future?
        };
        vm.showDirections = currentLocation == null;

        var bounds = new google.maps.LatLngBounds();


        uiGmapIsReady.promise().then(function (maps) {       
            
            if(vm.showDirections){
                bounds.extend(new google.maps.LatLng(vm.selectedStop.latitude, vm.selectedStop.longitude));
                vm.mapControl.getGMap().fitBounds(bounds);
                google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
            }
            else{
                mapDirection(vm.fromLocation);
            }
        });
        
        loadIncidents();

        vm.getDirection = function () {

            var geocoder = new google.maps.Geocoder;
            geocoder.geocode({ 'address': vm.fromLocation },
                function (response, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        mapDirection(response[0].geometry.location.lat() + ',' + response[0].geometry.location.lng());
                    }
                });            
        };

        var mapDirection = function (start) {

            var directionsDisplay = new google.maps.DirectionsRenderer;
            var directionsService = new google.maps.DirectionsService;
            var directions = document.getElementById('directions');
            directionsDisplay.setPanel(directions);

            directionsService.route({
                origin: start,
                destination: vm.selectedStop.latitude + ',' + vm.selectedStop.longitude,
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    directionsDisplay.setMap(vm.mapControl.getGMap());

                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        };


        vm.navigateToTripPage = function (index) {
            var incident = vm.nonPerformedIncidents[index];
            $location.path('/commuter/selected-trip/' + DivisionService.getDivisionId() + '/' + incident.BlockId + '/' + incident.IncidentId);
        };


        
        function loadIncidents() {
            ScheduleService.getSchedule( vm.selectedStop.id, vm.userId, 0)
                          .then(function (response) {
                              vm.nonPerformedIncidents = response.data;
                          });
        };

        function reserve(incidentToReserve) {
            //alert(incidentToReserve.Vehicle.VehicleName);
            var modalReserve = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/modals/reservation-modal/reservation.html',
                controller: 'ReservationController as vm',
                size: '',
                resolve: {
                    incidentToReserve: incidentToReserve,
                    isAdd: true
                }
            });
            modalReserve.result.then(function () {
                //refresh the grid to show the incident as reserved
                loadIncidents();
            });
        };

        function cancelReservation(incidentToCancel) {
            var _reservation = incidentToCancel.TheReservation;
            ReservationService.cancelReservation(_reservation.Id)
            .then(function (response) {
                if (response && response.data && response.data.status == 1) {
                    alert('Reservation Cancelled');
                    loadIncidents();
                } else {
                    alert(response.data.message)
                }
            });
        };


        function changeSchedule() {
            //alert(vm.ScheduleType);
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('SelectedTripController', SelectedTripController);

    SelectedTripController.$inject = ['SelectedTripService','$stateParams', 'uiGmapIsReady'];

    function SelectedTripController(SelectedTripService, $stateParams, uiGmapIsReady) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'Selected Trip';
        var stopId = $stateParams.stopId;
        var startLocation = {};
        var endLocation = {};
        vm.center = {
            latitude: 40.651739,
            longitude: -73.953148
        };

        vm.zoom = 10;
        vm.mapControl = {};
        vm.stopsMarkerArray = [];

        //getMap();

        //function getMap() {
        //    var mapOptions = {
        //        zoom: vm.zoom,
        //        center: vm.center,
        //        mapTypeId: google.maps.MapTypeId.ROADMAP
        //    }
        //    vm.map = new google.maps.Map(document.getElementById('map'), mapOptions);
        //};

        uiGmapIsReady.promise().then(function (maps) {  
            //vm.mapControl.getGMap().fitBounds(bounds);
            google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
        });

        SelectedTripService.getTrips($stateParams.blockId, $stateParams.minIncId, 5)
        .then(function (response) {
            vm.upComingStops = response.data;
            endLocation = vm.upComingStops.slice(-1)[0];
            vm.endStoplocation = endLocation.TheStop;

            for (var i = 0; i < vm.upComingStops.length; i++)
            {
                if (vm.upComingStops[i].TheStop.StopId == stopId)
                {
                    vm.startStopLocation = vm.upComingStops[i].TheStop;
                }
                else {
                    if (vm.upComingStops[i].TheStop.StopId != vm.endStoplocation.StopId) {
                        vm.stopsMarkers = { lat: vm.upComingStops[i].TheStop.Latitude, lng: vm.upComingStops[i].TheStop.Longitude }
                        vm.stopsMarkerArray.push({'location' : vm.stopsMarkers, 'stopover' : false});
                    }
                }                
            }
            mapDirection();
        }, function (err) {
            //alert(err);
        });

        var mapDirection = function () {
            var start = vm.startStopLocation.Latitude + ',' + vm.startStopLocation.Longitude;
            var end = vm.endStoplocation.Latitude + ',' + vm.endStoplocation.Longitude;
            var directionsDisplay = new google.maps.DirectionsRenderer({
                suppressMarkers: true
            });
            var directionsService = new google.maps.DirectionsService;            
            vm.stopsMarkerArray.splice(-1, 1);
            directionsService.route({
                origin: start,
                destination: end,
                waypoints: vm.stopsMarkerArray,
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    directionsDisplay.setMap(vm.mapControl.getGMap());

                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        };
    }
})();


(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('SelectedTripService', SelectedTripService);

    SelectedTripService.$inject = ['$http', '$q','env','DivisionService'];

    function SelectedTripService($http, $q, env, DivisionService) {
        var service = {
            getTrips: getTrips
        };

        return service;

        function getTrips(blockId, minIncId, incCount) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.commuterApiUrl + 'common' + DivisionService.getDivisionId() + '/incidents/' + blockId + '?minIncId=' + minIncId + '&incCount=' + incCount;
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('LandingController', LandingController);
    LandingController.$inject = ['$window', '$location',
        'ScheduleService', 'uiGmapIsReady', 'DivisionService', 'StopService',
        'googleMapsConfig', 'GeoLocationService','PageService','OneMvServices'];
    function LandingController($window, $location,
        ScheduleService, uiGmapIsReady, DivisionService,StopService,
        googleMapsConfig, GeoLocationService, PageService,OneMvServices) {
        var vm = this;

        PageService.setTitle('Stops / Routes');
        PageService.setHeadline(OneMvServices.getFixedRouteInfo().alias);
        vm.optionSelection = "stop";
        vm.gotoRoutes = gotoRoutes;
        vm.gotoStops = gotoStops;
        var divisionId;
        var gObject;
        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {

            myLocationPin = 'images/pin-my-location.png';

        }
        else {

            myLocationPin = 'images/pin-my-location.svg';

        }
        vm.zoom = 15;
        vm.center = {
                latitude: 39.809860,
                longitude: -98.555183
        };
        vm.myStyles = googleMapsConfig.mapStyles;
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        vm.mapControl = {};
        vm.allStops = [];

        function gotoRoutes() {
            $location.path('fixed-route/allRoutes');
        }

        function gotoStops() {
            $location.path('fixed-route/stops');
        }

        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {


                GeoLocationService.getCurrentPosition().then(function (position) {
                    vm.position = {
                        coords: {
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude
                        },
                        icon: vm.myLocationIcon
                    };
                    vm.center.latitude = position.coords.latitude;
                    vm.center.longitude = position.coords.longitude;
                    getStops();

                    google.maps.event.trigger(vm.mapControl.getGMap(), "resize");


                }, function (err) {
                    //position error
                    ScheduleService.getServiceAreaLocation(divisionId).then(function (response) {
                        if (response.data.status == 1) {
                            vm.center.latitude = response.data.result.Latitude;
                            vm.center.longitude = response.data.result.Longitude;
                            if (response.data.result.ZoomLevel !== undefined && response.data.result.ZoomLevel !== null && response.data.result.ZoomLevel != '')
                                vm.zoom = response.data.result.ZoomLevel;
                        }
                    });
                    getStops();
                    google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
                });
            });




        }

        function getStops() {
            var stopss = [];
            var map = vm.mapControl.getGMap();

            StopService.getAllStops(divisionId).then(function (result) {
                var allStops = result.data;
                for (var i = 0; i < allStops.length; i++) {                    
                    var stop = allStops[i];

                        var position = new google.maps.LatLng(stop.Latitude, stop.Longitude);

                        var stopMarker = new google.maps.Marker({
                            position: position,
                            map: map,
                            optimized: false,
                            icon: {
                                path: 'M0,2.99420208 C0,1.34054993 1.34331197,0 2.99420208,0 L17.0057979,0 C18.6594501,0 20,1.34331197 20,2.99420208 L20,17.0057979 C20,18.6594501 18.656688,20 17.0057979,20 L2.99420208,20 C1.34054993,20 0,18.656688 0,17.0057979 L0,2.99420208 Z M6,20 L13.7690812,20 L9.75999999,22.76 L6,20 Z',                                
                                fillOpacity: 1,
                                fillColor: '#F76F1E',
                                strokeWeight: 0,
                                anchor: new google.maps.Point(9, 21),
                                size: new google.maps.Size(20, 23)
                            },
                            zIndex: 5,
                            animation: google.maps.Animation.DROP
                        });

                        var icon = new google.maps.Marker({
                            position: position,
                            map: map,
                            optimized: false,
                            icon: {
                                path: 'M0,0 L0,13.0899217 C0,13.6367269 0.443667457,14.08 1.00653274,14.08 L1.31047619,14.08 L1.31047619,16 L3.2,16 L3.2,14.08 L12.8,14.08 L12.8,16 L14.6895238,16 L14.6895238,14.08 L14.9934673,14.08 C15.5493599,14.08 16,13.6274801 16,13.0899217 L16,0.990078259 C16,0.443273135 15.5553691,0 14.9991283,0 L0,0 Z M15.4139194,7.85557231 C15.4139194,8.12679623 15.1819301,8.34666667 14.9225207,8.34666667 L1.13608738,8.34666667 C0.864695354,8.34666667 0.644688645,8.12790141 0.644688645,7.85557231 L0.644688645,3.07776103 C0.644688645,2.8065371 0.876677992,2.58666667 1.13608738,2.58666667 L14.9225207,2.58666667 C15.1939127,2.58666667 15.4139194,2.80543193 15.4139194,3.07776103 L15.4139194,7.85557231 Z M0.615384615,1.1312207 C0.615384615,0.859927 0.847373962,0.64 1.10678335,0.64 L14.8932166,0.64 C15.1646087,0.64 15.3846154,0.862958984 15.3846154,1.1312207 L15.3846154,1.4287793 C15.3846154,1.700073 15.152626,1.92 14.8932166,1.92 L1.10678335,1.92 C0.835391324,1.92 0.615384615,1.69704102 0.615384615,1.4287793 L0.615384615,1.1312207 Z M0.615384615,10.56 C0.615384615,10.0298066 1.04321759,9.6 1.57207584,9.6 L2.73561646,9.6 C3.26398244,9.6 3.69230769,10.0261102 3.69230769,10.56 C3.69230769,11.0901934 3.26447472,11.52 2.73561646,11.52 L1.57207584,11.52 C1.04370987,11.52 0.615384615,11.0938898 0.615384615,10.56 Z M12.3076923,10.56 C12.3076923,10.0298066 12.7355253,9.6 13.2643835,9.6 L14.4279242,9.6 C14.9562901,9.6 15.3846154,10.0261102 15.3846154,10.56 C15.3846154,11.0901934 14.9567824,11.52 14.4279242,11.52 L13.2643835,11.52 C12.7360176,11.52 12.3076923,11.0938898 12.3076923,10.56 Z M11.423955,11.1999507 C11.6340659,11.3767363 11.5848839,11.5200493 11.3051605,11.5200493 L4.69483948,11.5200493 C4.41912022,11.5200493 4.36801543,11.3749851 4.57604503,11.1999507 L4.19560559,11.5200493 C4.40571649,11.3432637 4.80388725,11.1999507 5.06852983,11.1999507 L10.9314702,11.1999507 C11.203462,11.1999507 11.5963648,11.3450149 11.8043944,11.5200493 L11.423955,11.1999507 Z M11.423955,11.8399507 C11.6340659,12.0167363 11.5848839,12.1600493 11.3051605,12.1600493 L4.69483948,12.1600493 C4.41912022,12.1600493 4.36801543,12.0149851 4.57604503,11.8399507 L4.19560559,12.1600493 C4.40571649,11.9832637 4.80388725,11.8399507 5.06852983,11.8399507 L10.9314702,11.8399507 C11.203462,11.8399507 11.5963648,11.9850149 11.8043944,12.1600493 L11.423955,11.8399507 Z',
                                fillColor: '#fff',
                                fillOpacity: 1,
                                strokeWeight: 0,
                                anchor: new google.maps.Point(7, 19),
                                size: new google.maps.Size(16, 16)
                            },
                            zIndex: 6,
                            animation: google.maps.Animation.DROP
                        });

                        var shadow = new google.maps.Marker({
                            position: position,
                            map: map,
                            optimized: false,
                            icon: {
                                path: 'M-5.83252597,14.3155545 C-6.35350295,13.5889938 -5.4359106,13 -3.78917972,13 L10.1871155,13 C11.8366015,13 13.5969795,13.5902074 14.1170863,14.3155545 L18.5313877,20.4717917 C19.0523647,21.1983524 18.1347724,21.7873462 16.4880415,21.7873462 L2.51174624,21.7873462 C0.862260281,21.7873462 -0.898117751,21.1971389 -1.41822457,20.4717917 L-5.83252597,14.3155545 Z M5.5099714,21.7873462 L13.2594793,21.7873462 L10.1300263,23 L5.5099714,21.7873462 Z',
                                fillColor: '#000',
                                fillOpacity: 0.10,
                                strokeWeight: 0,
                                anchor: new google.maps.Point(9, 21),
                                size: new google.maps.Size(21, 10)

                            },
                            zIndex: 4,
                            animation: google.maps.Animation.DROP
                        });
                    }               

            });
        }
        function activate(callback) {

            divisionId = DivisionService.getDivisionId();
            if (divisionId != null && divisionId != undefined && divisionId != '') {
                if (callback && typeof callback === "function")
                    callback();
            }
            else
                $location.path('dashboard/');
        }


        activate(getMap);

        // Start of code for Ionic
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.ionicInclude = 'app/modules/fixed-route/Landing/landing.html';
        vm.ionicCustomClassName = 'ionic-fixed-route-landing';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

    }
})();
(function () {
    "use strict";

    angular
        .module('oneMVApp')
        .directive('seatAvailability', seatAvailability);

    seatAvailability.$inject = [];

    function seatAvailability() {
        return {
            restrict: 'E',
            scope: {
                divisionAllowsWaitlist: '=',
                trip:'='
            },
            templateUrl: 'app/modules/commuter/stop/seat-availability.component.html'
        };
    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('SelectedStopController', SelectedStopController);

    SelectedStopController.$inject = ['$location', '$rootScope', '$scope', '$uibModal', '$interval', '$state',
                                      'StopDataService', 'ReservationService', 'authService',
                                       'DivisionService', 'MapService', 'CommonService', 'MapIconService', 'PageService',
                                       'VehicleDataService', 'ScheduleService', 'LuumLinkedService','OneMvServices'];

    function SelectedStopController($location, $rootScope, $scope, $uibModal, $interval, $state,
                                    StopDataService, ReservationService, authService,
                                    DivisionService, MapService, CommonService, MapIconService, PageService,
                                    VehicleDataService, ScheduleService, LuumLinkedService,OneMvServices) {
        var vm = this;
        vm.selectedStop = StopDataService.getStop();
        vm.PageService = PageService;
        vm.PageService.setTitle(vm.selectedStop.name);
        vm.PageService.setHeadline(OneMvServices.getCommuterInfo().alias);

        vm.hubs = [];
        vm.selectedHub = undefined;
        vm.availableParking = 0;
        vm.nonPerformedTrips = [];
        vm.show = false;
        vm.calendarOpened = false;
        vm.passengerReservation = undefined;
        vm.isLoading = false;
        vm.calendar = {};
        vm.calendar.opened = false;
        vm.calendar.dateOptions = {};
        vm.isPassengerLoggedIn = authService.isLoggedIn();
        vm.hasReservation = false;
        vm.advReservationWindow = 14;
        vm.markers = [];
        vm.map = MapService.initializeMap();
        var divisionDate = undefined;
        var mapVehicles = [];
        var vehiclePoll = undefined;
        var markerEvents = [{ event: 'click', callback: iconClickHandler }];        
        vm.divisionAllowsWaitlist = true;
        vm.companionAllowed = false;
        vm.specialEvent = undefined;
        vm.selectGuestDay = selectGuestDay;


        vm.getDirectionsToSelectedStop = function () {
            StopDataService.setStop(vm.selectedStop);
            //StopDataService.setGeoLocation(vm.selectedLocation);
            $location.path('/commuter/directions');
        };

        vm.openMapApp = function () {
            var url = "";
            if ((navigator.platform.indexOf("iPhone") != -1)
         || (navigator.platform.indexOf("iPod") != -1)
                || (navigator.platform.indexOf("iPad") != -1)) {
                url = "http://maps.apple.com/?q=" + vm.selectedStop.latitude + "," + vm.selectedStop.longitude;
            }
            else {
                url = "http://maps.google.com/?q=" + vm.selectedStop.latitude + "," + vm.selectedStop.longitude;
            }

            if (url.length > 0) {
                // For Ionic
                if ($('body').hasClass('platform-cordova')) {
                    window.open(url, '_system', '');
                } else {
                    window.open(url);
                }
            }
        }

        function iconClickHandler(model) {
            vm.show = true;
            vm.coords = model.coords;
        }

        vm.openCalendar = function () {
            vm.calendar.opened = true;
        };

        var addDays = function (date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        };

        var setDate = function () {
            vm.calendar.dateOptions = {
                'minDate': divisionDate,
                'maxDate': addDays(divisionDate, vm.advReservationWindow)
            };

        };


        function selectGuestDay() {            
            vm.selectedReservationDate = moment(vm.specialEvent.date, 'YYYY-MM-DD HH:mm').toDate();
            vm.dateChanged();
        }

        var activate = function () {
            LuumLinkedService.verify(authService.authentication.passengerId);
            ScheduleService
                .getServiceDateByDivision(DivisionService.getDivisionId())
                .then(function (response) {
                    if (response.data.status == 1) {
                        divisionDate = moment(response.data.result, 'YYYY-MM-DD HH:mm').toDate();
                        vm.selectedReservationDate = divisionDate;

                        vm.selectedSchedule = new Date(response.data.result).getHours() < 12 ? CommonService.ScheduleType.Morning : CommonService.ScheduleType.Evening;

                        getMaxDaysForAdvReservation();
                    }
                    else {
                        //fallback 
                        divisionDate = new Date();
                    }
                }, function (err) {
                    divisionDate = new Date();
                });

            DivisionService
                .isWaitlistAllowedByDivision()
            .then(function (response) {
                vm.divisionAllowsWaitlist = response;
            });
            

            DivisionService
                .getCurrentDivisionTime()
                .then(function (response) {
                    if (response.data.status == 1) {
                        divisionDate = moment(response.data.result, 'YYYY-MM-DD HH:mm').toDate();
                        vm.selectedReservationDate = divisionDate;

                        vm.selectedSchedule = new Date(response.data.result).getHours() < 12
                            ? CommonService.ScheduleType.Morning
                            : CommonService.ScheduleType.Evening;

                        getMaxDaysForAdvReservation();

                        getSpecialEvent();

                    }
                    else {
                        //fallback 
                        divisionDate = new moment();
                    }
                }, function (err) {
                    divisionDate = new moment();
                });



        }

        function getSpecialEvent() {
            vm.specialEvent = undefined;
            StopDataService
                .getSpecialEvent(vm.selectedStop.id, vm.selectedSchedule)
                .then(function (response) {
                    if (response && response.data.status == 1 && response.data.result.date) {
                        vm.specialEvent = response.data.result;
                    }
                });
        }



        function getMaxDaysForAdvReservation() {
            StopDataService
                .getMaxDaysAllowedForReservation(vm.selectedStop.id, vm.selectedSchedule)
            .then(function (response) {
                if (response.data.status == 1 && response.data.result) {
                    vm.advReservationWindow = response.data.result;
                    setDate();
                }
            }, function (error) {

                setDate();
            });
        }

        vm.dateChanged = function () {
            //when user clicks on clear button on the calendar, the model is set to null, this will reset the model back to current date
            if (vm.selectedReservationDate == null) {
                vm.selectedReservationDate = divisionDate;
            }
            vm.selectedReservationDate = moment(moment(vm.selectedReservationDate).format('MM/DD/YYYY')).toDate();
			//vm.selectedReservationDate = moment(moment.tz(vm.selectedReservationDate, DivisionService.getTimeZone()).format('MM/DD/YYYY')).toDate();
			
            vm.selectedSchedule = CommonService.ScheduleType.Morning;
            getSpecialEvent();
            getNonPerformedTrips();
        }


        function getPickUp() {
            return vm.selectedSchedule == CommonService.ScheduleType.Morning ? vm.selectedStop : vm.selectedHub;

        }

        function getDropOff() {
            return vm.selectedSchedule == CommonService.ScheduleType.Morning ? vm.selectedHub : vm.selectedStop;
        }


        var getNonPerformedTrips = function () {
            vm.isLoading = true;
            vm.nonPerformedTrips = [];
            vm.passengerReservation = undefined;
            vm.hasReservation = false;
            vm.companionAllowed = false;


            if (vm.selectedHub && vm.selectedSchedule && vm.selectedReservationDate) {
                StopDataService
                .getNonPerformedTrips(getPickUp().id, getDropOff().id, vm.selectedSchedule, reservationTimespan())
                .then(function (response) {
                    if (response.data.status == 1 && response.data.result.NonPerformedTrips) {
                        vm.nonPerformedTrips = response.data.result.NonPerformedTrips;

                        companionsAllowed();

                        getPassengerReservationFor();

                        getCommuterVehicleInfoForTrips();
                        //every time new non performed events are retrieved stop polling for old and start polling
                        stopPolling();
                        pollVehiclesForRoute();
                    }

                    vm.isLoading = false;

                    vm.availableParking = 0;
                    if (vm.nonPerformedTrips.length > 0)
                        getAvailableParkingsForStop();

                }, function (error) {

                });
            }
        }

        function companionsAllowed() {
            for (var i = 0; i < vm.nonPerformedTrips.length; i++) {
                if (vm.nonPerformedTrips[i].allowedCompanions > 0) {
                    vm.companionAllowed = true;
                    break;
                }
            }
        }


        var getPassengerReservationFor = function () {
            if (!vm.isPassengerLoggedIn)
                return;

            ReservationService
            .getUserReservationFor(authService.authentication.passengerId, vm.selectedSchedule, reservationTimespan())
            .then(function (response) {
                if (response.data.status == 1 && response.data.result
                    && response.data.result.reservations) {
                    vm.passengerReservation = response.data.result.reservations[0];
                    vm.hasReservation = true;
                }
            }, function (error) {

            });
        }


        var getAvailableParkingsForStop = function () {
            StopDataService
                .getAvailableParkingsForStop(vm.selectedStop.id, reservationTimespan())
                    .then(
                        function (response) {
                            if (response.data.status == 1) {
                                vm.availableParking = response.data.result;
                            }
                        },
                        function (error) {

                        });
        }

        var getHubs = function () {

            StopDataService
            .getHubs(vm.selectedStop.id, vm.selectedSchedule, reservationTimespan())
            .then(function (response) {
                if (response.data.status == 1) {
                    vm.hubs = response.data.result.hubs;
                    if (vm.hubs.length > 0)
                        vm.selectedHub = vm.hubs[0];
                }
            }, function (error) {

            });
        }


        $scope.$watch('vm.selectedSchedule', function (value) {
            if (value) {
                getHubs();
                getSpecialEvent();
            }
        });


        $scope.$watch('vm.selectedHub', function (value) {
            if (value) {
                getNonPerformedTrips();
                setMarkers();
            }
        });


        function setMarkers() {
            vm.show = false;
            vm.markers = [];

            vm.markers.push({
                latitude: vm.selectedStop.latitude,
                longitude: vm.selectedStop.longitude,
                icon: MapIconService.getCommuterStopIcon(),
                name: vm.selectedStop.name,
                address: vm.selectedStop.address
            });
            vm.markers.push({
                latitude: vm.selectedHub.latitude,
                longitude: vm.selectedHub.longitude,
                icon: MapIconService.getCommuterHubIcon(),
                name: vm.selectedHub.name,
                address: vm.selectedHub.address
            });

            MapService.setMapBounds(vm.markers, markerEvents);
        }

        var reservationTimespan = function () {
            return Date.parse(vm.selectedReservationDate);
        }

        vm.reserve = function (trip) {

            if (!vm.isPassengerLoggedIn) {
                $state.go('login');
                return;
            }

            if (!canReserve(trip)) return;

            var modalReserve = $uibModal.open(getReservationModal(trip));

            modalReserve.result.then(function (result) {
                if (result && result.action === 'close' && result.isReserved) {
                    getNonPerformedTrips();
                }
                else if (result && result.action === 'reservation') {
                    $location.path('/passenger-trips');
                }
                else if (result && result.action === 'vehicle') {
                    showAddVehicleModal(trip);
                }

                $rootScope.$broadcast('reservationChanged');
            });
        }

        function canReserve(trip) {
            if(vm.hasReservation) return false;            

            if (vm.divisionAllowsWaitlist) {
                return trip.totalPassengers >0;
            }            
            else {
                return trip.availableCapacity > 0;
            }
        }


        vm.cancelReservation = function () {
            var reservationInfo =
                {
                    reservationId: vm.passengerReservation.id,
                    routeName: vm.passengerReservation.routeName,
                    passengerId: authService.authentication.passengerId,
                    startTime: vm.passengerReservation.pickupTime,
                    reservationDate: vm.passengerReservation.reservationDate
                };

            var modalCancelReservation = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/modals/cancel-reservation-modal/cancel-reservation.html',
                controller: 'CancelReservationController as vm',
                size: '-fs',
                resolve: {
                    reservationInfo: function () {
                        return reservationInfo;
                    }
                }
            });

            modalCancelReservation.result.then(function (result) {
                if (result.isCancel) {
                    getNonPerformedTrips();
                    $rootScope.$broadcast('reservationChanged');
                }
            });
        };

        function getCommuterVehicleInfoForTrips() {
            var commuterVehiclesIds = [];
            var routeId = 0;

            if (vm.nonPerformedTrips.length > 0) {
                routeId = vm.nonPerformedTrips[0].routeId;
                angular.forEach(vm.nonPerformedTrips, function (trip) {
                    if (trip.vehicleId && trip.vehicleId != 0)
                        commuterVehiclesIds.push(trip.vehicleId);
                });

                if (commuterVehiclesIds.length > 0 && routeId != 0)
                    VehicleDataService.GetCommuterVehicles(commuterVehiclesIds, routeId).then(function (response) {
                        if (response && response.data.status == 1) {
                            var vehicles = response.data.result;
                            displayVehicles(vehicles);
                        }
                    }, function (err) {
                        //err here
                    });
            }
        };

        function displayVehicles(vehicles) {
            if (mapVehicles.length > 0)
                angular.forEach(mapVehicles, function (vehicleIcon) {
                    vehicleIcon.setMap(null);
                });
            mapVehicles = [];
            for (var i = 0; i < vehicles.length; i++) {
                var vehicleInfo = vehicles[i];

                var vehicle = new google.maps.Marker({
                    //id: vehicleInfo.id,
                    position: new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude),
                    map: vm.map.control.getGMap(),
                    optimized: false,
                    flat: true,
                    icon: {
                        path: 'M15.2413122,21.1527861 L11,26 L6.75861856,21.1527069 C2.78910959,19.4927506 0,15.5728475 0,11 C0,4.92486775 4.923532,0 11,0 C17.0751322,0 22,4.923532 22,11 C22,15.5720845 19.2113515,19.4926684 15.2413122,21.1527861 Z',//google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 1.1,
                        fillOpacity: 1,
                        fillColor: '#fff',
                        strokeWeight: 1,
                        strokeOpacity: .3,
                        rotation: vehicleInfo.heading,
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(vehicleInfo.anchorX, vehicleInfo.anchorY)//getAnchor(vehicleInfo.heading)
                    },
                    zIndex: 2
                });

                var vehicleColor = new google.maps.Marker({
                    //id: vehicleInfo.id,
                    position: new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude),
                    map: vm.map.control.getGMap(),
                    icon: {
                        path: 'M0,10 C0,4.4771525 4.47593818,0 10,0 C15.5228475,0 20,4.47593818 20,10 C20,15.5228475 15.5240618,20 10,20 C4.4771525,20 0,15.5240618 0,10 Z M5,5 L5,13.8 L5.81904762,13.8 L5.81904762,15 L7,15 L7,13.8 L13,13.8 L13,15 L14.1809524,15 L14.1809524,13.8 L15,13.8 L15,5 L5,5 Z M14.6336996,9.71610209 C14.6336996,9.99255627 14.405522,10.2166667 14.1374134,10.2166667 L5.89921665,10.2166667 C5.62512532,10.2166667 5.4029304,10.0022513 5.4029304,9.71610209 L5.4029304,7.11723124 C5.4029304,6.84077706 5.63110799,6.61666667 5.89921665,6.61666667 L14.1374134,6.61666667 C14.4115047,6.61666667 14.6336996,6.83108203 14.6336996,7.11723124 L14.6336996,9.71610209 Z M5.38461538,5.8 C5.38461538,5.5790861 5.56076967,5.4 5.78125,5.4 L14.21875,5.4 C14.4378052,5.4 14.6153846,5.58554688 14.6153846,5.8 C14.6153846,6.0209139 14.4392303,6.2 14.21875,6.2 L5.78125,6.2 C5.56219475,6.2 5.38461538,6.01445313 5.38461538,5.8 Z M5.38461538,11.6 C5.38461538,11.2686292 5.65201099,11 5.99308894,11 L6.69921875,11 C7.03526942,11 7.30769231,11.2783203 7.30769231,11.6 C7.30769231,11.9313708 7.0402967,12.2 6.69921875,12.2 L5.99308894,12.2 C5.65703828,12.2 5.38461538,11.9216797 5.38461538,11.6 Z M12.6923077,11.6 C12.6923077,11.2686292 12.9597033,11 13.3007812,11 L14.0069111,11 C14.3429617,11 14.6153846,11.2783203 14.6153846,11.6 C14.6153846,11.9313708 14.347989,12.2 14.0069111,12.2 L13.3007812,12.2 C12.9647306,12.2 12.6923077,11.9216797 12.6923077,11.6 Z',
                        fillOpacity: 1,
                        strokeOpacity: 0,
                        fillColor: '#555',
                        scale: 1,
                    },

                    zIndex: 3
                });

                mapVehicles.push(vehicle);
                mapVehicles.push(vehicleColor);
            }
        };
        function pollVehiclesForRoute() {
            vehiclePoll = $interval(function () {
                getCommuterVehicleInfoForTrips();

            }, 30000);
        }
        function stopPolling() {
            if (angular.isDefined(vehiclePoll)) {
                $interval.cancel(vehiclePoll);
                vehiclePoll = undefined;
            }

        }

        function getReservationModal(trip) {
            return {
                animation: true,
                templateUrl: 'app/modules/commuter/modals/reservation-modal/reservation.html',
                controller: 'ReservationController as vm',
                size: '-fs',
                backdrop: 'static',
                resolve: {
                    reservationInfo: {
                        'divisionId': DivisionService.getDivisionId(),
                        'passengerId': authService.authentication.passengerId,
                        'pickupStop': getPickUp(),
                        'dropoffStop': getDropOff(),
                        'trip': trip,
                        'scheduleType': vm.selectedSchedule,
                        'reservationDate': vm.selectedReservationDate
                    },
                    isAdd: true
                }
            };
        }

        function showAddVehicleModal(trip) {
            var modalReserve = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/commuter/modals/add-vehicle-modal/add-vehicle.html',
                controller: 'AddVehicleController as vm',
                backdrop: 'static',
                resolve: {
                    atleastOneVehicleExist: false
                }
            });
            modalReserve.result.then(function (result) {
                vm.reserve(trip);
            });
        }

        vm.goToSchedule = function () {
            StopDataService.setRoute(stop);
            $location.path('/commuter/published-schedule');
        };


        vm.viewReservation = function () {
            var commuterTripModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/shared/trips/commuter-trip-modal.html',
                controller: 'CommuterTripModalController as vm',
                size: '-fs',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    tripId: vm.passengerReservation.id
                }
            });

            commuterTripModal.result.then(function (response) {
                if (response.cancelled || response.isModified) {
                    getNonPerformedTrips();
                    $rootScope.$broadcast('reservationChanged');
                }
            });
        }

        activate();

        $scope.$on('$destroy', function (event) {
            stopPolling();
        });

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/commuter/stop/selected-stop.html';
        vm.ionicCustomClassName = '';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }


})();

(function() {
    "use strict";

    angular
        .module("oneMVApp")
        .directive("nonPerformedTripComponent", nonPerformedTripComponent);

    function nonPerformedTripComponent() {
        return {
            restrict: "E",
            scope: {
                trip: "=",
                divisionAllowsWaitlist : '='
            },
            templateUrl: "app/modules/commuter/stop/selectedStop-npt.component.html"
        };

    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('StopDataService', StopDataService);

    StopDataService.$inject = ['$q', '$http', 'env', '$cacheFactory', 'localStorageService','DivisionService'];

    function StopDataService($q, $http, env, $cacheFactory, localStorageService, DivisionService) {

        var selectedStop = undefined;
        var cache = $cacheFactory('LocationCache');

        var setSelectedStop = function (stop) {
            //cache.put("stop", stop);
            localStorageService.set('stop', stop);
            selectedStop = stop;
        }
        var clearItemFromStorage = function (key) {
            localStorageService.remove(key);
        }
        var getSelectedStop = function () {
            //return cache.get("stop");
            return localStorageService.get('stop');
        }
        var getIncident = function () {
            return localStorageService.get('incident');
        }
        var setIncident = function (incident) {
            localStorageService.set('incident', incident);
        }
        var getRoute = function () {
            return localStorageService.get('route');
        }
        var setRoute = function (route) {
            localStorageService.set('route', route);
        }
        var getVehicleId = function () {
            return localStorageService.get('vehicle');
        }
        var setVehicleId = function (vehicleId) {
            localStorageService.set('vehicle', vehicleId);
        }
        var currGeoLocation = undefined;

        var setGeoLocation = function (currLocation) {
            localStorageService.set("currLocation", currLocation);
            currGeoLocation = currLocation
        }
        
        var getGeoLocation = function () {
            return localStorageService.get("currLocation");
        }

        function getStopDetails(stopId) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'stop/' + DivisionService.getDivisionId() + '/' + stopId;
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        };

        function getIncidentsForStop(stopId, day) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'stop/' + DivisionService.getDivisionId() + '/incidents/' + stopId + '/' + day + '?rnd=' + new Date().getMilliseconds();
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        }

        function getUserIncidentsForStop(stopId, day, userId) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'stop/' + DivisionService.getDivisionId() + '/incidents/' + stopId + '/' + day + '/' + userId + '?rnd=' + new Date().getMilliseconds();
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        }

        function getUserIncidentsById(incidentId, userId) {
            var deferred = $q.defer();
            var serviceUrl = env.commuterApiUrl + 'stop/' + DivisionService.getDivisionId() + '/incident/' + incidentId + '/' + userId + '?rnd=' + new Date().getMilliseconds();
            $http({
                method: 'GET',
                url: serviceUrl,
                contentType: 'application/json'
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        }
         function getVehicle(vehId)
        {
             var serviceUrl = env.commuterApiUrl + 'common/' + DivisionService.getDivisionId() + '/vehicle/' + vehId + '?rnd=' +new Date().getMilliseconds();
             var deferred = $q.defer();
             if (angular.isUndefined(vehId) || vehId == null)
                 deferred.reject('No Vehicle Found');
             else{
                $http({
                    method: 'GET',
                    'url': serviceUrl
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            return deferred.promise;
         }
        
         function getHubs(stopId, scheduleType, timespan) {
             var serviceUrl = env.oneMVApiUrl + 'commuter/' +  DivisionService.getDivisionId() + '/' + stopId + '/hubs/' + scheduleType + '/' + timespan + '?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }

         function getAvailableParkingsForStop(stopId, reservationDate) {
             var serviceUrl = env.oneMVApiUrl + 'commuter/stops/' + stopId + '/availableParking/' + reservationDate + '?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }

         function getNonPerformedTrips(pickupStopId, dropoffStopId, scheduleType, scheduleDate){
             var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/stops/nonperformedtrips/' + pickupStopId + '/' 
                 + dropoffStopId + '/' + scheduleDate + '/' + scheduleType + '?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }       


         function getMaxDaysAllowedForReservation(stopId,scheduleType) {
             var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/stops/' + stopId + '/advancedDays/' + scheduleType +  '?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }


         function getDropoffsForSelectedPickup(stopId) {
             var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/' + stopId + '/dropOffs?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }


         function getTripTimesForAdvancedReservation(pickupStopId, dropoffStopId, scheduleType) {
             var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/alltrips/'
                                + pickupStopId + '/' + dropoffStopId + '/' + scheduleType + '/?rnd=' + new Date().getMilliseconds();
             var deferred = $q.defer();
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });
             return deferred.promise;
         }

         function getAllBusStops() {
             var deferred = $q.defer();
             var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/stops/commuter/0';
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });

             return deferred.promise;
         }


         function getPickupForReturnTrip(amPickup, amHub) {
             var deferred = $q.defer();
             var serviceUrl = env.oneMVApiUrl + 'commuter/pickup/' + DivisionService.getDivisionId() + '/' + amPickup + '/' + amHub;
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });

             return deferred.promise;
         }



         function getSpecialEvent(stopId, schedule) {
             var deferred = $q.defer();
             var serviceUrl = env.oneMVApiUrl + 'commuter/specialEvent/' + DivisionService.getDivisionId() +  '/' + stopId + '/' + schedule;
             $http({
                 method: 'GET',
                 'url': serviceUrl
             }).then(function (response) {
                 deferred.resolve(response);
             }, function (err) {
                 deferred.reject(err)
             });

             return deferred.promise;
         }

        return {
            setStop: setSelectedStop,
            getStop: getSelectedStop,
            setGeoLocation: setGeoLocation,
            getGeoLocation: getGeoLocation,
            getStopDetails: getStopDetails,
            getIncidentsForStop: getIncidentsForStop,
            getUserIncidentsForStop: getUserIncidentsForStop,
            getUserIncidentsById: getUserIncidentsById,
            getVehicle: getVehicle,
            getIncident: getIncident,
            setIncident: setIncident,
            getRoute: getRoute,
            setRoute: setRoute,
            getVehicleId: getVehicleId,
            setVehicleId: setVehicleId,
            clearItem: clearItemFromStorage,
            getHubs: getHubs,
            getAvailableParkingsForStop: getAvailableParkingsForStop,
            getNonPerformedTrips: getNonPerformedTrips,
            getDropoffsForSelectedPickup: getDropoffsForSelectedPickup,
            getTripTimesForAdvancedReservation: getTripTimesForAdvancedReservation,
            getMaxDaysAllowedForReservation: getMaxDaysAllowedForReservation,
            getAllBusStops: getAllBusStops,
            getPickupForReturnTrip: getPickupForReturnTrip,
            getSpecialEvent: getSpecialEvent
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('VehicleDataService', VehicleDataService);

    VehicleDataService.$inject = ['$q', '$http', 'env', '$cacheFactory', 'localStorageService', 'DivisionService'];

    function VehicleDataService($q, $http, env, $cacheFactory, localStorageService, DivisionService) {
        return {
            GetCommuterVehicles : getCommuterVehicles
        };

        function getCommuterVehicles(vehiclesArray, routeId)
        {
            var serviceUrl = env.oneMVApiUrl + 'commuter/' + DivisionService.getDivisionId() + '/CommuterVehicles';
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': serviceUrl,
                params: {
                    'vehicleIds': vehiclesArray,
                    'routeId': routeId
                }
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });
            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('AllRoutesController', AllRoutesController);
    AllRoutesController.$inject = [ '$scope', '$filter','$location', '$interval',
        'ScheduleService', 'uiGmapIsReady', 'DivisionService', 'RouteService', 'StopService', 'googleMapsConfig', 'PageService','OneMvServices'];
    function AllRoutesController($scope, $filter, $location, $interval,
        ScheduleService, uiGmapIsReady, DivisionService, RouteService, StopService, googleMapsConfig, PageService,OneMvServices) {
        var vm = this;
        var divisionId;
        var bounds;
        var infoWindow = new google.maps.InfoWindow({content: ''});
        vm.displaySelectedRoutes = displaySelectedRoutes;
        vm.displayRoute = displayRoute;
        vm.filterChange = filterChange;
        vm.gotoStops = goToStops;
       
        vm.displayButton = displayButton;
        vm.goToRoute = goToRoute;
        vm.hightlightRoute = hightlightRoute;
        vm.zoom = 15;
        vm.routes = [];
        vm.filteredRoutes = [];
        vm.loading = true;
        var vehiclePoll = undefined;
        var vehicleIconL1 = 'images/marker-bus-l1.svg';
        vm.PageService = PageService;
        vm.PageService.setTitle('Routes');
        PageService.setHeadline(OneMvServices.getFixedRouteInfo().alias);

        vm.vehicles = [];
        vm.allStops = [];
        vm.toStops = [];
        vm.routesOnMap = [];
        vm.center = {
            latitude: 39.809860, 
            longitude: -98.555183
        };
        vm.myStyles = googleMapsConfig.mapStyles;
           
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.mapControl = {};
        
        function filterChange(item) {
            if (vm.search_text === undefined || vm.search_text === null || vm.search_text.trim() === '')
                return true;
            return item.name.toLowerCase().indexOf(vm.search_text.toLowerCase()) !== -1 || item.shortName.toLowerCase().indexOf(vm.search_text.toLowerCase()) !== -1;

        }

       
        function displayButton()
        {
            for (var i = 0; i < vm.routes.length; i++)
                if (vm.routes[i].displayOnMap)
                    return true;

            return false;

        }


        function getVehiclesByRoute(routeId) {
            if (vm.routesOnMap[routeId].vehicles !== undefined)
            {
                for (var i = 0; i < vm.routesOnMap[routeId].vehicles.length; i++)
                    vm.routesOnMap[routeId].vehicles[i].setMap(null);
            }
            vm.routesOnMap[routeId].vehicles = [];
           RouteService
                .getVehiclesForRoute(routeId)
                    .then(function (response) {
                        if (response && response.data && response.data.length > 0)
                            mapActiveVehicles(response, routeId);
                    }, vehiclesFailureHandler);
        }


        vm.highlightParent = function (e) {
            angular.element(e.target).parent().addClass('active');
        }
        vm.blurParent = function (e) {
            angular.element(e.target).parent().removeClass('active');
        }
        function hightlightRoute(routeId, show)
        {
            if (vm.routesOnMap[routeId] != undefined && vm.routesOnMap[routeId] != null) {
                if (vm.routesOnMap[routeId].displayOnMap) {
                    for (var index in vm.routesOnMap[routeId].lines) {
                        if (show)
                            vm.routesOnMap[routeId].lines[index].setOptions({ strokeOpacity: 0.8 });
                        else
                            vm.routesOnMap[routeId].lines[index].setOptions({ strokeOpacity: 0.5 });
                    }
                }
            }
        }
        function mapActiveVehicles(response, routeId) {
           

            for (var i = 0; i < response.data.length; i++) {
                var vehicleInfo = response.data[i];

                var vehicle = new google.maps.Marker ({
                    //id: vehicleInfo.id,
                    position: new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude),
                    map: vm.mapControl.getGMap(),
                    optimized: false,
                    flat: true,
                    icon: {
                        path: 'M15.2413122,21.1527861 L11,26 L6.75861856,21.1527069 C2.78910959,19.4927506 0,15.5728475 0,11 C0,4.92486775 4.923532,0 11,0 C17.0751322,0 22,4.923532 22,11 C22,15.5720845 19.2113515,19.4926684 15.2413122,21.1527861 Z',//google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 1.1,
                        fillOpacity: 1,
                        fillColor: '#fff',
                        strokeWeight: 1,
                        strokeOpacity: .3,
                        rotation: vehicleInfo.heading,
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(vehicleInfo.anchorX, vehicleInfo.anchorY)//getAnchor(vehicleInfo.heading)
                    },
                   zIndex: 2
                });
                var vehicleColor = new google.maps.Marker({
                    //id: vehicleInfo.id,
                    position: new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude),
                    map: vm.mapControl.getGMap(),
                    icon: {
                        path: 'M0,10 C0,4.4771525 4.47593818,0 10,0 C15.5228475,0 20,4.47593818 20,10 C20,15.5228475 15.5240618,20 10,20 C4.4771525,20 0,15.5240618 0,10 Z M5,5 L5,13.8 L5.81904762,13.8 L5.81904762,15 L7,15 L7,13.8 L13,13.8 L13,15 L14.1809524,15 L14.1809524,13.8 L15,13.8 L15,5 L5,5 Z M14.6336996,9.71610209 C14.6336996,9.99255627 14.405522,10.2166667 14.1374134,10.2166667 L5.89921665,10.2166667 C5.62512532,10.2166667 5.4029304,10.0022513 5.4029304,9.71610209 L5.4029304,7.11723124 C5.4029304,6.84077706 5.63110799,6.61666667 5.89921665,6.61666667 L14.1374134,6.61666667 C14.4115047,6.61666667 14.6336996,6.83108203 14.6336996,7.11723124 L14.6336996,9.71610209 Z M5.38461538,5.8 C5.38461538,5.5790861 5.56076967,5.4 5.78125,5.4 L14.21875,5.4 C14.4378052,5.4 14.6153846,5.58554688 14.6153846,5.8 C14.6153846,6.0209139 14.4392303,6.2 14.21875,6.2 L5.78125,6.2 C5.56219475,6.2 5.38461538,6.01445313 5.38461538,5.8 Z M5.38461538,11.6 C5.38461538,11.2686292 5.65201099,11 5.99308894,11 L6.69921875,11 C7.03526942,11 7.30769231,11.2783203 7.30769231,11.6 C7.30769231,11.9313708 7.0402967,12.2 6.69921875,12.2 L5.99308894,12.2 C5.65703828,12.2 5.38461538,11.9216797 5.38461538,11.6 Z M12.6923077,11.6 C12.6923077,11.2686292 12.9597033,11 13.3007812,11 L14.0069111,11 C14.3429617,11 14.6153846,11.2783203 14.6153846,11.6 C14.6153846,11.9313708 14.347989,12.2 14.0069111,12.2 L13.3007812,12.2 C12.9647306,12.2 12.6923077,11.9216797 12.6923077,11.6 Z',
                        fillOpacity: 1,
                        strokeOpacity: 0,
                        fillColor: vm.routesOnMap[routeId].route.color,
                        scale: 1,
                    },
                   
                    zIndex: 3
                });
                vm.routesOnMap[routeId].vehicles.push(vehicleColor);
                vm.routesOnMap[routeId].vehicles.push(vehicle);
                
            }
        }

        function vehiclesFailureHandler() {

        }
       
      
        function getStopsByRoute(route)
        {
            StopService.getStopsByRoute(divisionId, route.id).then(function (result) {
                var stops = [];
                var routeStops = result.data;
                for (var i = 0; i < routeStops.length; i++)
                {
                    //icon path allows us to rotate icon.
                    var stop = new google.maps.Marker({
                        position: new google.maps.LatLng(routeStops[i].Latitude, routeStops[i].Longitude),
                        icon: {
                            path: 'M0,2.99420208 C0,1.34054993 1.34331197,0 2.99420208,0 L17.0057979,0 C18.6594501,0 20,1.34331197 20,2.99420208 L20,17.0057979 C20,18.6594501 18.656688,20 17.0057979,20 L2.99420208,20 C1.34054993,20 0,18.656688 0,17.0057979 L0,2.99420208 Z M6,20 L13.7690812,20 L9.75999999,22.76 L6,20 Z',
                            fillColor: vm.selectedRoute.color,
                            fillOpacity: 1,
                            strokeWeight: 0,
                            anchor: new google.maps.Point(9, 21),
                            size: new google.maps.Size(20, 23)
                        },
                        zIndex:5
                    });
                    var stopIcon = new google.maps.Marker({
                        position: new google.maps.LatLng(routeStops[i].Latitude, routeStops[i].Longitude),
                        icon: {
                            path: 'M0,0 L0,13.0899217 C0,13.6367269 0.443667457,14.08 1.00653274,14.08 L1.31047619,14.08 L1.31047619,16 L3.2,16 L3.2,14.08 L12.8,14.08 L12.8,16 L14.6895238,16 L14.6895238,14.08 L14.9934673,14.08 C15.5493599,14.08 16,13.6274801 16,13.0899217 L16,0.990078259 C16,0.443273135 15.5553691,0 14.9991283,0 L0,0 Z M15.4139194,7.85557231 C15.4139194,8.12679623 15.1819301,8.34666667 14.9225207,8.34666667 L1.13608738,8.34666667 C0.864695354,8.34666667 0.644688645,8.12790141 0.644688645,7.85557231 L0.644688645,3.07776103 C0.644688645,2.8065371 0.876677992,2.58666667 1.13608738,2.58666667 L14.9225207,2.58666667 C15.1939127,2.58666667 15.4139194,2.80543193 15.4139194,3.07776103 L15.4139194,7.85557231 Z M0.615384615,1.1312207 C0.615384615,0.859927 0.847373962,0.64 1.10678335,0.64 L14.8932166,0.64 C15.1646087,0.64 15.3846154,0.862958984 15.3846154,1.1312207 L15.3846154,1.4287793 C15.3846154,1.700073 15.152626,1.92 14.8932166,1.92 L1.10678335,1.92 C0.835391324,1.92 0.615384615,1.69704102 0.615384615,1.4287793 L0.615384615,1.1312207 Z M0.615384615,10.56 C0.615384615,10.0298066 1.04321759,9.6 1.57207584,9.6 L2.73561646,9.6 C3.26398244,9.6 3.69230769,10.0261102 3.69230769,10.56 C3.69230769,11.0901934 3.26447472,11.52 2.73561646,11.52 L1.57207584,11.52 C1.04370987,11.52 0.615384615,11.0938898 0.615384615,10.56 Z M12.3076923,10.56 C12.3076923,10.0298066 12.7355253,9.6 13.2643835,9.6 L14.4279242,9.6 C14.9562901,9.6 15.3846154,10.0261102 15.3846154,10.56 C15.3846154,11.0901934 14.9567824,11.52 14.4279242,11.52 L13.2643835,11.52 C12.7360176,11.52 12.3076923,11.0938898 12.3076923,10.56 Z M11.423955,11.1999507 C11.6340659,11.3767363 11.5848839,11.5200493 11.3051605,11.5200493 L4.69483948,11.5200493 C4.41912022,11.5200493 4.36801543,11.3749851 4.57604503,11.1999507 L4.19560559,11.5200493 C4.40571649,11.3432637 4.80388725,11.1999507 5.06852983,11.1999507 L10.9314702,11.1999507 C11.203462,11.1999507 11.5963648,11.3450149 11.8043944,11.5200493 L11.423955,11.1999507 Z M11.423955,11.8399507 C11.6340659,12.0167363 11.5848839,12.1600493 11.3051605,12.1600493 L4.69483948,12.1600493 C4.41912022,12.1600493 4.36801543,12.0149851 4.57604503,11.8399507 L4.19560559,12.1600493 C4.40571649,11.9832637 4.80388725,11.8399507 5.06852983,11.8399507 L10.9314702,11.8399507 C11.203462,11.8399507 11.5963648,11.9850149 11.8043944,12.1600493 L11.423955,11.8399507 Z',
                            fillColor: '#fff',
                            fillOpacity: 1,
                            strokeWeight: 0,
                            anchor: new google.maps.Point(7, 19),
                            size: new google.maps.Size(16, 16)
                        },
                        zIndex:6
                    });
                    var stopShadow = new google.maps.Marker({
                        position: new google.maps.LatLng(routeStops[i].Latitude, routeStops[i].Longitude),
                        icon: {
                            path: 'M-5.83252597,14.3155545 C-6.35350295,13.5889938 -5.4359106,13 -3.78917972,13 L10.1871155,13 C11.8366015,13 13.5969795,13.5902074 14.1170863,14.3155545 L18.5313877,20.4717917 C19.0523647,21.1983524 18.1347724,21.7873462 16.4880415,21.7873462 L2.51174624,21.7873462 C0.862260281,21.7873462 -0.898117751,21.1971389 -1.41822457,20.4717917 L-5.83252597,14.3155545 Z M5.5099714,21.7873462 L13.2594793,21.7873462 L10.1300263,23 L5.5099714,21.7873462 Z',
                            fillColor: '#000',
                            fillOpacity: .10,
                            strokeWeight: 0,
                            anchor: new google.maps.Point(9, 21),
                            size: new google.maps.Size(21, 10)
                            
                        },
                        zIndex: 4
                    });
                    stop.setMap(vm.mapControl.getGMap());
                    stopIcon.setMap(vm.mapControl.getGMap());
                   stopShadow.setMap(vm.mapControl.getGMap());
                    //add event listner to call service and render info window.
                   google.maps.event.addListener(stopIcon, 'click', getArrivalsForStop(routeStops[i], stop));

                    stops.push(stop);
                    stops.push(stopIcon);
                    stops.push(stopShadow);

                }
                vm.routesOnMap[route.id].stops = stops;
                google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
            });
        }

        function getArrivalsForStop(stop, marker)
        {
            return function () {
                StopService.getArrivalsByStopId(divisionId, stop.Id).then(function (result) {
                    var arrivals = result.data;
                    var content = '<span style="font-weight: bold;">' + stop.Name + '</span><br />';
                    for (var i = 0; i < arrivals.length; i++) {
                        
                        content += '<span style="color:' + arrivals[i].route.color + ';">' + arrivals[i].route.shortName + '</span><br />';
                        for (var j = 0; j < arrivals[i].trips.length; j++)
                            content += '&nbsp;&nbsp;' + (arrivals[i].trips[j].vehicle.name == null ? 'Bus' : arrivals[i].trips[j].vehicle.name) + ' in ' + arrivals[i].trips[j].etaInMins +
                                 ' minutes <br />';
                    }
                    if (content == '')
                        content = 'No current arrivals at this stop';
                    infoWindow.setContent(content);
                    infoWindow.open(vm.mapControl.getGMap(), marker);
                });
            }
        }
       

        //TODO: add remove lines for check unchcek.
        function displaySelectedRoutes()
        {
            bounds = new google.maps.LatLngBounds();
            for (var rt = 0; rt < vm.filteredRoutes.length; rt++)
            {
                var route = vm.filteredRoutes[rt];
                if(route.displayOnMap)
                {
                    mapRoute(route)
                }
                else {
                    hideRoute(route);
                }
            }
            
        }
        function displayRoute(route)
        {
            
            if (route.displayOnMap)
                mapRoute(route)
            else
                hideRoute(route);
            
        }
        function displayAllVehicles()
        {
            for(var routeId in vm.routesOnMap)
            {
                if (vm.routesOnMap[routeId].displayOnMap)
                {
                    getVehiclesByRoute(routeId);
                }
            }
        }
        function adjustMapBounds()
        {
            var numberOnMap = 0;
            bounds = new google.maps.LatLngBounds();
            for (var route in vm.routesOnMap)
            {
                if (vm.routesOnMap[route].displayOnMap)
                {
                    numberOnMap++;
                    for (var i = 0; i < vm.routesOnMap[route].lines.length; i++) {
                        bounds.union(getLineBounds(vm.routesOnMap[route].lines[i]));
                    }
                }
            }
            if(numberOnMap > 0) 
                vm.mapControl.getGMap().fitBounds(bounds);
        }

        function hideRoute(route)
        {
            if(vm.routesOnMap[route.id]!= undefined && vm.routesOnMap[route.id] != null)
            {
                if (vm.routesOnMap[route.id].displayOnMap) {
                    vm.routesOnMap[route.id].displayOnMap = false;
                    for (var i = 0; i < vm.routesOnMap[route.id].lines.length; i++) {
                        vm.routesOnMap[route.id].lines[i].setMap(null);
                    }
                    for (var i = 0; i < vm.routesOnMap[route.id].stops.length; i++) {
                        vm.routesOnMap[route.id].stops[i].setMap(null);
                    }
                    for (var i = 0; i < vm.routesOnMap[route.id].vehicles.length; i++)
                    {
                        vm.routesOnMap[route.id].vehicles[i].setMap(null);
                    }
                    vm.routesOnMap[route.id].vehicles = [];
                    adjustMapBounds();
                }
            }
        }
        function mapRoute(route)
        {
            if (vm.routesOnMap[route.id] != undefined && vm.routesOnMap[route.id] != null) {
                vm.routesOnMap[route.id].displayOnMap = true;
                for (var i = 0; i < vm.routesOnMap[route.id].lines.length; i++) {
                    vm.routesOnMap[route.id].lines[i].setMap(vm.mapControl.getGMap());
                }
                for (var i = 0; i < vm.routesOnMap[route.id].stops.length; i++) {
                    vm.routesOnMap[route.id].stops[i].setMap(vm.mapControl.getGMap());
                   
                }
                getVehiclesByRoute(route.id);
                adjustMapBounds();

            }
            else {
                vm.routesOnMap[route.id] = { route: route };
                var lines = [];
                vm.selectedRoute = route;
                RouteService.getShapesByRoute(route.id).then(function (result) {
                    var shapes = result.data;
                    for (var i = 0; i < shapes.length; i++) {
                        var decodedPath = google.maps.geometry.encoding.decodePath(shapes[i].line);

                        var line = new google.maps.Polyline({
                            path: decodedPath,
                            strokeColor: route.color,
                            strokeOpacity: 0.5,
                            strokeWeight:5, 
                            icons: [{
                                icon: {
                                    path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,
                                    strokeOpacity: 0,
                                    fillColor: route.color,
                                    fillOpacity: 1,
                                    scale: 2.5
                                },
                                offset: '25px',
                                repeat: '200px',
                              
                            }],
                            zIndex:1
                        });
                        var lineStroke = new google.maps.Polyline({
                            path: decodedPath,
                            strokeColor: '#fff',
                            strokeOpacity: 1.0,
                            strokeWeight: 8,
                            zindex:0
                        });
                        line.setMap(vm.mapControl.getGMap());
                        lineStroke.setMap(vm.mapControl.getGMap());
                        lines.push(line);
                        lines.push(lineStroke);
                        //break;
                    }
                    vm.routesOnMap[route.id].lines = lines;
                    vm.routesOnMap[route.id].displayOnMap = true;
                   
                    getStopsByRoute(route);
                    getVehiclesByRoute(route.id);
                    adjustMapBounds();

                });
            }

        }
        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                ScheduleService.getServiceAreaLocation(divisionId).then(function (response) {
                    if (response.data.status == 1) {
                        vm.center.latitude = response.data.result.Latitude;
                        vm.center.longitude = response.data.result.Longitude;
                        if (response.data.result.ZoomLevel !== undefined && response.data.result.ZoomLevel !== null
                            && response.data.result.ZoomLevel != '')
                                vm.zoom = response.data.result.ZoomLevel;

                    }
                    getAllRoutes();                    
                });
            });

        }
        function goToRoute(routeId) {
            $location.path('fixed-route/route/' + routeId);
        }
        function goToStops()
        {
            $location.path('fixed-route/stops');
        }

        function getLineBounds(line) {
            var bound = new google.maps.LatLngBounds();
            line.getPath().forEach(function (item, index) {
                bound.extend(new google.maps.LatLng(item.lat(), item.lng()));
            });
            return bound;
        };

        function getRouteStatus()
        {
            RouteService
               .getRoutes()
                   .then(function (result) {
                       var routes = result.data;
                       for (var index in routes) {
                           var r = $filter('filter')(vm.filteredRoutes, { id: routes[index].id });
                           angular.forEach(r, function(value, key){
                               value.IsActive = routes[index].IsActive;
                            });
                       }

                   }, function () {
                   });
        };
       
        function getAllRoutes() {
            RouteService
                .getRoutes()
                    .then(function (result) {
                        vm.routes = result.data;               
                        vm.filteredRoutes = vm.routes;
                        vm.loading = false;
                        pollVehiclesForRoute();
                    }, function () {
                        vm.loading = false;
                    });
        };
        function getAllStops() {
            vm.allStops = [];
            var stopss = [];
            StopService.getAllStops().then(function (result) {
                var allStops = result.data;
                for (var i = 0; i < allStops.length; i++)
                {
                    if (!stopss.includes(allStops[i].Id))
                    {
                        vm.allStops.push(allStops[i]);
                        stopss.push(allStops[i].Id);
                    }
               }
                vm.allStops.sort(function (a, b) {
                    return a.Name > b.Name ? 1 : a.Name == b.Name ? 0 : -1;
                });
                vm.filteredStops = vm.allStops;

            });
        };
        
        function activate() {
            divisionId = DivisionService.getDivisionId();
            getMap();
        }

        $scope.$on('$destroy', function (event) {
            stopPolling();
        });

        function pollVehiclesForRoute() {
            vehiclePoll = $interval(function () {
                getRouteStatus();
                displayAllVehicles();
            }, 30000);
        }
        function stopPolling() {
            if (angular.isDefined(vehiclePoll)) {
                $interval.cancel(vehiclePoll);
                vehiclePoll = undefined;
            }

        }


        activate();

        // Start of code for Ionic
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.ionicInclude = 'app/modules/fixed-route/routes/all-routes.html';
        vm.ionicCustomClassName = 'ionic-fixed-route-all-routes';
        vm.ionicUseFixedRouteNav = true;
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }
  

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('FrScheduleController', FrScheduleController);

    FrScheduleController.$inject = ['$window', 'FrScheduleService', 'ScheduleService', 'DivisionService',
     'GeoLocationService', 'googleMapsConfig', 'uiGmapIsReady', 'PageService','OneMvServices'];

    function FrScheduleController($window, FrScheduleService, ScheduleService, DivisionService,
         GeoLocationService, googleMapsConfig, uiGmapIsReady, PageService,OneMvServices) {
        /* jshint validthis:true */
        var vm = this;
        vm.schedule;
        var divisionId;
        vm.scheduleView;
        vm.showBackButton = false;
        vm.showTrip = showTrip;
        vm.showSchedules = showSchedules;
        vm.filterEmptyTimes = filterEmptyTimes;
        vm.PageService = PageService;
        vm.PageService.setTitle('Schedule');
        PageService.setHeadline(OneMvServices.getFixedRouteInfo().alias);
        //map stuff
        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {

            myLocationPin = 'images/pin-my-location.png';

        }
        else {

            myLocationPin = 'images/pin-my-location.svg';

        }
        vm.zoom = 15;
        vm.center = {
            latitude: 47.604356,
            longitude: -122.3360817
        };
        vm.myStyles = googleMapsConfig.mapStyles;
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        vm.mapControl = {};
        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {


                GeoLocationService.getCurrentPosition().then(function (position) {
                    vm.position = {
                        coords: {
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude
                        },
                        icon: vm.myLocationIcon
                    };
                    vm.center.latitude = position.coords.latitude;
                    vm.center.longitude = position.coords.longitude;

                    google.maps.event.trigger(vm.mapControl.getGMap(), "resize");


                }, function (err) {
                    //position error
                    ScheduleService.getServiceAreaLocation(divisionId).then(function (response) {
                        if (response.data.status == 1) {
                            vm.center.latitude = response.data.result.Latitude;
                            vm.center.longitude = response.data.result.Longitude;
                        }
                    });
                });
            });
        }
        //map stuff

        activate();

        function activate() {
            divisionId = DivisionService.getDivisionId();
            if (divisionId != null && divisionId != undefined && divisionId != '') {
                populateSchedule();
                getMap();
            };

        }

        function populateSchedule() {
            FrScheduleService.getSchedule(divisionId)
                           .then(function (response) {
                               vm.schedule = response.data;
                               vm.scheduleView = angular.copy(vm.schedule);
                           }, function (error) {

                           });
        }

        function showSchedules() {
            if (vm.schedule) {
                vm.scheduleView = vm.schedule;
            } else {
                populateSchedule();
            }
            vm.showBackButton = false;
        }

        function showTrip(tripId) {
            var tripSchedule;
            for (var r = 0; r < vm.schedule.routes.length; r++) {
                for (var s = 0; s < vm.schedule.routes[r].stops.length; s++) {
                    for (var t = 0; t < vm.schedule.routes[r].stops[s].trips.length; t++) {
                        if (vm.schedule.routes[r].stops[s].trips[t].id == tripId) {
                            if (!tripSchedule) {
                                tripSchedule = {};
                                tripSchedule.routes = []
                                tripSchedule.routes.push(angular.copy(vm.schedule.routes[r]));
                                tripSchedule.routes[0].stops = [];
                                tripSchedule.routes[0].stops.push(angular.copy(vm.schedule.routes[r].stops[s]));
                                tripSchedule.routes[0].stops[0].trips = [];
                                tripSchedule.routes[0].stops[0].trips.push(angular.copy(vm.schedule.routes[r].stops[s].trips[t]));
                            } else {
                                var isStopFound = false
                                for (var ss = 0; ss < tripSchedule.routes[0].stops.length; ss++) {
                                    if (vm.schedule.routes[r].stops[s].id == tripSchedule.routes[0].stops[ss].id) {
                                        isStopFound = true;
                                        tripSchedule.routes[0].stops[ss].trips.push(angular.copy(vm.schedule.routes[r].stops[s].trips[t]));
                                    }
                                }
                                if (!isStopFound) {
                                    tripSchedule.routes[0].stops.push(angular.copy(vm.schedule.routes[r].stops[s]));
                                    tripSchedule.routes[0].stops[tripSchedule.routes[0].stops.length - 1].trips = [];
                                    tripSchedule.routes[0].stops[tripSchedule.routes[0].stops.length - 1].trips.push(angular.copy(vm.schedule.routes[r].stops[s].trips[t]));
                                }
                            }

                        }
                    }
                }
            }
            //Bind the trip schedule to the view
            vm.scheduleView = tripSchedule;
            vm.showBackButton = true;
        }

        function filterEmptyTimes(trip) {
            return trip.time.length > 0;
        }

        //UI INTERACTIONS
        //Adds and removes the active class to the parent of an element.
        vm.highlightParent = function (e) {
            angular.element(e.target).parent().addClass('active');
        }
        vm.blurParent = function (e) {
            angular.element(e.target).parent().removeClass('active');
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/fixed-route/schedule/fr-schedule.html';
        vm.ionicCustomClassName = 'ionic-fixed-route-schedule';
        vm.ionicUseFixedRouteNav = true;
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .service('FixedRouteNotificationsService', FixedRouteNotificationsService);

    FixedRouteNotificationsService.$inject = ['$http', '$q', 'env'];

    function FixedRouteNotificationsService($http, $q, env) {
        var service = {
            get: _get
        };
        return service;

        function _get(divisionId) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVFixedRouteApiUrl + "notifications/" + divisionId
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .service('FrScheduleService', FrScheduleService);

    FrScheduleService.$inject = ['$http', '$q', 'env'];

    function FrScheduleService($http, $q, env) {
        var service = {

            getSchedule: _getSchedule

        };
        return service;

        function _get(urlSegment) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVFixedRouteApiUrl + urlSegment
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }

        function _getSchedule(divisionId) {
            return _get('schedule/' + divisionId);
        }
    }
})();
(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.factory('RouteService', RouteService);
    RouteService.$inject = ['$http', '$q', 'env', 'DivisionService'];
    function RouteService($http, $q, env, DivisionService)
    {
        function _getRoute(routeId) {
            var divisionId = DivisionService.getDivisionId();
            return _get(routeId + '/' + divisionId);
        }

        function _getRoutes() {
            var divisionId = DivisionService.getDivisionId();
            return _get('allRoutes/' + divisionId);
        }

        function _getShapesByRoute(routeId) {
            var divisionId = DivisionService.getDivisionId();
            return _get('shapesByRoute/' + routeId + '/' + divisionId);
        }

        function _getRoutesForStop(stopId) {
            return _get('routesByStop/' + stopId + '/' + divisionId);
        }

        function _getArrivalsForRoute(routeId, divisionId) {
            return _get(divisionId + '/arrivalsForRoute/' + routeId);
        }

        function _getVehiclesForRoute(routeId) {
            var divisionId = DivisionService.getDivisionId();
            return _get(divisionId + '/vehiclesByRoute/' + routeId);
        }


        function _get(urlSegment) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVFixedRouteApiUrl + 'route/' + urlSegment
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }


        var service = {
            getRouteInfo : _getRoute,
            getRoutes: _getRoutes,
            getShapesByRoute: _getShapesByRoute,
            getRoutesForStop: _getRoutesForStop,
            getArrivalsForRoute: _getArrivalsForRoute,
            getVehiclesForRoute : _getVehiclesForRoute
        };

        return service;        
    }
})();
(function () {
    'use strict';

    angular.module('oneMVApp')
           .factory('StopService', StopService);

    StopService.$inject = ['$http', '$q', 'env'];

    function StopService($http, $q, env) {
        var service = {

            getStopsByRoute: _getStopsByRoute,
            getArrivalsForStop: _getArrivalsForStop,
            getAllStops: _getAllStops,
            getStopsForStop: _getStopsForStop,
            getArrivalsByStopId: _getArrivalsByStopId,
            getUpcomingArrivalsForStop: _getUpcomingArrivalsForStop
        };
        return service;

        function _getAllStops(divisionId) {
            return _get('stops/' + divisionId);
        }

        function _getStopsByRoute(divisionId, routeId) {
            return _get('stops/' + divisionId + '/stopsByRoute/' + routeId);
        }

        function _getArrivalsForStop(divisionId, fromStopId, toStopId) {
            return _get('stops/' + divisionId + '/arrivalsByStop/' + fromStopId + '/' + toStopId);
        }

        function _getUpcomingArrivalsForStop(divisionId, fromStopId, toStopId, noOfArrivals) {
            return _get('stops/' + divisionId + '/arrivalsByStop/' + fromStopId + '/' + toStopId + '/' + noOfArrivals + '?rnd=' + new Date().getTime());
        }

        function _getStopsForStop(stopId) {
            return _get('stopsByStop/' + stopId);
        }
        function _getArrivalsByStopId(divisionId, stopId) {
            return _get('stops/' + divisionId + '/arrivals/' + stopId);
        }

       

        function _get(urlSegment) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVFixedRouteApiUrl + urlSegment
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }       
    }
})();
(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.factory('VehicleService', VehicleService);
    VehicleService.$inject = ['$http', '$q', 'ConfigFactory', 'env', 'DivisionService'];

    function VehicleService($http, $q, ConfigFactory, env, DivisionService)
    {

        var service = {
            
          
            getVehiclesForRoute: _getVehiclesForRoute
        
        };
        return service;
        
        
        
        
        function _getVehiclesForRoute(routeId) {
            var divisionId = DivisionService.getDivisionId();
            var url = _getUrl();
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': url + 'fixedroute/' + divisionId + '/vehiclesByRoute/' + routeId
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }
        function _getUrl()
        {
            return env.oneMVFixedRouteApiUrl;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('FrStopsController', FrStopsController);

    FrStopsController.$inject = ['$location', '$window', 'StopService', 'DivisionService', 'GeoLocationService',
        'ScheduleService', 'googleMapsConfig', 'uiGmapIsReady', 'RouteService', 'PageService','OneMvServices'];

    function FrStopsController($location, $window, StopService, DivisionService, GeoLocationService,
         ScheduleService, googleMapsConfig, uiGmapIsReady, RouteService, PageService,OneMvServices) {
        var vm = this;
        vm.selectedFromStop;
        vm.selectedToStop;
        vm.allStops;
        vm.fromStops;
        vm.toStops;
        vm.populateFromStops = populateFromStops;
        vm.selectFromStop = selectFromStop;
        vm.populateToStops = populateToStops;
        vm.selectToStop = selectToStop;
        vm.gotoRoutes = gotoRoutes;
        vm.gotoStops = gotoStops;
        vm.handleKeyPress = handleKeyPress;
        vm.mapRoute = mapRoute;
        vm.clearPins = clearPins;
        vm.loading = false;
        vm.upcomingSchedules;
        vm.showFromStops = true;
        vm.showToStops = false;
        vm.showRoutes = false;
        vm.divisionId = DivisionService.getDivisionId();
        var fromStopPin = 'images/bus-green.svg';
        var toStopPin = 'images/bus-darkblue.svg';
        var markers = [];
        var bounds;
        vm.routesOnMap = [];
        vm.activeSchedule;
        vm.isAnyRouteSelected = false;
        vm.PageService = PageService;
        vm.PageService.setTitle('Stops');
        PageService.setHeadline(OneMvServices.getFixedRouteInfo().alias);
        //var infoWindow = new google.maps.InfoWindow({ content: '' });

        activate();

        //map stuff
        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {

            myLocationPin = 'images/pin-my-location.png';

        }
        else {

            myLocationPin = 'images/pin-my-location.svg';

        }
        vm.zoom = 15;
        vm.center = {
            latitude: 47.604356,
            longitude: -122.3360817
        };
        vm.myStyles = googleMapsConfig.mapStyles;
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        vm.mapControl = {};
        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                GeoLocationService.getCurrentPosition().then(function (position) {
                    vm.position = {
                        coords: {
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude
                        },
                        icon: vm.myLocationIcon
                    };
                    vm.center.latitude = position.coords.latitude;
                    vm.center.longitude = position.coords.longitude;

                    google.maps.event.trigger(vm.mapControl.getGMap(), "resize");


                }, function (err) {
                    //position error
                    ScheduleService.getServiceAreaLocation(vm.divisionId).then(function (response) {
                        if (response.data.status == 1) {
                            vm.center.latitude = response.data.result.Latitude;
                            vm.center.longitude = response.data.result.Longitude;
                        }
                    });
                });
            });
        }
        function getLineBounds(line) {
            var bound = new google.maps.LatLngBounds();
            line.getPath().forEach(function (item, index) {
                bound.extend(new google.maps.LatLng(item.lat(), item.lng()));
            });
            return bound;
        };
        function setMapBounds() {
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < markers.length; i++)
                bounds.extend(markers[i].position);
            vm.mapControl.getGMap().fitBounds(bounds);
            vm.mapControl.getGMap().setZoom(vm.mapControl.getGMap().getZoom() - 1);

        }
        function adjustMapBounds() {
            var numberOnMap = 0;
            bounds = new google.maps.LatLngBounds();
            for (var route in vm.routesOnMap) {
                if (vm.routesOnMap[route].displayOnMap) {
                    numberOnMap++;
                    for (var i = 0; i < vm.routesOnMap[route].lines.length; i++) {
                        bounds.union(getLineBounds(vm.routesOnMap[route].lines[i]));
                    }
                }
            }
            if (numberOnMap > 0)
                vm.mapControl.getGMap().fitBounds(bounds);
        }
        function hideRouteOnMap(route) {
            if (vm.routesOnMap[route.id] != undefined && vm.routesOnMap[route.id] != null) {
                if (vm.routesOnMap[route.id].displayOnMap) {
                    vm.routesOnMap[route.id].displayOnMap = false;
                    for (var i = 0; i < vm.routesOnMap[route.id].lines.length; i++) {
                        vm.routesOnMap[route.id].lines[i].setMap(null);
                    }
                    adjustMapBounds();
                }
            }
        }
        function clearAllRoutesOnMap() {
            for (var r = 0; r < vm.routesOnMap.length; r++) {
                if (vm.routesOnMap[r] != undefined && vm.routesOnMap[r] != null) {
                    if (vm.routesOnMap[r].displayOnMap) {
                        vm.routesOnMap[r].displayOnMap = false;
                        for (var i = 0; i < vm.routesOnMap[r].lines.length; i++) {
                            vm.routesOnMap[r].lines[i].setMap(null);
                        }
                        adjustMapBounds();
                    }
                }
            }
        }
        function showRouteOnMap(route) {
            if (vm.routesOnMap[route.id] != undefined && vm.routesOnMap[route.id] != null) {
                vm.routesOnMap[route.id].displayOnMap = true;
                for (var i = 0; i < vm.routesOnMap[route.id].lines.length; i++) {
                    vm.routesOnMap[route.id].lines[i].setMap(vm.mapControl.getGMap());
                }
                adjustMapBounds();

            } else {
                vm.routesOnMap[route.id] = {
                };
                var lines = [];
                RouteService.getShapesByRoute(route.id).then(function (result) {
                    var shapes = result.data;
                    for (var i = 0; i < shapes.length; i++) {
                        var decodedPath = google.maps.geometry.encoding.decodePath(shapes[i].line);

                        //var line = new google.maps.Polyline({
                        //    path: decodedPath,
                        //    strokeColor: route.color,
                        //    strokeOpacity: 1.0,
                        //    strokeWeight: 2,
                        //    icons: [{
                        //        icon: {
                        //            path: google.maps.SymbolPath.FORWARD_OPEN_ARROW
                        //        },
                        //        offset: '25px',
                        //        repeat: '100px'
                        //    }]

                        //});
                        var line = new google.maps.Polyline({
                            path: decodedPath,
                            strokeColor: route.color,
                            strokeOpacity: 0.5,
                            strokeWeight: 5,
                            icons: [{
                                icon: {
                                    path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,
                                    strokeOpacity: 0,
                                    fillColor: route.color,
                                    fillOpacity: 1,
                                    scale: 2.5
                                },
                                offset: '25px',
                                repeat: '200px',

                            }],
                            zIndex: 1
                        });
                        var lineStroke = new google.maps.Polyline({
                            path: decodedPath,
                            strokeColor: '#fff',
                            strokeOpacity: 1.0,
                            strokeWeight: 8,
                            zindex: 0
                        });

                        line.setMap(vm.mapControl.getGMap());
                        lineStroke.setMap(vm.mapControl.getGMap());
                        lines.push(line);
                        lines.push(lineStroke);
                    }
                    vm.routesOnMap[route.id].lines = lines;
                    vm.routesOnMap[route.id].displayOnMap = true;
                    adjustMapBounds();

                });
            }
        };
        function dropStopMarker(stop, fromTo) {

          
            var stopMarker = new google.maps.Marker({
                position: new google.maps.LatLng(stop.Latitude, stop.Longitude),
                optimized: false,
                icon: { url: fromTo == "from" ? fromStopPin : toStopPin, scaledSize: new google.maps.Size(28, 24) },
                animation: google.maps.Animation.DROP
            });
            stopMarker.id = stop.Id;
           stopMarker.setMap(vm.mapControl.getGMap());
            markers.push(stopMarker);
            google.maps.event.addListener(stopMarker, 'click', showStopNameWindow(stop, stopMarker));
        };
        function showStopNameWindow(stop, marker) {
            var infoWindow = new google.maps.InfoWindow({ content: '' });
            return function () {
                var content = '<span style="font-weight: bold;">' + stop.Name + '</span><br />';
                infoWindow.setContent(content);
                infoWindow.open(vm.mapControl.getGMap(), marker);
            }
        };
        function deleteMarker(id) {
            //First clear all the routes on the map
            clearAllRoutesOnMap();
            //Find and remove the marker from the Array
            for (var i = 0; i < markers.length; i++) {
                if (markers[i].id == id) {
                    //Remove the marker from Map                  
                    markers[i].setMap(null);
                    //Remove the marker from array.
                    markers.splice(i, 1);
                    return;
                }
            }
        };
        //map stuff

        function gotoRoutes() {
            $location.path('fixed-route/allRoutes')
        }

        function gotoStops() {
            $location.path('fixed-route/stops')
        }

        function activate() {
            if (vm.divisionId != null && vm.divisionId != undefined && vm.divisionId != '') { getMap(); };
 
            $("#txtFromStopName").parent().addClass('active');//Activate the class to highlight the input control
            populateFromStops();//Load the from stops
        }

        //UI INTERACTIONS
        //Adds and removes the active class to the parent of an element.
        vm.highlightParent = function (e) {
            angular.element(e.target).parent().addClass('active');
        }
        vm.blurParent = function (e) {
            angular.element(e.target).parent().removeClass('active');
        }

        //Fix to handle user hitting backspace to clear the stop.
        function handleKeyPress(e, fromTo) {
            if ( (e && e.keyCode === 8) && //check for backspace
                 (e.currentTarget && e.currentTarget.selectionStart == 0 && e.currentTarget.selectionEnd == e.currentTarget.value.length)) { //check when backspace is hit, if the whole text is selected
                if (fromTo == "from") {
                    vm.fromStopName = "";
                    clearFromStop();
                } else {
                    vm.toStopName = "";
                    clearToStop();
                }
            }
        }


        function populateFromStops() {
            vm.showFromStops = true;
            vm.showToStops = false;
            vm.showRoutes = false;
            vm.loading = true;
            vm.fromStops = [];
            if (vm.selectedFromStop) {
                $("#txtFromStopName").select();
            }

            if (vm.allStops && vm.allStops.length > 0) {
                var filteredList = [];
                if (vm.selectedToStop) {
                    for (var i = 0; i < vm.allStops.length; i++) {
                        if (vm.allStops[i].Id != vm.selectedToStop.Id) {
                            filteredList.push(vm.allStops[i])
                        }
                    }
                } else {
                    filteredList = vm.allStops;
                }
                vm.loading = false;
                vm.fromStops = filteredList;
            } else {
                StopService.getAllStops(vm.divisionId)
                           .then(function (response) {
                               vm.loading = false;
                               vm.allStops = response.data;
                               vm.fromStops = vm.allStops;
                           }, function (error) {

                           });
            }
        }

        function populateToStops() {
            vm.showFromStops = false;
            vm.showToStops = true;
            vm.showRoutes = false;
            vm.loading = true;
            vm.toStops = [];
            if (vm.selectedToStop) {
                $("#txtToStopName").select();
            }

            if (vm.allStops && vm.allStops.length > 0) {
                var filteredList = [];
                if (vm.selectedFromStop) {
                    for (var i = 0; i < vm.allStops.length; i++) {
                        if (vm.allStops[i].Id != vm.selectedFromStop.Id) {
                            filteredList.push(vm.allStops[i])
                        }
                    }
                } else {
                    filteredList = vm.allStops;
                }
                vm.loading = false;
                vm.toStops = filteredList;
            } else {
                StopService.getAllStops(vm.divisionId)
                           .then(function (response) {
                               vm.loading = false;
                               vm.allStops = response.data;
                               vm.toStops = vm.allStops;
                           }, function (error) {

                           });
            }
        }

        function selectFromStop(stop) {
            if (vm.selectedFromStop) { deleteMarker(vm.selectedFromStop.Id) };
            vm.selectedFromStop = stop;
            vm.fromStopName = vm.selectedFromStop.Name;

            dropStopMarker(stop, "from");

            if (!vm.selectedToStop) {
                $("#txtToStopName").focus();
                $("#txtFromStopName").parent().removeClass('active');//Remove the class to highlight the input control
                $("#txtToStopName").parent().addClass('active');//Activate the class to highlight the input control

                populateToStops();
            } else {
                showRoutesForSelectedStops();
            };
        }

        function selectToStop(stop) {
            if (vm.selectedToStop) { deleteMarker(vm.selectedToStop.Id) };
            vm.selectedToStop = stop;
            vm.toStopName = vm.selectedToStop.Name;

            dropStopMarker(stop, "to");

            if (!vm.selectedFromStop) {
                $("#txtFromStopName").focus();
                populateFromStops();
            } else {
                showRoutesForSelectedStops();
            };
        };

        


        function mapRoute(schedule) {
            if (schedule.isSelected) {
                showRouteOnMap(schedule.route);
                vm.activeSchedule = schedule;
                vm.isAnyRouteSelected = true;
            } else {
                hideRouteOnMap(schedule.route);
                vm.activeSchedule = null;
            }
            vm.isHidden = schedule.isSelected;
        };

        function clearFromStop() {
            deleteMarker(vm.selectedFromStop.Id)
            vm.selectedFromStop = null;
            populateFromStops();
        };

        function clearToStop() {
            deleteMarker(vm.selectedToStop.Id)
            vm.selectedToStop = null;
            populateToStops();
        };

        function showRoutesForSelectedStops() {
            setMapBounds();
            if (!vm.selectedFromStop) {
                $("#txtFromStopName").focus();
                populateFromStops();
                return;
            };

            if (!vm.selectedToStop) {
                $("#txtToStopName").focus();
                populateToStops();
                return;
            };

            vm.showFromStops = false;
            vm.showToStops = false;
            vm.showRoutes = true;
            vm.loadingRoutes = true;
            StopService.getArrivalsForStop(vm.divisionId, vm.selectedFromStop.Id, vm.selectedToStop.Id)
                      .then(function (response) {
                          vm.loadingRoutes = false;
                          vm.upcomingSchedules = response.data;
                          for (var i = 0; i < vm.upcomingSchedules.length; i++) {
                              vm.upcomingSchedules[i].isSelected = false;
                          }
                          vm.isAnyRouteSelected = false;
                      }, function (error) {

                      });
        }

        function clearPins() {
            vm.isHidden = !vm.isHidden;
            if (!vm.isHidden) {
                for (var i = 0; i < vm.upcomingSchedules.length; i++) {
                    vm.upcomingSchedules[i].isSelected = false;
                }
                vm.isAnyRouteSelected = false;
                clearAllRoutesOnMap();
            }
        };

                // Start of code for Ionic
        vm.ionicInclude = 'app/modules/fixed-route/stops/fr-stops.html';
        vm.ionicCustomClassName = 'ionic-fixed-route-stops';
        vm.ionicUseFixedRouteNav = true;
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('StopsForRouteController', StopsForRouteController);

    StopsForRouteController.$inject = ['$state', '$stateParams', '$interval', '$scope',
        'GeoLocationService', 'googleMapsConfig', 'uiGmapIsReady', 'RouteService',
         'DivisionService', 'ScheduleService', 'PortalUtilityService', 'PageService','OneMvServices'];

    function StopsForRouteController($state, $stateParams, $interval, $scope,
        GeoLocationService, googleMapsConfig, uiGmapIsReady, RouteService,
         DivisionService, ScheduleService, PortalUtilityService, PageService,OneMvServices) {

        var vm = this;        
        var vehiclePoll = undefined;
        var arrivalPoll = undefined;
        var divisionId = undefined;
        var routeId = undefined;
        var vehiclePollInterval = 20000;
        var arrivalPollInterval = 20000;
        var fixedRouteLandingRoute = 'fixed-route-landing';
        var stopsLoaded = false;

        vm.PageService = PageService;
        vm.PageService.setTitle('Stops for Route');
        PageService.setHeadline(OneMvServices.getFixedRouteInfo().alias);

        function activate() {
            vm.route = {};
            vm.routeArrivals = [];
            vm.loading = true;
            vm.vehicleMarkers = [];
            vm.selectedStopId = '';

            vm.mapControl = {};
            vm.zoom = 15;
            vm.center = { latitude: 47.604356, longitude: -122.3360817 };
            vm.mapOptions = {
                mapTypeControl: false,
                zoomControl: false,
                streetViewControl: false,
                styles: googleMapsConfig.mapStyles
            };

            if (!PortalUtilityService.hasValue($stateParams.routeId))
                $state.go(fixedRouteLandingRoute);

            routeId = $stateParams.routeId;
            divisionId = DivisionService.getDivisionId();

            if (!PortalUtilityService.hasValue(divisionId))
                $state.go('division');

            RouteService
                .getRouteInfo(routeId)
                    .then(function (response) {
                        if (response && response.data) {
                            vm.route = response.data;
                            getMap();
                        }
                    }, function (error) {
                        $state.go(fixedRouteLandingRoute);
                    })
            .then(getStopArrivalsForRoute);
        }       
        function getPinUrl() {
            return PortalUtilityService.isIE() ?
                'images/pin-my-location.png'
                : 'images/pin-my-location.svg';
        }

        function getMap() {
            uiGmapIsReady
                .promise()
                    .then(getMapInfo)
                        .then(getShapeForRoute)
                            .then(getVehiclesForRoute)
                                .then(pollVehiclesForRoute);
        }

        function getMapInfo(maps) {
            GeoLocationService
                .getCurrentPosition()
                    .then(currentPositionSuccessHandler, currentPositionFailureHandler)
        }

        function currentPositionSuccessHandler(position, maps) {
            vm.position = {
                coords: {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                },
                icon: getLocationIcon()
            };
            vm.center.latitude = position.coords.latitude;
            vm.center.longitude = position.coords.longitude;

            google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
        }

        function getLocationIcon() {
            return {
                url: getPinUrl(),
                size: new google.maps.Size(42, 42),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(20, 20)
            }
        }


        function currentPositionFailureHandler(err) {
            ScheduleService.getServiceAreaLocation(divisionId).then(function (response) {
                if (response.data.status == 1) {
                    vm.center.latitude = response.data.result.Latitude;
                    vm.center.longitude = response.data.result.Longitude;
                }
            });
        }

        function getVehiclesForRoute() {
            RouteService
                .getVehiclesForRoute(routeId)
                    .then(vehiclesSuccessHandler, vehiclesFailureHandler);
        }


        function vehiclesSuccessHandler(response) {
            if (response && response.data && response.data.length > 0)
                mapActiveVehicles(response);
        }

        function mapActiveVehicles(response) {

            for (var i = 0; i < response.data.length; i++) {
                var vehicleInfo = response.data[i];                                                

                if (contains(vm.vehicleMarkers, vehicleInfo.id) > -1) {
                    var position = new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude);

                    updateMarkers(vehicleInfo);
                }
                else {
                    var headingMarker = getHeadingMarker(vehicleInfo);
                    var vehicleMarker = getVehicleMarker(vehicleInfo);

                    vm.vehicleMarkers.push(headingMarker);
                    vm.vehicleMarkers.push(vehicleMarker);
                }
            }
        }


        function updateMarkers(vehicleInfo) {
            var markers = findAll(vm.vehicleMarkers, vehicleInfo.id);
            var map = vm.mapControl.getGMap();
            var position = new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude);

            for (var i = 0; i < markers.length; i++) {

                var marker = markers[i];
                if (marker.markerType === 'heading') {
                    var icon = marker.getIcon();
                    icon.rotation = vehicleInfo.heading;
                    icon.anchor = new google.maps.Point(vehicleInfo.anchorX, vehicleInfo.anchorY)//getAnchor(heading);
                    icon.origin = new google.maps.Point(0, 0);
                    marker.setIcon(icon);
                }
                 

                marker.setDuration(vehiclePollInterval);
                marker.setPosition(position);

                google.maps.event.trigger(map, "resize");
            }
        }

        function getHeadingMarker(vehicleInfo) {            
            var map = vm.mapControl.getGMap();
            var position = new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude);

            return new google.maps.Marker({
                id: vehicleInfo.id,
                markerType: 'heading',
                position: position,
                map: map,
                flat:true,
                icon: {
                    path: 'M15.2413122,21.1527861 L11,26 L6.75861856,21.1527069 C2.78910959,19.4927506 0,15.5728475 0,11 C0,4.92486775 4.923532,0 11,0 C17.0751322,0 22,4.923532 22,11 C22,15.5720845 19.2113515,19.4926684 15.2413122,21.1527861 Z',//google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                    scale: 1.1,
                    fillOpacity: 1,
                    fillColor: '#fff',
                    strokeWeight: 1,
                    strokeOpacity: .3,
                    rotation: vehicleInfo.heading,
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(vehicleInfo.anchorX, vehicleInfo.anchorY)//getAnchor(vehicleInfo.heading)
                },
                zIndex: 1
            });
        }       

        function getVehicleMarker(vehicleInfo) {
            var map = vm.mapControl.getGMap();
            var position = new google.maps.LatLng(vehicleInfo.latitude, vehicleInfo.longitude);

            var marker = new google.maps.Marker({
                id: vehicleInfo.id,
                markerType: 'vehicle',
                position: position,
                flat: true,
                map: map,
                icon: {
                    path: 'M0,10 C0,4.4771525 4.47593818,0 10,0 C15.5228475,0 20,4.47593818 20,10 C20,15.5228475 15.5240618,20 10,20 C4.4771525,20 0,15.5240618 0,10 Z M5,5 L5,13.8 L5.81904762,13.8 L5.81904762,15 L7,15 L7,13.8 L13,13.8 L13,15 L14.1809524,15 L14.1809524,13.8 L15,13.8 L15,5 L5,5 Z M14.6336996,9.71610209 C14.6336996,9.99255627 14.405522,10.2166667 14.1374134,10.2166667 L5.89921665,10.2166667 C5.62512532,10.2166667 5.4029304,10.0022513 5.4029304,9.71610209 L5.4029304,7.11723124 C5.4029304,6.84077706 5.63110799,6.61666667 5.89921665,6.61666667 L14.1374134,6.61666667 C14.4115047,6.61666667 14.6336996,6.83108203 14.6336996,7.11723124 L14.6336996,9.71610209 Z M5.38461538,5.8 C5.38461538,5.5790861 5.56076967,5.4 5.78125,5.4 L14.21875,5.4 C14.4378052,5.4 14.6153846,5.58554688 14.6153846,5.8 C14.6153846,6.0209139 14.4392303,6.2 14.21875,6.2 L5.78125,6.2 C5.56219475,6.2 5.38461538,6.01445313 5.38461538,5.8 Z M5.38461538,11.6 C5.38461538,11.2686292 5.65201099,11 5.99308894,11 L6.69921875,11 C7.03526942,11 7.30769231,11.2783203 7.30769231,11.6 C7.30769231,11.9313708 7.0402967,12.2 6.69921875,12.2 L5.99308894,12.2 C5.65703828,12.2 5.38461538,11.9216797 5.38461538,11.6 Z M12.6923077,11.6 C12.6923077,11.2686292 12.9597033,11 13.3007812,11 L14.0069111,11 C14.3429617,11 14.6153846,11.2783203 14.6153846,11.6 C14.6153846,11.9313708 14.347989,12.2 14.0069111,12.2 L13.3007812,12.2 C12.9647306,12.2 12.6923077,11.9216797 12.6923077,11.6 Z',
                    fillOpacity: 1,
                    strokeOpacity: 0,
                    fillColor: vm.route.color,
                    scale: 1,
                },
                zIndex: 2
            });
            google.maps.event.addListener(marker, 'click', showVehicleNumber(map, marker, vehicleInfo.name));

            return marker;
        }

        function showVehicleNumber(map, marker, number) {

            var infoWindow = new google.maps.InfoWindow({ content: '' });
            return function () {
                var content = '<span style="font-weight: bold;">' + '#'+number + '</span><br />';
                infoWindow.setContent(content);
                infoWindow.open(map, marker);
            }
        }        

        function removeMarker(collection, marker) {
            
            var index = contains(collection, marker.id);
            collection[index].setMap(null);
            collection.splice(index, 1);
        }

        function contains(list, id) {
            for (var i = 0; i < list.length; i++) {
                if (list[i].id === id) return i;
            }
            return -1;
        }

        function findAll(list, id) {
            var markers = [];

            for (var i = 0; i < list.length; i++) {
                if (list[i].id === id)
                    markers.push(list[i]);
            }
            return markers;
        }


        function vehiclesFailureHandler() {

        }

        function pollVehiclesForRoute() {
            vehiclePoll = $interval(function () {
                getVehiclesForRoute();
            }, vehiclePollInterval);
        }


        function getStopArrivalsForRoute() {
            RouteService
                .getArrivalsForRoute(routeId, divisionId)
                       .then(handleArrivalSuccess, handleArrivalFailure)
                            .then(pollArrivalsForRoute);
        }

        function handleArrivalSuccess(response) {
            vm.routeArrivals = response.data.arrivals;
            vm.loading = false;

            if (!stopsLoaded)
                mapStopsForDisplay();;
        }


        function getShapeForRoute() {
            var map = vm.mapControl.getGMap();
            RouteService
                .getShapesByRoute(routeId)
                    .then(function (result) {
                        var shapes = result.data;

                        var line = new google.maps.Polyline({
                            path: google.maps.geometry.encoding.decodePath(shapes[0].line),
                            strokeColor: vm.route.color,
                            strokeOpacity: 4.0,
                            strokeWeight: 4,
                            map : map,
                            icons: [{
                                icon: {
                                    path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                                    scale: 3
                                },
                                offset: '25px',
                                repeat: '200px'
                            }]

                        });

                        map.fitBounds(getLineBounds(line));
                    }, function (error) {

                    });
        }


        function getLineBounds(line) {
            var bound = new google.maps.LatLngBounds();
            line.getPath().forEach(function (item, index) {
                bound.extend(new google.maps.LatLng(item.lat(), item.lng()));
            });
            return bound;
        };

        function handleArrivalFailure(error) {
            vm.loading = false;
        }

        function mapStopsForDisplay() {
            var map = vm.mapControl.getGMap();

            for (var i = 0; i < vm.routeArrivals.length; i++) {

                var stopInfo = vm.routeArrivals[i].stop;
                var position = new google.maps.LatLng(stopInfo.Latitude, stopInfo.Longitude);

                var stop = new google.maps.Marker({
                    id: stopInfo.Id,
                    position: position,
                    map: map,
                    optimized: false,
                    icon: {
                        path: 'M0,2.99420208 C0,1.34054993 1.34331197,0 2.99420208,0 L17.0057979,0 C18.6594501,0 20,1.34331197 20,2.99420208 L20,17.0057979 C20,18.6594501 18.656688,20 17.0057979,20 L2.99420208,20 C1.34054993,20 0,18.656688 0,17.0057979 L0,2.99420208 Z M6,20 L13.7690812,20 L9.75999999,22.76 L6,20 Z',
                        fillColor: vm.route.color,
                        fillOpacity: 1,
                        strokeWeight: 0,
                        anchor: new google.maps.Point(9, 21),
                        size: new google.maps.Size(20, 23)
                    },
                    zIndex: 5,
                    animation: google.maps.Animation.DROP
                });

                var icon = new google.maps.Marker({
                    id: stopInfo.Id,
                    position: position,
                    map: map,
                    optimized: false,
                    icon: {
                        path: 'M0,0 L0,13.0899217 C0,13.6367269 0.443667457,14.08 1.00653274,14.08 L1.31047619,14.08 L1.31047619,16 L3.2,16 L3.2,14.08 L12.8,14.08 L12.8,16 L14.6895238,16 L14.6895238,14.08 L14.9934673,14.08 C15.5493599,14.08 16,13.6274801 16,13.0899217 L16,0.990078259 C16,0.443273135 15.5553691,0 14.9991283,0 L0,0 Z M15.4139194,7.85557231 C15.4139194,8.12679623 15.1819301,8.34666667 14.9225207,8.34666667 L1.13608738,8.34666667 C0.864695354,8.34666667 0.644688645,8.12790141 0.644688645,7.85557231 L0.644688645,3.07776103 C0.644688645,2.8065371 0.876677992,2.58666667 1.13608738,2.58666667 L14.9225207,2.58666667 C15.1939127,2.58666667 15.4139194,2.80543193 15.4139194,3.07776103 L15.4139194,7.85557231 Z M0.615384615,1.1312207 C0.615384615,0.859927 0.847373962,0.64 1.10678335,0.64 L14.8932166,0.64 C15.1646087,0.64 15.3846154,0.862958984 15.3846154,1.1312207 L15.3846154,1.4287793 C15.3846154,1.700073 15.152626,1.92 14.8932166,1.92 L1.10678335,1.92 C0.835391324,1.92 0.615384615,1.69704102 0.615384615,1.4287793 L0.615384615,1.1312207 Z M0.615384615,10.56 C0.615384615,10.0298066 1.04321759,9.6 1.57207584,9.6 L2.73561646,9.6 C3.26398244,9.6 3.69230769,10.0261102 3.69230769,10.56 C3.69230769,11.0901934 3.26447472,11.52 2.73561646,11.52 L1.57207584,11.52 C1.04370987,11.52 0.615384615,11.0938898 0.615384615,10.56 Z M12.3076923,10.56 C12.3076923,10.0298066 12.7355253,9.6 13.2643835,9.6 L14.4279242,9.6 C14.9562901,9.6 15.3846154,10.0261102 15.3846154,10.56 C15.3846154,11.0901934 14.9567824,11.52 14.4279242,11.52 L13.2643835,11.52 C12.7360176,11.52 12.3076923,11.0938898 12.3076923,10.56 Z M11.423955,11.1999507 C11.6340659,11.3767363 11.5848839,11.5200493 11.3051605,11.5200493 L4.69483948,11.5200493 C4.41912022,11.5200493 4.36801543,11.3749851 4.57604503,11.1999507 L4.19560559,11.5200493 C4.40571649,11.3432637 4.80388725,11.1999507 5.06852983,11.1999507 L10.9314702,11.1999507 C11.203462,11.1999507 11.5963648,11.3450149 11.8043944,11.5200493 L11.423955,11.1999507 Z M11.423955,11.8399507 C11.6340659,12.0167363 11.5848839,12.1600493 11.3051605,12.1600493 L4.69483948,12.1600493 C4.41912022,12.1600493 4.36801543,12.0149851 4.57604503,11.8399507 L4.19560559,12.1600493 C4.40571649,11.9832637 4.80388725,11.8399507 5.06852983,11.8399507 L10.9314702,11.8399507 C11.203462,11.8399507 11.5963648,11.9850149 11.8043944,12.1600493 L11.423955,11.8399507 Z',
                        fillColor: '#fff',
                        fillOpacity: 1,
                        strokeWeight: 0,
                        anchor: new google.maps.Point(7, 19),
                        size: new google.maps.Size(16, 16)
                    },
                    zIndex: 6,
                    animation: google.maps.Animation.DROP
                });

                var shadow = new google.maps.Marker({
                    id: stopInfo.Id,
                    position: position,
                    map: map,
                    optimized: false,
                    icon: {
                        path: 'M-5.83252597,14.3155545 C-6.35350295,13.5889938 -5.4359106,13 -3.78917972,13 L10.1871155,13 C11.8366015,13 13.5969795,13.5902074 14.1170863,14.3155545 L18.5313877,20.4717917 C19.0523647,21.1983524 18.1347724,21.7873462 16.4880415,21.7873462 L2.51174624,21.7873462 C0.862260281,21.7873462 -0.898117751,21.1971389 -1.41822457,20.4717917 L-5.83252597,14.3155545 Z M5.5099714,21.7873462 L13.2594793,21.7873462 L10.1300263,23 L5.5099714,21.7873462 Z',
                        fillColor: '#000',
                        fillOpacity: .10,
                        strokeWeight: 0,
                        anchor: new google.maps.Point(9, 21),
                        size: new google.maps.Size(21, 10)

                    },
                    zIndex: 4,
                    animation: google.maps.Animation.DROP
                });

                google.maps.event.addListener(icon, 'click', showStopInfo(map, icon, stopInfo.Name));
            }

            stopsLoaded = true;
        }


        function showStopInfo(map, marker, name) {

            var infoWindow = new google.maps.InfoWindow({ content: '' });
            return function () {
                var content = '<span style="font-weight: bold;">'  + name + '</span><br />';
                infoWindow.setContent(content);
                infoWindow.open(map, marker);
            }
        }


        function onStopClick(marker, eventName, model) {
           
        }

        function pollArrivalsForRoute() {
            if (!PortalUtilityService.hasValue(arrivalPoll)) {
                arrivalPoll = $interval(function () {
                    getStopArrivalsForRoute()
                }, arrivalPollInterval);
            }
        }

        activate();

        $scope.$on('$destroy', function (event) {
            stopPolling();
        });

        function stopPolling() {
            if (angular.isDefined(vehiclePoll)) {
                $interval.cancel(vehiclePoll);
                vehiclePoll = undefined;
            }

            if (angular.isDefined(arrivalPoll)) {
                $interval.cancel(arrivalPoll);
                arrivalPoll = undefined;
            }
        }
        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/fixed-route/stops-for-route/stops-for-route.html';
        vm.ionicCustomClassName = 'ionic-fixed-route-stops-for-route';
        vm.ionicUseFixedRouteNav = true;
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }
})();

(function () {
    'use strict';

    angular.module('oneMVApp')
        .controller('ActiveTripController', activeTripController);

    activeTripController.$inject = ['$scope', '$location', '$interval', '$window', '$uibModal',
                'ConfigFactory', 'ScheduleService', 'uiGmapIsReady', 'DivisionService', 'authService',
                'UtilityFactory', 'RedirectionService', 'CommunicationsService', 'SettingsService',  'PageService','OneMvServices'];

    function activeTripController($scope, $location, $interval, $window, $uibModal,
        ConfigFactory, ScheduleService, uiGmapIsReady, DivisionService, authService,
        UtilityFactory, RedirectionService, CommunicationsService, SettingsService,  PageService,OneMvServices) {

        var vm = this;

        PageService.setTitle('Active Trip');
        PageService.setHeadline(OneMvServices.getDrtInfo().alias);

        var options = undefined;
        var autoRefresh = undefined;
        vm.passengerId = authService.authentication.passengerId;
        vm.cancelTrip = cancelTrip;
        vm.getActiveTrip = getActiveTrip;
        vm.tryContactDriver = tryContactDriver;
        vm.isCancelling = false;
        vm.activeTrip;
        vm.contactingDriver = false;
        var divisionId = '';
        var operatorId = null;
        var directionsDisplay = new google.maps.DirectionsRenderer({ suppressMarkers: true, draggable: false });
        var directionsService = new google.maps.DirectionsService();
        vm.isLoading = false;
        vm.vehicleInfo = null;
        vm.drawerState = 1;

        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {
            closestPin = 'images/default/i-drt-pin-b.png';
            otherPin = 'images/default/i-drt-pin-g.png';
            locationPin = 'images/pin-location.png';
            myLocationPin = 'images/pin-my-location.png';
            hubIcon = 'images/pin-hub.png';
        }
        else {
            closestPin = 'images/default/i-pin-drt-b.svg';
            otherPin = 'images/default/i-drt-pin-g.svg';
            locationPin = 'images/pin-location.svg';
            myLocationPin = 'images/pin-my-location.svg';
            hubIcon = 'images/pin-hub.svg';
        }

        function setAutoRefresh() {
            autoRefresh = $interval(function () {
                getActiveTrip();
            }, 30000);
        }

        function tryContactDriver(type) {
            vm.contactingDriver = true;
            vm.type = type;
            SettingsService
               .getSettings(authService.authentication.passengerId)
           .then(function (response) {
               if (response.length >= 10) {
                   contactDriver();
               } else {
                   CollectPassengerMobile();
               }
           }, function (error) {
              
           });
            
        }
        
        $scope.swipeUp = function ($event) {
          if (vm.drawerState < 2) {
            vm.drawerState += 1;
          }
        };

        $scope.swipeDown = function ($event) {
          if (vm.drawerState > 0) {
            vm.drawerState -= 1;
          }
        };

        function showSupportPopUp() {
            // get help phone number
            var helpPhone = DivisionService.getSupportPhoneNumber();
            var message = "Could not contact driver. Please call Help desk at <a href='tel:" + helpPhone + "'>" + helpPhone + "</a>";
            
            $uibModal.open({
                template: '<div class="modal-header" >' +
                                '<h3 class="modal-title">Support</h3>' +
                              ' </div>' +
                              '<div class="modal-body">' +
                                '<p>' + message + '</p>' +
                              '</div>' +
                              '<div class="modal-footer">' +
                              '<button class="btn btn-warning" type="button" ng-click="close()">OK</button>' +
                                  ' </div>',
                replace: true,
                controller: function ($scope, $uibModalInstance) {
                    $scope.close = function () {
                        $uibModalInstance.close();
                        //$location.replace().path('dashboard/');
                    };
                },
                backdrop: 'static',
                keyboard: false
            });
        }

        function contactDriver() {
            CommunicationsService.contactDriver(vm.activeTrip.TripID).then(function (response) {
                if (response.status == 1 && response.result) {
                    if (vm.type == "call")
                        document.location.href = "tel:" + response.result;
                    else if (vm.type == "sms")
                        document.location.href = "sms:" + response.result;
                } else if (response.status == 2) {
                    //Handle Validation 100001 = Driver phone missing
                    //Handle Validation 100002 = Passenger phone missing
                    showSupportPopUp();
                } else {
                    showSupportPopUp();
                }
                vm.contactingDriver = false;
            }, function (error) {
                vm.contactingDriver = false;
                showSupportPopUp();
            });
        }

        function CollectPassengerMobile() {

            var passengerMobileModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/on-demand/activeTrip/passenger-mobile-modal.html',
                controller: 'PassengerMobileController as vm',
                size: 'sm',
                resolve: {
                    settings: function () {
                        return {
                            passengerId: authService.authentication.passengerId,
                        };
                    }
                }
            });
            passengerMobileModal.result.then(function (response) {
                if (response == true) {
                    contactDriver();
                } else if(response == false){
                    UtilityFactory.toastError('Error', 'Could not update your mobile number.');
                }
            });
        }

        function getActiveTrip() {
            // vm.isLoading = false;
            ScheduleService.getlastripdetails(vm.passengerId).then(function (response) {
                if (response.data.status == 1) {
                    vm.activeTrip = response.data.result;

                    //var promiseWindow = options.promiseWindow;
                    var startPickupWindowTime = new moment(vm.activeTrip.StartPickupWindowTime);
                    var endPickupWindowTime = new moment(vm.activeTrip.EndPickupWindowTime);
                    vm.activeTrip.promiseWindowStartTime = startPickupWindowTime.format('h:mm A');
                    vm.activeTrip.promiseWindowEndTime = endPickupWindowTime.format('h:mm A');

                    mapTrip();
                }
                else {
                    vm.activeTrip = null;
                    vm.scheduleMarkers = [];
                    directionsDisplay.setMap(null);
                    $location.path('on-demand/reservations');
                }
                //getMap();

            }, function (err) {
                vm.activeTrip = null;
                vm.isLoading = false;
                // getMap();
            });
        }

        vm.zoom = 15;
        vm.center = {
            latitude: 39.809860,
            longitude: -98.555183
        };
        vm.myStyles = [
  {
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#ebe3cd"
        }
      ]
  },
  {
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#523735"
        }
      ]
  },
  {
      "elementType": "labels.text.stroke",
      "stylers": [
        {
            "color": "#f5f1e6"
        }
      ]
  },
  {
      "featureType": "administrative",
      "elementType": "geometry.stroke",
      "stylers": [
        {
            "color": "#c9b2a6"
        }
      ]
  },
  {
      "featureType": "administrative.land_parcel",
      "elementType": "geometry.stroke",
      "stylers": [
        {
            "color": "#dcd2be"
        }
      ]
  },
  {
      "featureType": "administrative.land_parcel",
      "elementType": "labels",
      "stylers": [
        {
            "visibility": "off"
        }
      ]
  },
  {
      "featureType": "administrative.land_parcel",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#ae9e90"
        }
      ]
  },
  {
      "featureType": "landscape.natural",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#dfd2ae"
        }
      ]
  },
  {
      "featureType": "poi",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#dfd2ae"
        }
      ]
  },
  {
      "featureType": "poi",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#93817c"
        }
      ]
  },
  {
      "featureType": "poi.business",
      "stylers": [
        {
            "visibility": "off"
        }
      ]
  },
  {
      "featureType": "poi.park",
      "elementType": "geometry.fill",
      "stylers": [
        {
            "color": "#a5b076"
        }
      ]
  },
  {
      "featureType": "poi.park",
      "elementType": "labels.text",
      "stylers": [
        {
            "visibility": "off"
        }
      ]
  },
  {
      "featureType": "poi.park",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#447530"
        }
      ]
  },
  {
      "featureType": "road",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#f5f1e6"
        }
      ]
  },
  {
      "featureType": "road.arterial",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#fdfcf8"
        }
      ]
  },
  {
      "featureType": "road.highway",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#f8c967"
        }
      ]
  },
  {
      "featureType": "road.highway",
      "elementType": "geometry.stroke",
      "stylers": [
        {
            "color": "#e9bc62"
        }
      ]
  },
  {
      "featureType": "road.highway.controlled_access",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#e98d58"
        }
      ]
  },
  {
      "featureType": "road.highway.controlled_access",
      "elementType": "geometry.stroke",
      "stylers": [
        {
            "color": "#db8555"
        }
      ]
  },
  {
      "featureType": "road.local",
      "elementType": "labels",
      "stylers": [
        {
            "visibility": "off"
        }
      ]
  },
  {
      "featureType": "road.local",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#806b63"
        }
      ]
  },
  {
      "featureType": "transit.line",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#dfd2ae"
        }
      ]
  },
  {
      "featureType": "transit.line",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#8f7d77"
        }
      ]
  },
  {
      "featureType": "transit.line",
      "elementType": "labels.text.stroke",
      "stylers": [
        {
            "color": "#ebe3cd"
        }
      ]
  },
  {
      "featureType": "transit.station",
      "elementType": "geometry",
      "stylers": [
        {
            "color": "#dfd2ae"
        }
      ]
  },
  {
      "featureType": "water",
      "elementType": "geometry.fill",
      "stylers": [
        {
            "color": "#b9d3c2"
        }
      ]
  },
  {
      "featureType": "water",
      "elementType": "labels.text.fill",
      "stylers": [
        {
            "color": "#92998d"
        }
      ]
  }
        ];
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.mapControl = {};

        function cancelTrip(trip) {

            var tripToCancel = {
                'tripId': trip.TripID,
                'passengerId': trip.PassengerID,
                'from': trip.StartAddressViewModel.Name,
                'to': trip.EndAddressViewModel.Name,
                'scheduledTime': trip.ScheduledPickupTime
            };

            var modalCancelTrip = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/on-demand/activeTrip/trip-cancellation-prompt.html',
                controller: 'TripCancellationController as vm',
                size: '',
                resolve: {
                    tripToCancel: function () {
                        return tripToCancel;
                    },
                    showCancelOptions: vm.reservationFormOptions.showCancelOptions
                }
            });
            modalCancelTrip.result.then(function (result) {
                if (result.isCancel) {
                    UtilityFactory.toastSuccess("Success!", "Trip cancelled");
                    $location.path('on-demand/reservations');
                }
                else
                    UtilityFactory.toastError("Error!", "Unable to cancel the trip.");
            });

        }

        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                ScheduleService.getServiceAreaLocation(vm.divisionId).then(function (response) {
                    if (response.data.status == 1) {
                        vm.center.latitude = response.data.result.Latitude;
                        vm.center.longitude = response.data.result.Longitude;
                    }

                    getActiveTrip();
                    setAutoRefresh();
                    /*if(vm.activeTrip != null)
                        mapTrip();*/
                });
            });

        }

        function mapTrip() {
            vm.scheduleMarkers = [];

            directionsDisplay.setMap(vm.mapControl.getGMap());

            vm.scheduleMarkers.push({
                'latitude': vm.activeTrip.StartAddressViewModel.Latitude, 'longitude': vm.activeTrip.StartAddressViewModel.Longitude,
                'icon': 'images/default/i-drt-pin-b.png', 'tripId': vm.activeTrip.TripID
            });
            vm.scheduleMarkers.push({
                'latitude': vm.activeTrip.EndAddressViewModel.Latitude, 'longitude': vm.activeTrip.EndAddressViewModel.Longitude,
                'icon': 'images/default/i-drt-pin-g.png', 'tripId': vm.activeTrip.TripID
            });

            var request = {
                origin: new google.maps.LatLng(vm.activeTrip.StartAddressViewModel.Latitude, vm.activeTrip.StartAddressViewModel.Longitude),
                destination: new google.maps.LatLng(vm.activeTrip.EndAddressViewModel.Latitude, vm.activeTrip.EndAddressViewModel.Longitude),
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };

            vm.vehicleInfo = {
                coords: {
                    'latitude': vm.activeTrip.VehicleLatitude,
                    'longitude': vm.activeTrip.VehicleLongitude,
                },
                icon: 'images/i-car-green.svg'
            };

            google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
            directionsService.route(request, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    //window.alert('Directions request failed due to ' + status);
                }
            });
            vm.isLoading = false;
        };



        function activate(callback) {
            if (!authService.isLoggedIn()) {
                RedirectionService, save('/on-demand/active-trip');
                $location.path('login');
            }
            else {

                divisionId = DivisionService.getDivisionId();
                if (divisionId != null && divisionId != undefined && divisionId != '') {
                    if (callback && typeof callback === "function")
                        callback();
                }
            }
            }

        function populateDivisionParameters() {
            options = {
                DivisionId: divisionId,
                OperatorId: operatorId
            };
            ConfigFactory.getDivisionParameters(divisionId)
                     .then(function (params) {
                         if (params) {
                             options.passengersLimit = params.PassengersLimit ? eval(params.PassengersLimit) : 5;
                             options.allowWillCall = params.AllowWillCall ? eval(params.AllowWillCall.toLowerCase()): false;
                             options.allowEquipment = params.AllowEquipment ? eval(params.AllowEquipment.toLowerCase()) : false;
                             options.isAdvancedReservation = params.AllowAdvancedReservation ? eval(params.AllowAdvancedReservation.toLowerCase()) : false;
                             options.allowMultipleSeatBooking = params.AllowMultipleSeatBooking ? eval(params.AllowMultipleSeatBooking.toLowerCase()) : false;
                             options.isWheelChair = params.HasWheelChair ? eval(params.HasWheelChair.toLowerCase()) : false;
                             options.isPCA = params.HasPersonalCareAssistant ? eval(params.HasPersonalCareAssistant.toLowerCase()) : false;
                             options.isServiceAnimal = params.HasServiceAnimal ? eval(params.HasServiceAnimal.toLowerCase()) : false;
                             options.isCompanion = params.HasCompanions ? eval(params.HasCompanions.toLowerCase()) : false;
							 options.companionsLimit = params.HasCompanions == false ? 0: params.CompanionsLimit ? eval(params.CompanionsLimit): 1;
                             options.allowCustomLocation = params.AllowCustomLocation ? eval(params.AllowCustomLocation.toLowerCase()) : false;
                             options.allowOnlySameDayAdvRes = params.AllowOnlySameDayAdvRes ? eval(params.AllowOnlySameDayAdvRes.toLowerCase()) : false;
                             options.promiseWindow = params.PromiseWindow ? eval(params.PromiseWindow) : 10;
                             options.showCancelOptions = params.CancelReasonRequired ? eval(params.CancelReasonRequired.toLowerCase()) : false;
                             options.reservationType = vm.reservationType;
                             options.allowFaring = params.AllowFaring ? eval(params.AllowFaring.toLowerCase()) : false;
                             options.allowLocationNotes = params.AllowLocationNotes ? eval(params.AllowLocationNotes) : false;
                             options.allowPassengerToCall = params.AllowPCD ? eval(params.AllowPCD.toLowerCase()) : false;
                             options.allowPassengerToSms = params.AllowPSD ? eval(params.AllowPSD.toLowerCase()) : false;
                             options.allowChildren = params.AllowChildren ? eval(params.AllowChildren) : false;
                             vm.reservationFormOptions = options;

                         	//extra options only needed by user reservations directive.
                             options.isPassenger = true;
                             options.isReadOnly = true;
                             options.autoRefresh = true;
                             options.batchDays = params.BatchDays ? eval(params.BatchDays) : 7;
                             options.minFromDays = params.MinFromDays ? eval(params.MinFromDays) : 30;
                             vm.reservationFormOptions = options;
                         }
                     }, function (response) {
                         UtilityFactory.toastError('Error', response.data.ReturnMessage);
                     });
            getMap();
            //getActiveTrip();
        }
        activate(populateDivisionParameters);

        $scope.$on('$destroy', function (event) {
            if (angular.isDefined(autoRefresh)) {
                $interval.cancel(autoRefresh);
                autoRefresh = undefined;
            }
        });

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/on-demand/activeTrip/active-trip.html';
        vm.ionicCustomClassName = '';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('PassengerMobileController', PassengerMobileController);

    PassengerMobileController.$inject = ['$location', '$uibModalInstance', 'settings', 'SettingsService', 'UtilityFactory'];

    function PassengerMobileController($location, $uibModalInstance, settings, SettingsService, UtilityFactory) {
        /* jshint validthis:true */
        var vm = this;
        vm.updateSettings = updateSettings;
        vm.cancel = cancel;
        vm.passengerId = settings.passengerId;
        vm.clientTelephone = '';
        vm.isUpdating = false;

        function cancel() {
            $uibModalInstance.close();
        };

        function updateSettings() {
            vm.isUpdating = true;
            if (vm.clientTelephone != "" && !isNaN(vm.clientTelephone) && vm.clientTelephone > 0) {
                var mobileNumber = "+1" + vm.clientTelephone;
                var settings = {
                    "PassengerId": vm.passengerId,
                    "ClientTelephone": mobileNumber
                }
                SettingsService
                   .updateSettings(settings)
               .then(function (response) {
                   vm.isUpdating = false;
                   closeModal(response);
               }, function (error) {
                   vm.isUpdating = false;
                   closeModal(false);
               });
            } else {
                vm.isUpdating = false; 
                UtilityFactory.toastError('Error', 'Please enter a valid number');
            }
        }

        var closeModal = function (response) {
            $uibModalInstance.close(response);
        }

        activate();

        function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('TripCancellationController', TripCancellationController);

    TripCancellationController.$inject = ['$uibModalInstance', 'tripToCancel', 'showCancelOptions', 'UtilityFactory', 'ScheduleService'];

    function TripCancellationController($uibModalInstance, tripToCancel, showCancelOptions, UtilityFactory, ScheduleService) {
        var vm = this;
        vm.tripToCancel = tripToCancel;
        vm.showCancelOptions = showCancelOptions;
        vm.cancelError = false;
        vm.disable = false;
        vm.reasonComment = '';

        vm.cancelTrip = function () {
            vm.disable = true;
            var request = {
                    'TripID': tripToCancel.tripId,
                    'PassengerID': tripToCancel.passengerId,
                    'OperationID': null
                };
            if (vm.showCancelOptions)
            {
                if(vm.cancelReason)
                {
                    request.CancelReasonId = vm.cancelReason.ReasonId;
                    request.CancelReasonText = vm.cancelReason.Reason;
                    if(vm.reasonComment.trim() != '')
                    {
                        request.CancelReasonText += ' - ' + vm.reasonComment.trim().replace(/[^a-zA-Z\d,@!\.\(\)\-\* \s]/g, '');
                        if(request.CancelReasonText.length > 250)
                        {
                            UtilityFactory.toastError("Error!", "Comment too long. Please make it shorter");
                            vm.disable = false;
                            return;
                        }
                    }
                    else if (vm.cancelReason.Reason === 'Other' && vm.reasonComment.trim() === '') {
                        UtilityFactory.toastError("Error!", "You selected Other, please type a reason.");
                        vm.disable = false;
                        return;
                    }
                }
                else {
                    UtilityFactory.toastError("Error!", "Please provide a reason for cancellation");
                    vm.disable = false;
                    return;
                }
            }
            
           ScheduleService.cancelpost(request).then(function (response) {
                if (response && response.data && response.data.status == 1) {
                    $uibModalInstance.close({ 'action': 'close', 'isCancel': true });
                } else {
                    vm.cancelError = true;
                }
                vm.disable = false;
            }, function (error) {
                vm.disable = false;
                vm.cancelError = true;
            });
        };

        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };

        this.MakeDisable = function () {
            if (vm.disable) {
                return true;
            }
            else {
                return false;
            }
        };

        vm.disallowSpecialChar = function()
        {
            if(vm.reasonComment.trim() !== '')
            {
                vm.reasonComment = vm.reasonComment.replace(/[^a-zA-Z\d,@!\.\(\)\-\* \s]/g, '');
            }
        }

        activate();
        function activate() {
            //first get parameter to check if trip cancel status is needed.
            //get trip cancellation statuses
          
            if (vm.showCancelOptions) {
                ScheduleService.getTripCancelStatusList().then(function (response) {
                    if (response.data.status == 1)
                        vm.cancelReasons = response.data.result;
                }, function (error) { });
            }
        }
    }
})();

(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.controller('FaringModalController', FaringModalController);

    FaringModalController.$inject = ['$scope', 'UtilityFactory', 'FaringService', '$log', '$uibModalInstance', 'DivisionService', 'ProfileService', 'reservationRequest', 'serviceDate'];

    function FaringModalController($scope, UtilityFactory, FaringService, $log, $uibModalInstance, DivisionService, ProfileService, reservationRequest, serviceDate ) {
        $scope.cancel = cancel;
        $scope.saveCompanions = saveCompanions;
        $scope.resetCompanions = resetCompanions;
        $scope.editCompanions = editCompanions;
        $scope.increaseCount = increaseCount;
        $scope.decreaseCount = decreaseCount;
        $scope.bookTrip = bookTrip;
        $scope.isHidden = true;
        $scope.locationNotes = { 'from': '', 'to': '' }

        $scope.maxCount = $scope.$parent.options.isCompanion ? $scope.$parent.options.companionsLimit : 0;
        $scope.companionCount = 0;
        $scope.reservationRequest = reservationRequest;  
        $scope.serviceDate = serviceDate.format('YYYY-MM-DD');
        $scope.companionFare = 0;
        $scope.baseFare = undefined;
        $scope.maxCompanionCountWarning = false;
        var lastFareTypes = undefined;
        var lastCompanionFare = 0;
        var lastCompanionCount = 0;
        var reservationTime = undefined;
        $scope.fareTypes = [];

        function increaseCount(index)
        {
            // Added check to make sure the user does not add more than $scope.maxCount
            if ($scope.companionCount < $scope.maxCount) {
                $scope.fareTypes[index].NumberOfPassengers++;
                $scope.companionFare = $scope.companionFare + $scope.fareTypes[index].Fare;
                $scope.companionCount++;
                $scope.maxCompanionCountWarning = false;
            } else {
                $scope.maxCompanionCountWarning = true;
            }

        }
        function decreaseCount(index) {
            // Added check to make sure the user does not remove less than 0.
            if ($scope.fareTypes[index].NumberOfPassengers > 0) {
                $scope.fareTypes[index].NumberOfPassengers--;
                $scope.companionFare = $scope.companionFare - $scope.fareTypes[index].Fare;
                $scope.companionCount--;
                $scope.maxCompanionCountWarning = false;
            }

        }
      
       
        var fromLocation = reservationRequest.fromLocation;
        var toLocation = reservationRequest.toLocation;

        function cancel() {
            $scope.reservationRequest.IsWheelChair = false;
            $scope.reservationRequest.IsPCA = false;
            $scope.reservationRequest.IsServiceAnimal = false;
            $scope.reservationRequest.TripFares = [];
            $scope.reservationRequest.BaseFare = undefined;
            $scope.maxCompanionCountWarning = false;
            $uibModalInstance.close($scope.reservationRequest);

            //reset companions and accessibility
        };
        
        
        function saveCompanions()
        {
            $scope.showCompanionSelection = !$scope.showCompanionSelection;
        }
        function resetCompanions()
        {
           
            $scope.fareTypes = angular.copy(lastFareTypes);
            //reset wheelchairs etc.
            $scope.companionFare = lastCompanionFare;
            $scope.companionCount = lastCompanionCount;
            $scope.showCompanionSelection = !$scope.showCompanionSelection;
            $scope.maxCompanionCountWarning = false;
            //companion object should be reset to 0 count
        }
        function editCompanions()
        {
            lastFareTypes = angular.copy($scope.fareTypes);
            lastCompanionFare = $scope.companionFare;
            lastCompanionCount = $scope.companionCount;
            $scope.showCompanionSelection = !$scope.showCompanionSelection;
        }

        function bookTrip()
        {
            if ($scope.baseFare == undefined)
            {
                UtilityFactory.toastError('Error', 'Can not get faring information. Please try again later.');
                return;
            }
            if ($scope.$parent.options.allowLocationNotes) {
               
                $scope.reservationRequest.locationNotes.from = $scope.locationNotes.from;
                $scope.reservationRequest.locationNotes.to = $scope.locationNotes.to;
            }
            $scope.reservationRequest.TripFares = $scope.fareTypes;
            $scope.reservationRequest.TotalTripFare = $scope.baseFare + $scope.companionFare;
            $scope.reservationRequest.CompanionsCount = $scope.companionCount;
            $scope.reservationRequest.BaseFare = $scope.baseFare;
            $scope.$parent.saveReservation($scope.reservationRequest);
            $uibModalInstance.close();
        }
        function getFares() {
            $scope.requestedTime = reservationTime.format('MM/DD/YYYY hh:mm A');
            if ($scope.reservationRequest.TripFares != null && $scope.reservationRequest.TripFares.length > 0) {
                $scope.fareTypes = $scope.reservationRequest.TripFares;
                $scope.baseFare = $scope.reservationRequest.BaseFare;
                angular.forEach($scope.fareTypes, function (value, key) {
                    if (value.NumberOfPassengers > 0) {
                        $scope.companionCount += value.NumberOfPassengers;
                        $scope.companionFare += (value.Fare * value.NumberOfPassengers);
                    }
                });
                if ($scope.reservationRequest.locationNotes && $scope.reservationRequest.locationNotes.from != '')
                {
                    $scope.locationNotes.from = $scope.reservationRequest.locationNotes.from;
                }
                if ($scope.reservationRequest.locationNotes && $scope.reservationRequest.locationNotes.to != '') {
                    $scope.locationNotes.to = $scope.reservationRequest.locationNotes.to;
                }
                return;
            }

            $scope.fareTypes = [];

            FaringService.GetZoneFares($scope.divisionId, $scope.reservationRequest.fromZone, $scope.reservationRequest.toZone, reservationTime.format("YYYY-MM-DD HHmmss"), $scope.serviceDate)
            .then(function (response) {
                if(response.data.status == 1)
                {
                    var fares = response.data.result;
                    angular.forEach(fares, function(value, key)
                    {
                        $scope.fareTypes.push({ PassengerFareTypeId: value.PassengerFareTypeId, NumberOfPassengers: 0, Name: value.FareType, Fare: value.Fare, ZoneFareId: value.ZoneFareId });
                    });
                    setBaseFare(fares);
                }
                else {
                    $scope.baseFare = undefined;
                }
            }, function error(err) {
                UtilityFactory.toastError('Error', 'Can not get faring information. Please try again later.');
                $scope.baseFare = undefined;
            });
        }

        
        activate(getFares);
        function setDefaultFare(fares)
        {
            for(var i = 0; i < fares.length; i++)
            {
                if (fares[i].IsDefault) {
                    $scope.baseFare = fares[i].Fare;
                    return;
                }
            }
            $scope.baseFare = undefined;
        }

        function setBaseFare(fares)
        {
            //default fare is set, if fare is found it will over write it
            setDefaultFare(fares);
            ProfileService.GetPassengerAge($scope.$parent.passenger.Id)
                .then(function (response){
                    if(response.data.status == 1)
                    {
                        var age = response.data.result;
                       
                            for (var i = 0; i < fares.length; i++) {

                                if (fares[i].FromAge == undefined)
                                    continue;
                                if (age >= fares[i].FromAge && (fares[i].ToAge == undefined || age <= fares[i].ToAge)) {
                                    $scope.baseFare = fares[i].Fare;
                                    break;
                                }

                            }
                        
                    }
                    
                }, function (err) {
                   
                });
                
        }

        function activate(callback) {
         
            $scope.divisionId = DivisionService.getDivisionId();
            if ($scope.divisionId != null && $scope.divisionId != undefined && $scope.divisionId != '') {
                
                if ($scope.reservationRequest.reservationType != $scope.$parent.reservationTypeEnum.ASAP)
                    reservationTime = $scope.$parent.getReservationDateTime($scope.reservationRequest);
                else
                    reservationTime = moment.tz(DivisionService.getTimeZone());
                DivisionService.getServiceDateByDivisionTime($scope.divisionId, reservationTime.format("YYYY-MM-DD HHmmss"))
                .then(function (response) {
                    $scope.serviceDate = moment(response.data.result).format("YYYY-MM-DD");
                    if (callback && typeof callback === "function")
                        callback();
                }, function (error) {
                    UtilityFactory.toastError('Error', 'Can not get faring information. Please try again later.');
                    $scope.baseFare = undefined;
                });
                }
                else
                    $location.path('dashboard/');
           
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('DashboardController', DashboardController);

    DashboardController.$inject = [
        '$scope',
        '$stateParams',
        '$location',
        '$uibModal',
        '$rootScope',        
        '$interval',
        'DivisionService',
        'ReservationService',
        'ScheduleService',
        'authService',
        'UtilityFactory',        
        'ConfigFactory',
        'env',
        'PageService',
        'OneMvServices'
    ];

    function DashboardController($scope, $stateParams, $location, $uibModal, $rootScope, $interval, DivisionService,
        ReservationService, ScheduleService, authService, UtilityFactory,ConfigFactory, env, PageService,OneMvServices) {


        var vm = this;
        vm.userId = '';
        vm.PageService = PageService;
        vm.PageService.setTitle('Dashboard');
        vm.isUserLoggedIn = authService.isLoggedIn();
        vm.passengerReservations = [];
        vm.todaysTrips = [];
        vm.allowedServices = [];
        vm.loadingServices = false;
        vm.allowFaring = false;
        vm.passengerId = '';
        var autoRefresh = undefined;
        vm.currentYear = new Date().getFullYear();
        vm.showDrt = false;
        vm.showCommuter = false;        
        vm.commuterInfo = OneMvServices.getCommuterInfo();   
        vm.drtInfo = OneMvServices.getDrtInfo();

        var options = {};

        vm.login = function () {
            $location.path('/login');
        }

        vm.menuClass = function () {
            if (vm.allowedServices
                && vm.allowedServices.length > 0) {
                var elCount = vm.allowedServices.length;
                return 'col-sm-' + 12 / elCount;
            }
            return 'col-sm-12';
        }

        function populateDivisionParameters(callback) {
            var divisionId = DivisionService.getDivisionId();
            ConfigFactory.getDivisionParameters(divisionId)
                        .then(function (params) {
                            if (params) {
                                options.promiseWindow = params.PromiseWindow ? eval(params.PromiseWindow) : 10;
                                options.showCancelOptions = params.CancelReasonRequired ? eval(params.CancelReasonRequired.toLowerCase()) : false;
                                options.allowLocationNotes = params.AllowLocationNotes ? eval(params.AllowLocationNotes.toLowerCase()) : false;
                                vm.allowFaring = params.AllowFaring ? eval(params.AllowFaring.toLowerCase()) : false;
                                options.allowChildren = params.AllowChildren ? eval(params.AllowChildren) : false;
                                options.allowMultipleSeatBooking = params.AllowMultipleSeatBooking ? eval(params.AllowMultipleSeatBooking.toLowerCase()) : false;
                                fetchTripsAndReservations(callback);
                            }
                        }, function (response) {
                            UtilityFactory.toastError('Error', response.data.ReturnMessage);
                        });
        }

        var getPassengerTrips = function (callback) {
            ScheduleService.tripsForServiceDate(vm.passengerId)
             .then(function (response) {
                 if (response.data.status == 1 && response.data.result != null) {
                     vm.todaysTrips = response.data.result;
                     var promiseWindow = options.promiseWindow;
                     vm.todaysTrips.sort(function (a, b) {
                         return new Date(a.schedPickupTime).getTime() - new Date(b.schedPickupTime).getTime();
                     });
                     for (var i = 0; i < vm.todaysTrips.length; i++) {
                         vm.serviceDate = vm.todaysTrips[i].serviceDate;
                         if (vm.todaysTrips[i].estimatedPickupTime) {
                             //var pickupTime = vm.todaysTrips[i].schedPickupTime;
                             //var promiseWindowsEndTime = DateFactory.getPromiseWindowEndTime(pickupTime, promiseWindow);
                             //vm.todaysTrips[i].promiseWindowStartTime = $filter('date')(pickupTime, 'h:mm a');
                             //vm.todaysTrips[i].promiseWindowEndTime = $filter('date')(promiseWindowsEndTime, 'h:mm a');

                             var startPickupWindowTime = new moment(vm.todaysTrips[i].startPickupWindowTime);
                             var endPickupWindowTime = new moment(vm.todaysTrips[i].endPickupWindowTime);
                             vm.todaysTrips[i].promiseWindowStartTime = startPickupWindowTime.format('h:mm A');
                             vm.todaysTrips[i].promiseWindowEndTime = endPickupWindowTime.format('h:mm A');
                         }
                     }

                 }
                 if (!angular.isUndefined(callback) && callback != null)
                     callback();
             }, function (error) {
             });
        };
       
        //vm.allowCancel = function (trip) {
        //    return trip.Status !== 'Reserved';
        //}     

        var getPassengerReservationsForToday = function () {
            ReservationService.getPassengerReservationsForToday(vm.passengerId)
            .then(function (response) {
                if (response && response.data && response.data.status == 1 && response.data.result.reservations) {
                    vm.passengerReservations = response.data.result.reservations;                    
                }
                else {
                    vm.passengerReservations = [];
                }
            }, function (err) {
                if (err.status !== 401) {
                    UtilityFactory.toastError("Error!", "'Sorry! Could not load your Reservation!'");
                }
            });

        };
       
        function setAutoRefresh() {
            if (authService.isLoggedIn()) {
                autoRefresh = $interval(function () {
                    fetchTripsAndReservations();
                }, 30000);
            }
        }

        var activate = function () {
            vm.loadingServices = true;

            var alias = aliasNotFoundInRoute()
                ? DivisionService.getDivisionAlias()
                : $stateParams.division;

            DivisionService
                .setDivision(alias)
                .then(handleSuccess, handleFailure);     
        };

        function aliasNotFoundInRoute() {
            return angular.isUndefined($stateParams.division) 
                        || $stateParams.division === null 
                        || $stateParams.division.trim() === '';
        }

        function handleSuccess(response) {
            if (response.data.status == 1) {
                vm.allowedServices = sort(response.data.result.DivisionServices);
                vm.showCommuter = !angular.isUndefined(vm.commuterInfo);
                vm.showDrt = !angular.isUndefined(vm.drtInfo);
                if (vm.isUserLoggedIn)
                    fetchUserDetails();
                $rootScope.divisionName = (response.data.result.DivisionName ? response.data.result.DivisionName : 'One Portal');
                $rootScope.supportPhoneNumber = (response.data.result.SupportPhoneNumber ? response.data.result.SupportPhoneNumber : '');
                vm.loadingServices = false;

                //Sets the page name and headline from the database.
                
                vm.PageService.setHeadline($rootScope.divisionName);   
            }
            else {
                $location.path('division');
            }
        }

        function handleFailure(error) {
            vm.loadingServices = false;
            $location.path('division');
        }

        var sort = function (services) {
            return services.sort(function (a, b) {
                return parseInt(a.DisplayOrder) - parseInt(b.DisplayOrder);
            });
        }

        var fetchUserDetails = function () {
            vm.userId = authService.authentication.userId;
            vm.passengerId = authService.authentication.passengerId;
            populateDivisionParameters(setAutoRefresh);
        }


        vm.showStopsMap = function (inc) {
            var modalGetMap = $uibModal.open({
                animation: true,
                windowClass: 'map-modal',
                templateUrl: 'app/modules/commuter/modals/reservation-map-modal/reservation-map.html',
                controller: 'ReservationMapController as vm',
                backdrop: 'static',
                resolve: {
                    reservation_stops: function () {
                        return inc;
                    }
                }
            });

            modalGetMap.result.then(function (isDone) {
                if (isDone) {
                }

            }, function () {

            });
        };



        var fetchTripsAndReservations = function () {

            if (vm.showCommuter) getPassengerReservationsForToday();
            if (vm.showDrt) {
				// get all DRT trips of interest to the passenger
            	getPassengerTrips();
            	// get current trip
            	ScheduleService.getlastripdetails(vm.passengerId);
            }
        };


        $scope.$on('$destroy', function (event) {
            stopAutoRefresh();
        });


        var stopAutoRefresh = function () {
            if (angular.isDefined(autoRefresh)) {
                $interval.cancel(autoRefresh);
                autoRefresh = undefined;
            }            
        }

        $scope.$on('divisionChanged', stopAutoRefresh);

        vm.navigate = function (path, serviceType, serviceId) {
            //$rootScope.$broadcast(serviceId);
            if (serviceType === 'external')
                if ($('body').hasClass('platform-cordova')) {
                    // This is here for Ionic framework.
                    window.open(path, '_system', '');
                } else {
                    window.location = path;
                }
                
            else if (serviceType === 'internal')
                $location.path(path);
        }
      

        vm.showCommuterTrip = function (trip) {
            var commuterTripModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/shared/trips/commuter-trip-modal.html',
                controller: 'CommuterTripModalController as vm',
                size: '-fs',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    tripId: trip.id
                }
            });

            commuterTripModal.result.then(function (response) {
                if (response.cancelled || response.isModified) {
                    getPassengerReservationsForToday();
                }
            });

        }

        vm.showDrtTrip = function (trip) {
            var _tripModalRequest = {
                passengerTrip: trip,
                options: options,
                serviceDate: vm.serviceDate
            }
            var drtTripModal = $uibModal.open({
                templateUrl: 'app/modules/shared/trips/drt-trip-modal.html',
                controller: 'TripDetailsModalController as vm',
                size: '-fs',
                resolve: {
                    tripModalRequest: _tripModalRequest
                }
            });

            drtTripModal.result.then(function (result) {
                if (result && result.action === 'cancel') {
                    cancelTrip(trip);
                }
            });

        }


        function cancelTrip(trip) {
            var tripToCancel = {
                'tripId': trip.TripId,
                'passengerId': trip.PassengerId,
                'from': trip.startName,
                'to': trip.endName,
                'scheduledTime': trip.schedPickupTime
            };

            var modalCancelTrip = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/on-demand/activeTrip/trip-cancellation-prompt.html',
                controller: 'TripCancellationController as vm',
                size: '-fs',
                resolve: {
                    tripToCancel: function () {
                        return tripToCancel;
                    },
                    showCancelOptions: options.showCancelOptions

                }
            });

            modalCancelTrip.result.then(function (result) {
                if (result.isCancel) {
                    UtilityFactory.toastSuccess("Success!", "Trip cancelled");
                    getPassengerTrips();
                }
                else
                    UtilityFactory.toastError("Error!", "Unable to cancel the trip.");
            });
        };


        activate();

        // Ionic parameters
        if (env.ionic) {
            vm.appVersion = env.ionic.appVersion;
            vm.appVersion += env.ionic.softwareVersion == null ? '' : ' ' + env.ionic.softwareVersion;
            vm.appVersion += env.ionic.environment == null ? '' : '.' + env.ionic.environment;
            vm.appVersion += env.ionic.localEnvironment == null ? '' : '.' + env.ionic.localEnvironment;

        } else {
            vm.appVersion = '';
        }
        vm.refresh = function (refresher) {
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
        }        

    }
})();

(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.controller('DisplayScheduledTripController', DisplayTripModalController);

    DisplayTripModalController.$inject = ['$scope', '$http', 'UtilityFactory', 'DateFactory',
        '$log', '$uibModalInstance', 'trip', 'ConfigFactory','options'];

    function DisplayTripModalController($scope, $http, UtilityFactory, DateFactory,
        $log, $uibModalInstance, trip,ConfigFactory, options) {

        var vm = this;
        vm.trip = trip;

        var systemParams = options;

        vm.allowFaring = systemParams.allowFaring;
        vm.allowChildren = systemParams.allowChildren;
        vm.allowLocationNotes = systemParams.allowLocationNotes; 

        var startTime = new moment(vm.trip.ScheduledPickupTime);
        vm.trip.promiseWindowStartTime = startTime.format('h:mm A');
        if (moment.isMoment(startTime))
            vm.trip.promiseWindowEndTime = startTime.add(parseInt(systemParams.promiseWindow), 'm').format('h:mm A');
        vm.cancel = cancel;
        vm.cancelTrip = cancelTrip;
        function cancel() {
            $uibModalInstance.close();
        };

        function cancelTrip(tripId)
        {

        }
    }
})();
(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.factory('FaringService', FaringService);
    FaringService.$inject = ['$http', '$q', 'ConfigFactory', 'authService'];

    function FaringService($http, $q, ConfigFactory, authService) {
        var service = {
            GetZoneIDForLocation: getZoneIDForLocation,
            GetZoneFares: getZoneFares
        };
        return service;

        function getZoneFares(divisionId, fromZone, toZone, reservationTime, serviceDate)
        {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    //get the base url from config.
                    var _url = oneMVURL + "faring/" + divisionId + "/" + fromZone + "/" + toZone + "/" + reservationTime + "/" + serviceDate;
                    $http({
                        method: 'GET',
                        url: _url
                    }).then(function successCallback(response) {
                        //if (response.data.status == 1) {
                        defer.resolve(response);
                        //} else {
                        //  defer.reject(response.data.result);
                        //}
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
            
        }
        function getZoneIDForLocation(latitude, longitude, divisionId)
        {
            //should have method in secured api 
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    //get the base url from config.
                    var _url = oneMVURL + "faring/getZoneIdForLocation/" + divisionId + "/" + latitude + "/" + longitude + "/";
                    $http({
                        method: 'GET',
                        url: _url
                    }).then(function successCallback(response) {
                        //if (response.data.status == 1) {
                        defer.resolve(response);
                        //} else {
                        //  defer.reject(response.data.result);
                        //}
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }
    }
})();
(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.factory('FeedbackService', FeedbackService);
    FeedbackService.$inject = ['$http', '$q', 'ConfigFactory','authService','DivisionService'];

    function FeedbackService($http, $q, ConfigFactory, authService,DivisionService) {
        var service = {
            SaveFeedback: saveFeedback,
            addCommuterFeedback : addCommuterFeedback
        };
        return service;

        function saveFeedback(feedbackRequest) {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    //get the base url from config.
                    var _url = oneMVURL + "trip/" + authService.authentication.passengerId + "/feedback/save";
                    $http({
                        method: 'POST',
                        url: _url,
                        data: JSON.stringify(feedbackRequest),
                    }).then(function successCallback(response) {
                        //if (response.data.status == 1) {
                        defer.resolve(response);
                        //} else {
                        //  defer.reject(response.data.result);
                        //}
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }

        function addCommuterFeedback(feedbackRequest, reservationId) {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    var _url = oneMVURL + "commuter/" + DivisionService.getDivisionId() +
                        "/reservations/feedback/" + authService.authentication.passengerId + "/" + reservationId;
                    $http({
                        method: 'POST',
                        url: _url,
                        data: feedbackRequest,
                    }).then(function successCallback(response) {
                        defer.resolve(response);
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('FixedRoutesController', FixedRoutesController);

    FixedRoutesController.$inject = [ '$uibModalInstance', 'upcomingSchedules', 'fromStopName','OneMvServices'];

    function FixedRoutesController( $uibModalInstance, upcomingSchedules, fromStopName,OneMvServices) {
        /* jshint validthis:true */
        var vm = this;
        vm.upcomingSchedules = upcomingSchedules;
        vm.fromStopName = fromStopName;
        vm.cancel = cancel;
        vm.frInfo = OneMvServices.getFixedRouteInfo();

        function cancel() {
            $uibModalInstance.close();
        };

        activate();

        function activate() { }
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .directive('locationSearchDirective', locationSearchDirective);

    locationSearchDirective.$inject = ['LocationFactory', '$rootScope', '$q', 'ScheduleService', 'UtilityFactory', 'authService', 'DivisionService'];

    function locationSearchDirective(LocationFactory, $rootScope, $q, ScheduleService, UtilityFactory, authService, DivisionService) {
        // Usage:
        //     <Location-search-directive></Location-search-directive>
        // Creates:
        // 
        //locationfilter=0 means Show Locations that are Manually added to the oneMV Database(for now)
        //locationfilter=1 means Show Locations both that are Manually added to the oneMV Database and also from the google api(for now)
        //locationfilter is dynamic enough to be expanded in future

        var directive = {
            link: link,
            controller: controller,
            replace: true,
            restrict: 'E',
            scope: {
                onLocationSelected: '&', minlength: '=minlength', locationfilter: '@',
                labelname: '=labelname', selectedlocation: '=selectedlocation', passengerId: '@', googleonly: '@'                
            },
            templateUrl: 'app/modules/on-demand/reservations/locationSearch.html'
        };
        return directive;

        function link(scope, element, attrs) {
            scope.type = attrs.labelname;
		}

        function controller($scope) {
            $scope.data = LocationFactory.getLocations;
            $scope.reservationRequest = {};
            $scope.initialValue = '';
        
            $scope.resultsAPI = function (userInputString, timeoutPromise) {
                //var defer = $q.defer();

            	return $scope.data(userInputString, $scope.locationfilter, $scope.divisionId, $scope.passengerId, $scope.googleonly, { timeout: timeoutPromise })
                //.then(function (result) {
                    //var filteredResult = result.data;
                    //if ($scope.selectedlocation) {
                        //var filteredResult = result.data.filter(function (location) {
                        //    return location.loc.LocationId != $scope.selectedlocation;
                        //});
                    //}
                  //  defer.resolve(filteredResult);
                //});
                //return defer.promise;

            }
            //Set selected location from Google Api
            $scope.selectedGoogleLocationFrom = function (address) {
                if (address != null) {
                    var add = "";
                    for (var i in address.address_components) {
                        if (address.address_components[i].types[0] == "street_number") {
                            add = add + " " + address.address_components[i].short_name;
                        }
                        else if (address.address_components[i].types[0] == "route") {
                            add = add + " " + address.address_components[i].short_name;
                        }
                        else if (address.address_components[i].types[0] == "locality") {
                            $scope.reservationRequest.City = address.address_components[i].short_name;
                        }
                        else if (address.address_components[i].types[0] == "administrative_area_level_1") {
                            $scope.reservationRequest.State = address.address_components[i].short_name;
                        }
                        else if (address.address_components[i].types[0] == "postal_code") {
                            $scope.reservationRequest.ZipCode = address.address_components[i].short_name;
                        }
                        else {
                            //do nothing
                        }
                    }
                    $scope.reservationRequest.Address1 = add;
                    $scope.reservationRequest.From = address.formatted_address;
                    $scope.reservationRequest.Latitude = address.geometry.location.lat;
                    $scope.reservationRequest.Longitude = address.geometry.location.lng;
                    $scope.reservationRequest.GooglePlaceId = address.place_id;
                }
            }
            $scope.onLocationSelectedNotify = function (Location) {
                $scope.reservationRequest = {};
                if (Location != undefined) {
                    var obj = Location.originalObject;
                    if (obj != null) {
                        if (obj.isGoogleLocation) {
                            $scope.selectedGoogleLocationFrom(obj.loc);
                        }
                        else {
                            $scope.reservationRequest = obj.loc;
                        }
                    }
                }
                if (typeof ($scope.onLocationSelected) == 'function') {
                    $scope.onLocationSelected({ location: $scope.reservationRequest });
                }
            };

            function getMapCenter() {
                ScheduleService.getServiceAreaLocation($scope.divisionId).then(function (response) {
                    if (response.data !== null &&  response.data.result != null) {
                        $scope.addressRest = response.data.result.Address;
                        LocationFactory.setadd($scope.addressRest);
                    }
                }, function (errormsg) {
                    UtilityFactory.toastError('Error', '');
                });
            };

            function activate(callback){
                if ($scope.addressRest == undefined || $scope.addressRest == '') {
                        $scope.divisionId = DivisionService.getDivisionId();
                        if ($scope.divisionId != null && $scope.divisionId != undefined && $scope.divisionId != '') {
                            if (callback && typeof callback === "function")
                                callback();
                        }                    
                }           
            }

            $scope.$on('closestLocation', function (event, location) {
                if ($scope.type === 'FROM')
                    $scope.initialValue = location.title;
            });
            
            $scope.$on('initialLocationValue', function (event, value) {
            	$scope.initialValue = value;
            });

            $scope.$on('homeLocationDisable', function (event, value) {
            	if ($scope.type != 'FROM') {
            		$scope.disableInput = value;
            	}
            });

            $scope.$on('homeLocationText', function (event, text) {
            	if ($scope.type != 'FROM') {
            		$scope.initialValue = text;
            	}
            });

            $scope.$on('toggle-from-address', function (event, value) {
                if ($scope.type == 'FROM') {
                    $scope.disableInput = !value;
                }
            });

            activate(getMapCenter);
		}
    }
})();
(function () { 

    'use strict';

    angular
        .module('oneMVApp')
        .factory('locationService', locationService);
    locationService.$inject = ['$http', '$q', 'ConfigFactory'];

function locationService($http, $q, ConfigFactory) {

    var service = {
        saveLocation: saveLocation,
        isAddressInService: isAddressInService,
        getLocationTypes: getLocationTypes,
        getReverseGeoCode: getReverseGeoCode,
        getGeoCode: getGeoCode,
        getLocationData: getLocationData,
        editManualLocation: editManualLocation
    };
    return service;



    function saveLocation(saveLocation) {
        console.log(saveLocation);
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'Trip/SaveLocation';
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify(saveLocation),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    function isAddressInService(Address) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'Trip/IsAddressInService';
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify(Address),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    function getLocationTypes() {
        var deferred = $q.defer();
        var serviceUrl = '../ServiceArea/GetLocationTypes';
        $http({
            method: 'GET',
            'url': serviceUrl,
            ContentType: "application/json; charset=utf-8"
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    function getReverseGeoCode(latlng) {
        var deferred = $q.defer();
        var serviceUrl = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latlng;
        $http.get('//maps.googleapis.com/maps/api/geocode/json', {
            params: {
                latlng: latlng,
                sensor: true
            },
            withCredentials: false
            //$http({
            //    method: 'GET',
            //    'url': serviceUrl,
            //    ContentType: "application/json; charset=utf-8"
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    function getGeoCode(address) {
        var deferred = $q.defer();
        var serviceUrl = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address;
        $http.get('//maps.googleapis.com/maps/api/geocode/json', {
            params: {
                address: address,
                sensor: true
            },
            withCredentials: false
            //$http({
            //    method: 'GET',
            //    'url': serviceUrl,
            //    ContentType: "application/json; charset=utf-8"
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };
    function getLocationData(DivisionId) {
        var deferred = $q.defer();
        var serviceUrl = '';
        // if (Locationid > 0)
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                serviceUrl = oneMVURL + 'Trip/GetManualLocations/?DivisionId=' + DivisionId;
                //else
                //    serviceUrl = '../ServiceArea/GetManualLocations';
                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });

        return deferred.promise;
    };

    function editManualLocation(locationId) {
        var deferred = $q.defer();
        var serviceUrl = '';
        // if (Locationid > 0)
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                serviceUrl = oneMVURL + 'Trip/EditManualLocation/?locationId=' + locationId;
                //else
                //    serviceUrl = '../ServiceArea/GetManualLocations';
                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });

        return deferred.promise;
    };


}


})();
(function () {
    //debugger;

    'use strict';
    angular.module('oneMVApp').factory('MobilityAidsService', MobilityAidsService);
    MobilityAidsService.$inject = ['$http', '$q', 'ConfigFactory'];

    function MobilityAidsService($http, $q, ConfigFactory) {

        var service = {
            getDivisionAids: getDivisionAids,
            saveDivisionAids: saveDivisionAids
        }
        return service;

        function getDivisionAids(divisionId) {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    var _url = oneMVURL + "MobilityAids/" + divisionId + "?rnd=" + new Date().getTime();
                    $http({
                        method: 'GET',
                        url: _url
                    }).then(function successCallback(response) {
                        if (response.data.status == 1) {
                            defer.resolve(response.data.result);
                        } else {
                            defer.reject(response.data.result);
                        }
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }

        function saveDivisionAids(divisionId, aids) {
            var defer = $q.defer();
            ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
                if (oneMVURL && oneMVURL != "") {
                    var _url = oneMVURL + "MobilityAids/" + divisionId + "?rnd=" + new Date().getTime();
                    $http({
                        method: 'POST',
                        data: aids,
                        url: _url
                    }).then(function successCallback(response) {
                        if (response.data.status == 1) {
                            defer.resolve(response.data.result);
                        } else {
                            defer.reject(response.data.result);
                        }
                    }, function errorCallback(response) {
                        defer.reject(response);
                    });
                }
            });
            return defer.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('NegotiationController', NegotiationController);

    NegotiationController.$inject = ['$uibModalInstance', '$scope', '$filter','authService','DivisionService',
        'TripNegotiationLogService', 'DateFactory', 'negotiationRequest'];

    function NegotiationController($uibModalInstance, $scope, $filter,authService, DivisionService,
        TripNegotiationLogService, DateFactory, negotiationRequest) {
        var vm = this;

        vm.proposedSlots = negotiationRequest.proposedSlots;
        vm.selectedSlot = '';
        vm.reservation = angular.copy(negotiationRequest.reservationRequest);
        vm.selectedReservationType = '';

        var userId = 0;
        var tripRequestId = 0;
        var serviceDate = negotiationRequest.serviceDate;
        var promiseWindow = 0;

        //forced to use this as pax and ops portal reservation objects are not in sync.        
        var reservationTypeEnum = {
            1: "ASAP",
            2: "ADVANCED",
            3: "APPOINTMENT"
        };

        vm.toPromiseWindow = function (proposedSlot) {

            var startTime = $filter('date')(proposedSlot.ProposedStartWindow, 'h:mm a');
            //var endTime = DateFactory.getPromiseWindowEndTime(input, promiseWindow);
            var endTime = $filter('date')(proposedSlot.ProposedEndWindow, 'h:mm a');

            return startTime + ' - ' + endTime;
        };

        var toThirtyThreeHourClock = function (input) {
            return DateFactory.getCustomTime(input, serviceDate);
        };


        var activate = function () {
            tripRequestId = negotiationRequest.tripRequestId;

            userId = authService.authentication.userId;
            promiseWindow = DivisionService.getSystemParameters().PromiseWindow;

            vm.selectedReservationType = reservationTypeEnum[vm.reservation.reservationType];

        }

        var closeModal = function (response) {
            $uibModalInstance.close(response);
        }

        vm.reject = function () {

            TripNegotiationLogService
                    .addRejectionLog(tripRequestId, userId);

            closeModal({
                canNegotiate: false
            });
        };


        vm.close = function () {
            closeModal({
                canNegotiate: false
            });
        }

        vm.accept = function () {
            if (vm.selectedSlot != '') {
                var negotiationLogId = getNegotiatedLogId();

                TripNegotiationLogService
                    .addApprovalLog(tripRequestId, negotiationLogId, userId);

                closeModal(
                    {
                        canNegotiate: true,
                        selectedTime: vm.selectedSlot,
                        tripRequestId: tripRequestId,
                        negotiationLogId: negotiationLogId
                    });
            }
        }

        function getNegotiatedLogId() {
            if (vm.selectedSlot != '') {
                for (var i = 0; i < vm.proposedSlots.length; i++) {
                    if (vm.proposedSlots[i].ProposedDate == vm.selectedSlot)
                        return vm.proposedSlots[i].id;
                }
            }
            return -1;
        }

        activate();
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ReservationErrorModalController', ReservationErrorModalController);

    ReservationErrorModalController.$inject = ['$uibModalInstance', 'message'];

    function ReservationErrorModalController($uibModalInstance, message) {
        var vm = this;

        vm.msg = message.message.ErrorMessage;
        vm.header = message.header || "Information" ;
        vm.cancel = cancel;

        function cancel() {
            $uibModalInstance.close();
        };
    }
})();



(function () {
    'use strict';

    angular.module('oneMVApp')
    .directive('reservationFormDirective', reservationFormDirective);

    reservationFormDirective.$inject = ['$window', 'LocationFactory', 'UtilityFactory', 'ScheduleService',
        'DateFactory','$q', 'DivisionService', 'GeoLocationService', 'StopService', 'FaringService', '$timeout',
        'ProfileService','OneMvServices'];

    function reservationFormDirective($window, LocationFactory,  UtilityFactory, ScheduleService,
        DateFactory, $q, DivisionService, GeoLocationService, StopService, FaringService, $timeout,
        ProfileService,OneMvServices) {
        // Usage:
        //     <reservation-form-directive></reservation-form-directive>
        // Creates:
        //      An instance of the reservation form which can used to book a reservation.
        //      There are three variations of this form controlled by the variable 'reservationType'
        //      1. reservationType = 'past'
        //         This is the form which can be used when the operator wants to reconcile previous reservations
        //      2. reservationType = 'current'
        //         This is the form which can be used for booking a current reservation
        //      3. reservationType = 'future'
        //         This is the form which can be used to book future reservations
        var directive = {
            link: link,
            controller: controller,
            restrict: 'E',
            scope: { passenger: '<', options: '<', mode: '@', notifySucessfullReservation: '=onReservationSuccess' },
            replace: true,
            templateUrl: 'app/modules/on-demand/reservations/passengerReservationForm.html'
        };
        return directive;

        function link(scope, element, attrs) {
            // If scope.$watch('option') loads late, IE in a slow connection, then the watch NEVER fires.
            // This is here to run scope.activate() if on load, scope.options exists.
            if (scope.isLoading && scope.options) {
                scope.activate();
            };
            scope.$watch('options', function (newValue, oldValue) {
                if (newValue != oldValue && newValue) {
                    //if (typeof newValue == "string") {
                    //    scope.options = JSON.parse(newValue);
                    //}
                    //else if (typeof newValue == "object")
                    scope.options = newValue;

                    scope.activate();
                };
            });


            //scope.$watch('passenger', function (newValue, oldValue) {
            //    if (newValue != oldValue && newValue) {
            //        //if (typeof newValue == "string") {
            //        //    scope.passenger = JSON.parse(newValue);
            //        //}
            //        //else if (typeof newValue == "object") {
            //            scope.passenger = newValue;
            //        //}
            //        //if (newValue != oldValue)
            //            scope.resetForm();
            //    };
            //});
        }

        function controller($scope,$uibModal) {
            /*Methods exposed to view*/
        	$scope.reservationRequest = {};
        	$scope.aids = [];
        	$scope.assistants = [];
        	$scope.populateRuns = populateRuns;
        	$scope.populateCount = populateCount;
        	$scope.childrenCount = childrenCount;
            $scope.populateHours = populateHours;
            $scope.populateMinutes = populateMinutes;
            $scope.dataServiceFrom = LocationFactory.dataServiceFrom;
            $scope.dataServiceTo = LocationFactory.dataServiceTo;
            $scope.saveReservation = saveReservation;
            $scope.disableSaveButton = disableSaveButton;
            $scope.setPickupDateTime = setPickupDateTime;
            $scope.activate = activate;
            $scope.resetForm = resetForm;
            $scope.closeDateTimePicker = closeDateTimePicker;
            $scope.timepickerClicked = timepickerClicked;
            $scope.resetDateOptionFields = resetDateOptionFields;
            $scope.resetDates = resetDates;
            $scope.displayFaring = displayFaring;
            $scope.disableFaringButton = disableFaringButton;
            $scope.getReservationDateTime = getReservationDateTime;
            $scope.toggleOptions = toggleOptions;
            $scope.isLoading = true;
            $scope.isHidden = false;
            $scope.showCalendarButton = true;
            $scope.showCalendar = false;
            /*Methods exposed to view*/
            $scope.runs = [];
            $scope.loadingRuns = false;
            $scope.isSaving = false;
            $scope.division;
            $scope.operator;
            $scope.systemParameters;
            $scope.displayDateTimepicker = false;
            $scope.minDate = new Date();
            // $scope.options = undefined;
            $scope.requestDateTime = undefined;
            $scope.isDateSelected = false;
            $scope.isGpsEnabled = true;
            $scope.hasGpsBeenChecked = false;
            $scope.dateOptions = {
                formatYear: 'yy',
                minDate: new Date(),
                startingDay: 1,
                showWeeks: false
            };
            $scope.timepickerObject = {};
            $scope.isFRServiceActive = false;

            $scope.isUserAllowedToMakeAReservation = isUserAllowedToMakeAReservation;

            initializeLocationNotes();

            $scope.isAllowed = true;

            //enum to match enum in Server side code
            var reservationTypeEnum = {
                ASAP: 1,
                ADVANCED: 2,
                APPOINTMENT: 3
            };
            $scope.reservationTypeEnum = reservationTypeEnum;

            var timeFormat = 'h:mm A';


            function toggleOptions() {
                $scope.isHidden = !$scope.isHidden;
            }

            function populateCount(count) {
                return new Array(count);
            }

            function childrenCount(count) {
                var childrenArray = [];
                for (var i = 0; i <= count; i++) {
                    childrenArray.push(i);
                }
                return childrenArray;
            }


            function isCalenderButtonActive()
            {
                if (!$scope.options.isAdvancedReservation)
                    return false;

                if (!$scope.displayDateTimepicker && !$scope.isDateSelected)
                    return true;
                return false;
            }
            function activate() {

                //Find out if FR is active for this division. This will be used later on while reserving
                // DivisionService.getDivisionInfo()
                // .then(function (response) {
                //     var divisionInfo = response.data.result;
                //     for (var i = 0; i < divisionInfo.Services.length; i++) {
                //         if (divisionInfo.Services[i].ServiceId == "fixed") {
                //             $scope.isFRServiceActive = true;
                //         }
                //     }
                // }, function (error) {
                // });

                $scope.isFRServiceActive =!angular.isUndefined(OneMvServices.getFixedRouteInfo());

                getServiceDate()//promise chaining.
                    .then(
                    populateRuns);

                $scope.isStartDp = false;
                var dt = new Date();
                $scope.dateOptions.minDate = new Date(dt.setDate(dt.getDate() + $scope.options.passengerBookingMinDays));
                $scope.dateOptions.maxDate = new Date(dt.setDate(dt.getDate() + $scope.options.passengerBookingMaxDays));
                $scope.reservationRequest.ReservationDateView = $scope.dateOptions.minDate;
                $scope.showCalendar = !$scope.options.isAdvancedReservation;
                $scope.showCalendarButton = isCalenderButtonActive();
                //setReservationType();
                $scope.isLoading = false;
                resetForm();

            };
            //
            // Listen to Geolocationservice to find out if GPS is enabled.
            //
            $scope.$on('GeoLocationService.gpsIsAvailable', function (event, data) {
                $scope.isGpsEnabled = data.gpsIsEnabled;
                if (!data.gpsIsEnabled && $scope.options
                    && $scope.options.allowReservationOnlyWhenGpsIsOn) {
                    if (!$scope.isGpsEnabled) {
                        $scope.$broadcast('toggle-from-address', !$scope.options.allowReservationOnlyWhenGpsIsOn);
                        // Only show toast message once.
                        if (!document.getElementById('toast-container')) {
                            UtilityFactory.toastInfo('Information', 'Enable gps to make a reservation.', 10000);
                        };
                        // Wait 2 seconds, then hide any modals that may have been displayed, 
                        // IE. the 'Please find and select your home address'
                        $timeout(function () {
                            $('[uib-modal-window=modal-window]').remove();
                            $('body').removeClass('modal-open');
                        }, 3000);
                        // Display message for 15 seconds then redirect to dashboard.  Changed to 10 seconds per Jason request.
                        $timeout(function () {
                            if (!isUserAllowedToMakeAReservation()) {
                                $('[uib-modal-window=modal-window]').remove();
                                $('body').removeClass('modal-open');
                                $window.location.replace('#/');
                                $window.location.reload(true);  // I must do a hard refresh to wipe out any modals controllers that may or may not be loaded.
                            };
                        }, 15000);
                    };
                };
                $scope.hasGpsBeenChecked = true;
            })
            //
            // Function to determine if the division only allows reservation when GPS is on
            // AND if gps is on.
            //
            function isUserAllowedToMakeAReservation(){
                if(!$scope.hasGpsBeenChecked){
                    $scope.hasGpsBeenChecked = true;
                    GeoLocationService
                        .getCurrentPosition()
                }
                var r = true;
                if ($scope.options && $scope.options.allowReservationOnlyWhenGpsIsOn && $scope.hasGpsBeenChecked){
                    r = $scope.options.allowReservationOnlyWhenGpsIsOn ?$scope.isGpsEnabled : true;
                }
                return r;
            }

            function setCurrentTime()
            {
                var currentDate = moment.tz(DivisionService.getTimeZone());//new Date(new Date().getTime() + 10 * 60 * 1000);
                var currentHour = parseInt(currentDate.format('HH'));
                var currentMinute = parseInt(currentDate.format('mm'));
                var currentTime12Hr = (currentHour > 12 ? (currentHour - 12) : (currentHour == 0 ? 12 : currentHour));
                var currentTime5mInv = currentMinute == 0 ? 0 : (currentMinute == 5 ? 5 : (Math.ceil(currentMinute/5)*5));
                $scope.timepickerObject.AMPMView = currentDate.format('a').toUpperCase();
                $scope.timepickerObject.schedHrView = currentTime12Hr < 10 ? "0" + currentTime12Hr.toString(): currentTime12Hr.toString();
                $scope.timepickerObject.schedMinView = currentMinute < 5 ? "0" + currentTime5mInv.toString() : currentTime5mInv.toString();
                $scope.reservationRequest.ReservationDateView = $scope.dateOptions.minDate;
                $scope.schedHr =  $scope.timepickerObject.schedHrView;
                $scope.schedMin =  $scope.timepickerObject.schedMinView;
                $scope.AMPM =  $scope.timepickerObject.AMPMView;
                $scope.reservationRequest.ReservationDate = $scope.reservationRequest.ReservationDateView;
                
            } 

            function resetForm() {
                resetDateOptionFields();
                $scope.$broadcast('angucomplete-alt:clearInput');

            }

            $scope.clickMobilityAid = function (aid) {
            	if ($scope.aids && $scope.aids.length > 0) {
            		for (var i = 0; i < $scope.aids.length; i++) {
            			$scope.aids[i].IsSelected = false;
            		}
            		if (aid) {
            			aid.IsSelected = true;
            		}
            	}
            }

            function populateMobilityAids() {
            	$("#rdoNoMobilityAids").prop("checked", true);
            	ProfileService.GetDefaultMobilityAids($scope.options.DivisionId, $scope.passenger.Id)
                .then(function (defaultMobilityAids) {
                	// clear aids lists
                	$scope.aids.length = 0;
                	$scope.assistants.length = 0;

                	// create no aids choice
                	var noAids = {
                		IsSelected: true,
                		KeyName: "no aids",
						Group: 2,
                		DisplayName: "No Mobility Aid Required"
                	};
                	$scope.aids.push(noAids);

                	// append all aids allowed by division
                	var aidCount = 0;
                	for (var i = 0; i < defaultMobilityAids.length; i++) {
                    	var mobilityAid = defaultMobilityAids[i];
                    	if (mobilityAid.Group == 1) {
                    		mobilityAid.selected = mobilityAid.IsSelected;
                    		$scope.assistants.push(mobilityAid);
                    	} else if (mobilityAid.Group == 2) {
                    		if (mobilityAid.IsSelected == true) {
                    			if (aidCount > 0) {
                    				mobilityAid.IsSelected = false;
                    			}
                    			aidCount++;
                    		}
                    		mobilityAid.selected = mobilityAid.IsSelected;
                    		if (mobilityAid.IsSelected)
                    		    noAids.IsSelected = false;
                    		$scope.aids.push(mobilityAid);
                        }
                    }
                }, function (response) {
                    UtilityFactory.toastError('Error', response.Message);
                });
            }
            function resetDateOptionFields()
            {
                $scope.reservationRequest = {};

                $scope.reservationRequest.PassengerCount = "1";
                $scope.reservationRequest.CompanionsCount = "0";
                $scope.reservationRequest.mobilityAid = "none";
                $scope.reservationRequest.IsWheelChair = false;
                $scope.reservationRequest.IsPCA = false;
                $scope.reservationRequest.IsServiceAnimal = false;
                $scope.reservationRequest.TripFares = [];


                //$scope.reservationRequest.IsASAP = true;
                setReservationType();

                resetDates();

                initializeLocationNotes();
            }

            function initializeLocationNotes() {
                if ($scope.options && $scope.options.allowLocationNotes) {
                    $scope.reservationRequest.locationNotes = {
                        'from': '', 'to': ''
                    };
                    //$scope.showLocationNotes = {
                    //    'from': false, 'to': false
                    //};
                }
            }

           


            function resetDates() {
                setCurrentTime();
                if ($scope.options.isAdvancedReservation && ($scope.options.passengerBookingMinDays > 0)) {
                    if ($scope.reservationRequest.ReservationDate) {
                        setPickupDateTime();
                    }
                }
                else {
                    $scope.isDateSelected = false;
                    $scope.displayDateTimepicker = false;
                }
                $scope.showCalendarButton = isCalenderButtonActive();
            }

            function setReservationType() {
                if ($scope.options.isAdvancedReservation && ($scope.options.passengerBookingMinDays > 0)) {
                    $scope.reservationRequest.reservationType = $scope.reservationTypeEnum.ADVANCED;
                }
                else {
                    if ($scope.options.allowASAPReservations)
                        $scope.reservationRequest.reservationType = $scope.reservationTypeEnum.ASAP;
                    else if ($scope.options.isAdvancedReservation)
                        $scope.reservationRequest.reservationType = $scope.reservationTypeEnum.ADVANCED;
                }
            }

            function closeDateTimePicker() {
                if ($scope.options.isAdvancedReservation && ($scope.options.passengerBookingMinDays > 0)) {
                    resetDates();
                }
                else {
                    //get old dates time
                     $scope.timepickerObject.schedHrView = $scope.schedHr;
                     $scope.timepickerObject.schedMinView = $scope.schedMin;
                     $scope.timepickerObject.AMPMView = $scope.AMPM;
                    $scope.displayDateTimepicker = false;
                    $scope.reservationRequest.ReservationDateView = $scope.reservationRequest.ReservationDate;
                    if (!$scope.isDateSelected) {
                        setReservationType();
                    }
                    $scope.showCalendarButton = isCalenderButtonActive();
                }
            }
            function timepickerClicked() {

                $scope.displayDateTimepicker = !$scope.displayDateTimepicker;
                //$scope.reservationRequest.IsASAP = !$scope.displayDateTimepicker;
                if ($scope.options.isAdvancedReservation)
                    $scope.reservationRequest.reservationType = String(reservationTypeEnum.ADVANCED);
                else if($scope.options.allowAppointments)
                    $scope.reservationRequest.reservationType = String(reservationTypeEnum.APPOINTMENT);
                $scope.isDateSelected = false;
                $scope.showCalendarButton = false;
                setCurrentTime();
            }
            function getServiceDate() {
                return ScheduleService.getServiceDateByDivision($scope.options.DivisionId)
                        .then(function (response) {
                            if (response.data.status == 1) {
                                $scope.serviceDate = moment(response.data.result);
                                // $scope.reservationRequest.ReservationDate = new Date($scope.serviceDate;
                                if ($scope.mode == "reconciliation") {
                                    //$scope.reservationRequest.ReservationDate = $scope.serviceDate.subtract(1, 'days').format('MM-DD-YYYY');
                                    $scope.minDate = new Date(1990, 5, 22); //nor sure why this is hard-coded
                                    $scope.maxDateAllowed = $scope.serviceDate
                                } else {

                                };
                            }
                        }, function errorCallback(response) {
                            UtilityFactory.toastError("Error!", "Failed to get service date.");
                        });
            }
            function populateHours() {                
                return  new Array ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12');
            }
            function populateMinutes()
            {
                var minutesArray = new Array();
                for (var i = 0; i < 60; i+=5) {
                    minutesArray.push(i < 10 ? ('0' + i.toString()) : i.toString());
                }
                return minutesArray;
            }


            function setPickupDateTime()
            {
                $scope.schedHr =  $scope.timepickerObject.schedHrView;
                $scope.schedMin =  $scope.timepickerObject.schedMinView;
                $scope.AMPM =  $scope.timepickerObject.AMPMView;
                $scope.reservationRequest.ReservationDate = $scope.reservationRequest.ReservationDateView;

                $scope.isDateSelected = true;
                if (angular.isUndefined($scope.reservationRequest) || $scope.reservationRequest === null || $scope.reservationRequest.reservationType == reservationTypeEnum.ASAP)
                    return false;
                var hrs = 0;
                if ($scope.AMPM === "PM" && parseInt($scope.schedHr) != 12)
                    hrs = parseInt($scope.schedHr) + 12;
                else if ($scope.AMPM === "AM" && parseInt($scope.schedHr) == 12)
                    hrs = 0;
                else
                    hrs = parseInt($scope.schedHr);

                $scope.requestDateTime = new Date($scope.reservationRequest.ReservationDate).setHours(hrs, parseInt($scope.schedMin), 0);              

                $scope.displaySelectedDate = true;
                $scope.displayDateTimepicker = false;
            };

            function populateRuns() {
                populateMobilityAids();
                if ($scope.passenger)
                    return;
                $scope.loadingRuns = true;
                // let runDate = moment($scope.reservationRequest.ReservationDate).format('MM-DD-YYYY');
                //let isoFormatRunDate = moment($scope.reservationRequest.ReservationDate, 'MM-DD-YYYY').format();

                if ($scope.mode == "reconciliation")
                {
                    ScheduleService.getPastRuns($scope.options.DivisionId, runDate)
                   .then(function (response) {
                       $scope.loadingRuns = false;
                       if (response.data != null) {
                           $scope.runs = response.data.result
                           for (var i = 0; i < $scope.runs.length; i++) {
                               $scope.runs[i].StartTimeDisplay = DateFactory.getCustomTime($scope.runs[i].StartTime, runDate);
                               $scope.runs[i].EndTimeDisplay = DateFactory.getCustomTime($scope.runs[i].EndTime, runDate);
                           };
                       }
                       else {
                           UtilityFactory.toastError('Error', response.data.ReturnMessage);
                       }
                   }, function (response) {
                       $scope.loadingRuns = false;
                       UtilityFactory.toastError('Error', response.data.ReturnMessage);
                   });
                }
                else
                {
                    ScheduleService.getActiveRuns($scope.options.DivisionId, runDate)
                   .then(function (response) {
                       $scope.loadingRuns = false;
                       if (response.data != null) {
                           $scope.runs = response.data.result
                           for (var i = 0; i < $scope.runs.length; i++) {
                               $scope.runs[i].StartTimeDisplay = DateFactory.getCustomTime($scope.runs[i].StartTime, runDate);
                               $scope.runs[i].EndTimeDisplay = DateFactory.getCustomTime($scope.runs[i].EndTime, runDate);
                           };
                           var reservationRuns = [];

                           angular.forEach($scope.runs, function (value, key) {
                               if (value.logisticStatus != '109' && value.Status != 'Frozen' && !value.IsDeleted) {
                                   reservationRuns.push(value);
                                   //$scope.runs.splice($scope.runs.indexOf(value)+1, 1);
                               }
                           });
                           $scope.runs = reservationRuns;
                       }
                       else {
                           UtilityFactory.toastError('Error', response.data.ReturnMessage);
                       }
                   }, function (response) {
                       $scope.loadingRuns = false;
                       UtilityFactory.toastError('Error', response.data.ReturnMessage);
                   });
                }

            }
            function onSucessfullReservation(trip, isASAP) {
                if (typeof ($scope.notifySucessfullReservation) == 'function') {
                    $scope.notifySucessfullReservation(trip, isASAP);
                }
            }
            function saveReservation(reservationRequest) {
                //
                // Double check to see if GPS is required and if GPS is enabled.
                //
                if($scope.options.allowReservationOnlyWhenGpsIsOn && isUserAllowedToMakeAReservation()){
                    GeoLocationService
                        .getCurrentPosition()
                        .then(function(){
                            if (!isUserAllowedToMakeAReservation()){
                                return;
                            };
                        });
                };
                if (reservationRequest.reservationType == reservationTypeEnum.ADVANCED || reservationRequest.reservationType == reservationTypeEnum.APPOINTMENT) {
                    if (!$scope.isDateSelected)
                    {
                        timepickerClicked();
                        return;
                    }
                }
                //reservationType 1, 2, 3
                if (!$scope.isDateSelected)
                    reservationRequest.IsASAP = true;

                $scope.isSaving = true;

                var hrs = getHours();

                var mins = $scope.schedMin;

                reservationRequest.ReservationTime = hrs.toString().length == 1 ? ("0" + hrs.toString() + mins) : (hrs.toString() + mins);

                if (validateRequest(reservationRequest)) {
                    //Check for FR exclusion
                    if ($scope.isFRServiceActive)//check if FR is active for this division
                    {
                        var checkFixedRoutes = $scope.options.checkFRBeforeDRT; //system parameter which tells whether to check for fixed route before booking a drt
                        var noOfArrivals = $scope.options.noOfFRArrivals; //system parameter which tells how many fixed rote arrivals to show
                        if (checkFixedRoutes) {
                            StopService.getUpcomingArrivalsForStop($scope.options.DivisionId,
                                                                    reservationRequest.FromLocation.LocationId,
                                                                    reservationRequest.ToLocation.LocationId,
                                                                    noOfArrivals)
                            .then(function (response) {
                                var upcomingSchedules = response.data;
                                if (upcomingSchedules.length > 0) {
                                    showFixedRoutes(upcomingSchedules, reservationRequest.FromLocation.Name);
                                    $scope.isSaving = false;
                                } else {
                                    reserveTrip(reservationRequest)
                                }
                            },
                            function (error) {

                            });
                        } else {
                            reserveTrip(reservationRequest)
                        }
                    } else {
                        reserveTrip(reservationRequest)
                    }

                } else {
                    $scope.isSaving = false;
                };
            }

            function getHours() {
                var hrs = 0;
                if ($scope.AMPM === "PM" && parseInt($scope.schedHr) != 12)
                    hrs = parseInt($scope.schedHr) + 12;
                else if ($scope.AMPM === "AM" && parseInt($scope.schedHr) == 12)
                    hrs = 0;
                else
                    hrs = parseInt($scope.schedHr);

                return hrs;
            }


            function getReservationDateTime(reservationRequest)
            {
                var hrs = getHours();

                var d = new Date(reservationRequest.ReservationDate.setHours(hrs, parseInt($scope.schedMin), 0));

                var curr_date = d.getDate();
                var curr_month = d.getMonth() +1;
                var curr_year = d.getFullYear();
                var inputDate = curr_year + "/" +curr_month + "/" + curr_date + " " +hrs.toString() + ":" +$scope.schedMin;

                return moment.tz(inputDate, "YYYY/M/D HH:mm", DivisionService.getTimeZone());
            }
            function reserveTrip(reservationRequest) {
                UtilityFactory.toastInfo("Creating Trip");
                var saveTripReq = {
                };
                var savedTrip = {
                };
                saveTripReq.PassengerID = parseInt($scope.passenger.Id);
                //here figure out from reservationType what ASAP, Advanced, Appointment

                if (reservationRequest && (reservationRequest.reservationType != reservationTypeEnum.ASAP) && reservationRequest.ReservationTime)
                {
                    // request advanced reservation
                    if ($scope.passenger)
                    {


                        var hrs = getHours();

                        var d = new Date(reservationRequest.ReservationDate.setHours(hrs, parseInt($scope.schedMin), 0));

                        var curr_date = d.getDate();
                        var curr_month = d.getMonth() + 1;
                        var curr_year = d.getFullYear();
                        var inputDate = curr_year + "/" + curr_month + "/" + curr_date + " " + hrs.toString() + ":" + $scope.schedMin;

                        saveTripReq.RequestedStartDateTime = moment.tz(inputDate, "YYYY/M/D HH:mm" ,DivisionService.getTimeZone());

                    }
                    else
                    saveTripReq.RequestedStartDateTime = DateFactory.getDateFromCustomTime(reservationRequest.ReservationTime, moment(reservationRequest.ReservationDate));//non asap field
                }
                saveTripReq.OperationID = ($scope.options.OperatorId != null) ? $scope.options.OperatorId : null;

                saveTripReq.NumOfPassengers = reservationRequest.PassengerCount;
                saveTripReq.NumOfWheelChairPassengers = 0;
                saveTripReq.NumOfXLWheelChairPassengers = 0;
                saveTripReq.NumOfScooterPassengers = 0;
                saveTripReq.NumOfWalkerPassengers = 0;
                saveTripReq.NumOfPCAs = 0;
                saveTripReq.NumOfServiceAnimals = 0;
                saveTripReq.NumOfBikePassengers = 0;
                if ($scope.options.allowEquipment) {
                    if ($scope.aids.length > 0) {
                    	for (var i = 0; i < $scope.aids.length; i++) {
                    		var mobilityAid = $scope.aids[i];
                    		if (mobilityAid.IsSelected) {
                    		    saveTripReq.SelectedMobilityAidId = mobilityAid.MVMobilityAidsId;
                    			var keyName = mobilityAid.KeyName.trim().toLowerCase()
                    			if (keyName == "wc") {
                    				saveTripReq.NumOfPassengers = reservationRequest.PassengerCount - 1;
                    				saveTripReq.NumOfWheelChairPassengers = 1;
                    			} else if (keyName == "wcxl") {
                    				saveTripReq.NumOfPassengers = reservationRequest.PassengerCount - 1;
                    				saveTripReq.NumOfXLWheelChairPassengers = 1;
                    			} else if (keyName == "sctr") {
                    				saveTripReq.NumOfPassengers = reservationRequest.PassengerCount - 1;
                    				saveTripReq.NumOfScooterPassengers = 1;
                    			} else if (keyName == "wkr") {
                    				saveTripReq.NumOfPassengers = reservationRequest.PassengerCount - 1;
                    				saveTripReq.NumOfWalkerPassengers = 1;
                    			} else if (keyName == 'birk') {
                    			    saveTripReq.NumOfPassengers = reservationRequest.PassengerCount - 1;
                    			    saveTripReq.NumOfBikePassengers = 1;
                    			}
                    		}
                    	}
                    }

                    if ($scope.assistants.length > 0) {
                    	for (var i = 0; i < $scope.assistants.length; i++) {
                    		var assistant = $scope.assistants[i];
                    		if (assistant.IsSelected) {
                    			var keyName = assistant.KeyName.trim().toLowerCase()
                    			if (keyName == "sa") {
                                    saveTripReq.NumOfServiceAnimals = 1;
                    			} else if (keyName == "pca") {
                                    saveTripReq.NumOfPCAs = 1;
                                }
                            }
                        }
                    }
                }

                saveTripReq.NumOfCompanions = reservationRequest.CompanionsCount;
                saveTripReq.RunId = reservationRequest && reservationRequest.Run && reservationRequest.Run.RunId ? reservationRequest.Run.RunId : null;

                saveTripReq.StartAddressViewModel = reservationRequest.FromLocation;
                saveTripReq.EndAddressViewModel = reservationRequest.ToLocation;
                saveTripReq.ReservationType = reservationRequest.reservationType;
                if (angular.equals(saveTripReq.StartAddressViewModel, {}) || saveTripReq.StartAddressViewModel == undefined) {
                    UtilityFactory.toastError('Error', "Invalid location");
                    $scope.isSaving = false;
                    return false;
                }
                if (angular.equals(saveTripReq.EndAddressViewModel, {}) || saveTripReq.EndAddressViewModel == undefined) {
                    UtilityFactory.toastError('Error', "Invalid location");
                    $scope.isSaving = false;
                    return false;
                }
                if ($scope.options && $scope.options.allowLocationNotes) {
                    saveTripReq.StartAddressViewModel.LocationNote = reservationRequest.locationNotes.from.trim();
                    saveTripReq.EndAddressViewModel.LocationNote = reservationRequest.locationNotes.to.trim(); 
                }

                if (reservationRequest.TripFares != undefined)
                    saveTripReq.TripFares = reservationRequest.TripFares;
                if (reservationRequest.TotalTripFare != undefined)
                    saveTripReq.TotalTripFare = reservationRequest.TotalTripFare;


                saveTripReq.IsDivisionAdvanced = $scope.options.isAdvancedReservation;
                saveTripReq.ServiceDate = $scope.serviceDate;
                saveTripReq.IsWillCall = reservationRequest.IsWillCall;
                if ($scope.mode == "reconciliation") {
                    //Reconciliation Case
                    if (!saveTripReq.RunId)
                        saveTripReq.RunId = -1; //setting it to an int value, else the request object is going as null to the server
                    saveTripReq.RunDate = reservationRequest.ReservationDate;
                    var serviceDate = moment(reservationRequest.ReservationDate);
                    saveTripReq.ArrivePickUpDateTimeUTC = DateFactory.getDateFromCustomTime(reservationRequest.ArrivePickUpTime, serviceDate);
                    saveTripReq.PerformPickUpDateTimeUTC = DateFactory.getDateFromCustomTime(reservationRequest.PerformPickUpTime, serviceDate);
                    saveTripReq.ArriveDropOffDateTimeUTC = DateFactory.getDateFromCustomTime(reservationRequest.ArriveDropOffTime, serviceDate);
                    saveTripReq.PerformDropOffDateTimeUTC = DateFactory.getDateFromCustomTime(reservationRequest.PerformDropOffTime, serviceDate);

                    ScheduleService.savePastTrip(saveTripReq)
                    .then(function (response) {
                        if (response.data.status == 1) {
                            savedTrip = response.data.result;
                            resetForm();
                            UtilityFactory.toastSuccess(response.data.message);
                            onSucessfullReservation(savedTrip);
                        }
                        else {
                            UtilityFactory.toastInfo(response.data.message);
                        }
                        $scope.isSaving = false;
                    },
                    function (errormsg) {
                        UtilityFactory.toastError('Error', errormsg.data);
                        $scope.isSaving = false;
                    });


                } else if ($scope.mode == "reservation") {
                	// request demand reservation
                    ScheduleService.schedulepost(saveTripReq)
                    .then(function (response) {
                        if (response.data.status == 1) {
                            savedTrip = response.data.result;
                            resetForm();
                            UtilityFactory.toastSuccess(response.data.message);
                            onSucessfullReservation(savedTrip, parseInt(reservationRequest.reservationType) == reservationTypeEnum.ASAP);
                        }
                        else if (response.data.errors != null) {
                            var zoneExclIndex = -1;
                            var locExclIndex = -1;
                            var capacityError = false;
                            var negotiatedResponse = false;
                            $.each(response.data.errors, function (index, value) {
                                var errCode = value.ErrorCode;
                                //Show the over-ride pop-up
                                if (errCode == -8) {
                                    zoneExclIndex = index;
                                }
                                else if (errCode == -7) {
                                    locExclIndex = index;
                                }
                                else if (errCode == 9) {
                                    capacityError = true;
                                }
                                else if (errCode == 10) {
                                    negotiatedResponse = true;
                                }
                            });

                            if (zoneExclIndex >= 0) {
                                showReservationErrorModal(response.data.errors[zoneExclIndex])
                                    .then(function (retValue) {
                                        if (locExclIndex >= 0) {
                                            showOverrideModal(response.data.errors[locExclIndex]).then(function (retValue) {
                                            });
                                        }
                                        else {
                                        }
                                    });
                            }
                            else if (locExclIndex >= 0) {
                                showReservationErrorModal(response.data.errors[locExclIndex]).then(function (retValue) {
                                });
                            }
                            else if (negotiatedResponse)
                                manageNegotiation(response, saveTripReq);
                            else if (capacityError) {
                                showReservationErrorModal(response.data.errors[0], "Capacity Unavailable");
                            }
                            else {
                                UtilityFactory.toastError('Creating Reservation', response.data.message);
                            }
                        }
                        else {
                            UtilityFactory.toastError('Creating Reservation', response.data.message);
                        }
                        $scope.isSaving = false;
                    },
                    function (errormsg) {
                        UtilityFactory.toastError('Error', errormsg.data);
                        $scope.isSaving = false;
                    });
                }
            }
            function disableSaveButton() {
                return isSaving;
            }


            function manageNegotiation(response, tripRequest) {
                tripRequest.NegotiationInfo = undefined;

                if (response.data.result) {
                    displayNegotiationModal(response.data, tripRequest)
                    .then(function (negotiatedRequest) {
                        reserveNegotiatedTrip(negotiatedRequest, tripRequest);
                    });
                }
            };


            function reserveNegotiatedTrip(negotiatedRequest, tripRequest) {

                if (negotiatedRequest
                    && negotiatedRequest.NegotiationInfo
                    && negotiatedRequest.NegotiationInfo.IsNegotiated) {

                    tripRequest.NegotiationInfo = negotiatedRequest.NegotiationInfo;
                    tripRequest.RequestedStartDateTime = negotiatedRequest.NegotiationInfo.SelectedTime;

                    scheduleNegotiatedTrip(tripRequest);
                }
            }

            function scheduleNegotiatedTrip(tripRequest) {
                ScheduleService.schedulepost(tripRequest)
                   .then(function (response) {
                       if (response.data.status == 1) {
                           var savedTrip = response.data.result;
                           resetForm();
                           UtilityFactory.toastSuccess(response.data.message);
                           onSucessfullReservation(savedTrip, parseInt(tripRequest.ReservationType) == reservationTypeEnum.ASAP);
                       }
                       else
                           UtilityFactory.toastError('Creating Reservation', response.data.message);

                       $scope.isSaving = false;
                   }, function (errormsg) {
                       UtilityFactory.toastError('Error', errormsg.data);
                       $scope.isSaving = false;
                   });
            }


            function displayNegotiationModal(negotiationResponse) {
                var deferred = $q.defer();

                var negotiationModal = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/reservations/negotiation-modal.html',
                    controller: 'NegotiationController as vm',
                    size: '-fs',
                    resolve: {
                        negotiationRequest: function () {
                            return {
                                proposedSlots: negotiationResponse.result.ProposedSlots,
                                reservationRequest: $scope.reservationRequest,
                                tripRequestId: negotiationResponse.result.tripRequestId,
                                serviceDate: $scope.serviceDate
                            };
                        }
                    }
                });

                negotiationModal.result.then(function (response) {
                    if (!response.canNegotiate) {
                        deferred.resolve({
                            NegotiationInfo: {
                                IsNegotiated: false
                            }
                        });
                    }
                    else if (response.selectedTime && response.canNegotiate) {
                        deferred.resolve({
                            NegotiationInfo: {
                                IsNegotiated: true,
                                SelectedTime: response.selectedTime,
                                tripRequestId: response.tripRequestId,
                                NegotiationLogId: response.negotiationLogId
                            }
                        });
                    }
                });

                return deferred.promise;
            }




            function disableFaringButton() {
                if (!$scope.isAllowed || $scope.isSaving)
                    return true;
                if ($scope.reservationRequest.FromLocation == null || angular.equals($scope.reservationRequest.FromLocation, {})
                    || $scope.reservationRequest.ToLocation == null || angular.equals($scope.reservationRequest.ToLocation, {}))
                    return true;
                return false;
            }

            function displayFaring()
            {

                var modalOverride = $uibModal.open({
                    animation: true,

                    templateUrl: 'app/modules/on-demand/faring/faring-modal.html',
                    controller: 'FaringModalController as vm',
                    size: '-fs',
                    windowClass: 'phone-modal--fullscreen',
                    backdrop: 'static',
                    scope: $scope,
                    resolve: {
                        reservationRequest: function () {
                            return $scope.reservationRequest;
                        },
                        serviceDate: function () {
                            return $scope.serviceDate;
                        }
                    }
                });

                modalOverride.result.then(function (result) {
                    if (result)
                        $scope.reservationRequest = result;
                });

                // return deferred.promise;
            }
            function showReservationErrorModal(msg,header) {
                var deferred = $q.defer();

                var modalOverride = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/reservations/reservation-modal-message.html',
                    controller: 'ReservationErrorModalController as vm',
                    size: '-fs',
                    backdrop: 'static',
                    resolve: {
                        message: function () { return { message: msg, header:header };}
                    }
                });

                modalOverride.result.then(function (result) {
                    deferred.resolve(result);
                });

                return deferred.promise;

            };

            function showFixedRoutes(_upcomingSchedules, _fromStopName) {
                var deferred = $q.defer();

                var modalFR = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/reservations/fixed-routes.html',
                    controller: 'FixedRoutesController as vm',
                    size: '-fs',
                    backdrop: 'static',
                    resolve: {
                        upcomingSchedules: function () { return _upcomingSchedules },
                        fromStopName: function () { return _fromStopName }
                    }
                });

                modalFR.result.then(function (result) {
                    //deferred.resolve(result);
                });

                return deferred.promise;
            }

            function validateRequest(reservationRequest) {
                if (!$scope.passenger || !$scope.passenger.Id) {
                    UtilityFactory.toastInfo("Please select a Passenger");
                    return false;
                }
                if ($scope.passenger.IsDeactivated) {
                    UtilityFactory.toastInfo("Please select an Active Passenger");
                    return false;
                }
                if ($scope.mode == 'reservation') {
                    if (!reservationRequest.IsASAP && $scope.options.isAdvancedReservation) {

                        if (!reservationRequest.ReservationTime || reservationRequest.ReservationTime == undefined) {
                            UtilityFactory.toastInfo("Please enter a valid Reservation Time");
                            return false;
                        } else {
                            var timeZone = DivisionService.getTimeZone();
                            var req_date = reservationRequest.ReservationDate.getDate();
                            var req_month = reservationRequest.ReservationDate.getMonth() + 1;
                            var req_year = reservationRequest.ReservationDate.getFullYear();
                            var req_input = req_year + "/" + req_month + "/" + req_date + " " + reservationRequest.ReservationTime;
                            var requestDateTime = moment.tz(req_input, "YYYY/M/D HHmm", timeZone);


                            //var requestedDateTime = DateFactory.getDateFromCustomTime(reservationRequest.ReservationTime, moment(reservationRequest.ReservationDate));


                            var currentDateTime = moment.tz(timeZone);
                            // currentDateTime = currentDateTime.clone().tz("America/Seattle");//DivisionService.getTimeZone());

                            if (requestDateTime.isBefore(currentDateTime)) {
                                UtilityFactory.toastInfo("Please enter a Reservation Time which is greater than the current time");
                                return false;
                            }
                        }
                    } else {

                    }
                }
                if (!reservationRequest.FromLocation) {
                    UtilityFactory.toastInfo("Please enter a valid From Location");
                    return false;
                }
                if (!reservationRequest.ToLocation) {
                    UtilityFactory.toastInfo("Please enter a valid To Location");
                    return false;
                }
                if (reservationRequest.FromLocation.GooglePlaceId && reservationRequest.ToLocation.GooglePlaceId) {
                    if (reservationRequest.FromLocation.GooglePlaceId == reservationRequest.ToLocation.GooglePlaceId) {
                        UtilityFactory.toastInfo("From and To locations should not be same");
                        return false;
                    }
                } else {
                    if (reservationRequest.FromLocation.LocationId && reservationRequest.ToLocation.LocationId) {
                        if (reservationRequest.FromLocation.LocationId == reservationRequest.ToLocation.LocationId) {
                            UtilityFactory.toastInfo("From and To locations should not be same");
                            return false;
                        }
                    }
                }
                //Validations for reconciliation
                if ($scope.mode == "reconciliation") {
                    if (reservationRequest.ReservationDate == null || reservationRequest.ReservationDate == undefined) {
                        UtilityFactory.toastInfo("Please enter a valid Reservation Date");
                        return false;
                    }
                    if (!reservationRequest.ArrivePickUpTime || reservationRequest.ArrivePickUpTime == undefined) {
                        UtilityFactory.toastInfo("Please enter a valid Arrive PickUpTime");
                        return false;
                    }
                    if (!reservationRequest.PerformDropOffTime || reservationRequest.PerformDropOffTime == undefined) {
                        UtilityFactory.toastInfo("Please enter a valid Perform DropOffTime");
                        return false;
                    }
                    if (reservationRequest.Run == null || !reservationRequest.Run.RunId) {
                        UtilityFactory.toastInfo("Please select a Run");
                        return false;
                    }
                }
                return true;
            }
            function zoneForLocation(location, type)
            {

                FaringService
                    .GetZoneIDForLocation(location.Latitude, location.Longitude, $scope.options.DivisionId)
                    .then(function (response) {
                        if (type === 'from')
                            $scope.reservationRequest.fromZone = response.data.result == null ? 0: response.data.result;
                        else
                            $scope.reservationRequest.toZone = response.data.result == null ? 0 : response.data.result;
                    }, function error(err) {

                    });
            }

            $scope.selectedLocationFrom = function (location) {
                $scope.reservationRequest.FromLocation = location;
                $scope.isAllowed = true;
                if ($scope.options.allowReservationOnlyWhenGpsIsOn)
                    isSelectedLocationInAllowedBookingRange(location);

                zoneForLocation(location, 'from');
            }
            $scope.selectedLocationTo = function (location) {
                $scope.reservationRequest.ToLocation = location;
                zoneForLocation(location, 'to');
            }
            $scope.$on('closestLocation', function (event, location) {
                $scope.reservationRequest.FromLocation = location.loc;
                zoneForLocation(location.loc, 'from');
            });

            $scope.$on('homeLocation', function (event, location) {
                $scope.selectedLocationTo(location);
            });

            function isSelectedLocationInAllowedBookingRange(selectedLocation) {
                GeoLocationService
                        .getCurrentPosition()
                        .then(function (position) {
                            if (position) {
                                var hdistance = getHaversineDistanceInFeet(
                                                {
                                                    latitude: position.coords.latitude, longitude: position.coords.longitude
                                                },
                                                    {
                                                        latitude: selectedLocation.Latitude, longitude: selectedLocation.Longitude
                                                    });
                                var maxAllowedDistance = $scope.options.maxRadiusToAllowBooking;

                                if (hdistance > maxAllowedDistance) {
                                    UtilityFactory.toastError('Cannot book trip!', 'The pickup location must be within ' +
                                                                maxAllowedDistance + ' feet of your current location.', 15000);
                                    $scope.isAllowed = false;
                                }
                            }
                        });
            };

            function getHaversineDistanceInFeet(currentLocation, selectedLocation) {
                var lat1 = currentLocation.latitude;
                var lon1 = currentLocation.longitude;
                var lat2 = selectedLocation.latitude;
                var lon2 = selectedLocation.longitude

                var R = 6371;
                var x1 = lat2 - lat1;
                var dLat = x1 * Math.PI / 180;
                var x2 = lon2 - lon1;
                var dLon = x2 * Math.PI / 180;
                var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                                Math.sin(dLon / 2) * Math.sin(dLon / 2);
                var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                var p = 2 * Math.asin(Math.sqrt(a));
                var d = R * c * 0.62137 * 5280; //convert to feet
                return Number(d).toFixed(2);
            }

        }
    }
})();

+(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .directive('reservationMapDirective', reservationMapDirective);

    reservationMapDirective.$inject = ['$window', '$http', '$filter', 'ConfigFactory', 'ScheduleService', 'DateFactory', 'uiGmapIsReady', 'UtilityFactory', '$interval'];

    function reservationMapDirective($window, $http, $filter, ConfigFactory, ScheduleService, DateFactory, uiGmapIsReady, UtilityFactory, $interval) {
        
        var directive = {
            link: {
                pre: preLink,
                post: postLink
            },
            controller: controller,
            restrict: 'E',
            scope: { passenger: '@', tripRequest: '@', currentTrip: '@', dispatchSelectedRunId: '@', dispatchSelectedTrip: '@'},
            templateUrl: 'app/modules/on-demand/reservations/reservationMap.html'
        };
        return directive;

        function controller($scope) {
            $scope.minlengthlimit = 3;
            $scope.map = {
                center: {
                    latitude: 40.680638,
                    longitude: -99.228516
                },
                zoom: 10,
                lineStyle: {
                    color: '#333',
                    weight: 5,
                    opacity: 0.7
                }                
            };

            $scope.showTraffic = false;
            if ($scope.dispatchSelectedRunId != null) {
                $scope.showTraffic = true;
            }
            $scope.mapControl = {};
            $scope.mapOptions = {
                mapTypeControl: false,
                zoomControl: false,
                streetViewControl: false
            };
            var currentDivision = "";
            $scope.stopMarker = [];
            $scope.addressRest = null;
            $scope.setMap = setMap;
            $scope.getCurrentActiveTrip = getCurrentActiveTrip;
            $scope.setCurrentTripMap = setCurrentTripMap;
            $scope.setSelectedTripMap = setSelectedTripMap;
            //$scope.setNewDispatchSelectedRunId = setNewDispatchSelectedRunId;
            $scope.clearMarkers = clearMarkers;
            var autoRefreshMarker = undefined;
            $scope.tripid = null;
            $scope.passengerId = null;
            $scope.activeTripRunId = null;
            var isTripActive;
            var isCancelable;
            $scope.passenger = {};
            $scope.tripRequest = {};
            $scope.currentTrip = {};
            $scope.dispatchSelectedRunId = null;
            $scope.dispatchSelectedTrip = [];
            $scope.activeTrip = false;
            $scope.cancelTrip = false;
            $scope.disableCancel = false;
            $scope.vehiclesMarkerDetails = [];
            $scope.selectedTripmarkerDetails = [];
            $scope.centerLatLong;
            //$scope.passengerDetails = $scope.passenger;
            // instantiate google map objects for directions
            var directionsDisplay = new google.maps.DirectionsRenderer({ suppressMarkers: true, draggable: false });
            var directionsService = new google.maps.DirectionsService();

            ConfigFactory.getCurrentDivision().then(function (divisionData) {
                currentDivision = divisionData;
            }, function () {
                //Error handling TBD
            });
            
            function setSelectedTripMap() {
                for (var i = 0; i < $scope.dispatchSelectedTrip.length; i++) {
                    if($scope.dispatchSelectedTrip[i].Type == 'pickup')
                    {
                        icon = '../../images/pickup.png';
                    }
                    else {
                        icon = '../../images/dropoff.png';
                    }
                    $scope.selectedTripmarkerDetails.push({
                        'tripId': $scope.dispatchSelectedTrip[i].TripID, 'scheduleTime': $scope.dispatchSelectedTrip[i].SchedTimeView,
                        'latitude': $scope.dispatchSelectedTrip[i].Latitude, 'longitude': $scope.dispatchSelectedTrip[i].Longitude,
                        'locationName': $scope.dispatchSelectedTrip[i].LoactionName, 'locationAddress': $scope.dispatchSelectedTrip[i].LoactionAddress,
                        'icon': icon
                    });
                }
                var icon = null;
                
                setBounds();
            };

            //marker click function
            $scope.tripMarkerEvent = {
                click: function (gMarker, eventName, model) {
                    if (model.$id) {
                        $scope.tripCoords = model.coords;
                        $scope.showTrip = true;
                    }
                }
            };

            function setCurrentTripMap() {
                $scope.tripRequest.FromLat = $scope.currentTrip.StartAddressViewModel.Latitude;
                $scope.tripRequest.FromLong = $scope.currentTrip.StartAddressViewModel.Longitude;
                $scope.tripRequest.ToLat = $scope.currentTrip.EndAddressViewModel.Latitude;
                $scope.tripRequest.ToLong = $scope.currentTrip.EndAddressViewModel.Longitude;
                $scope.tripRequest.tripId = $scope.currentTrip.TripID;
                $scope.tripId = $scope.currentTrip.TripID;
                scheduleTrip($scope.tripRequest);

            };

            function getCurrentActiveTrip() {
                $scope.passengerId = $scope.passenger.Id
                if ($scope.passenger.Id == null)
                {
                    UtilityFactory.toastError('Error', errormsg.data);
                    return;
                }
                ScheduleService.getlastripdetails($scope.passenger.Id)
                   .then(function (response) {
                       if (response.data.status == 1) {
                           var x = response.data;
                           $scope.activeTripRunId = response.data.result.RunID;
                           $scope.tripRequest.FromLat = (response.data.result.StartAddressViewModel.Latitude);
                           $scope.tripRequest.FromLong = (response.data.result.StartAddressViewModel.Longitude);
                           $scope.tripRequest.ToLat = (response.data.result.EndAddressViewModel.Latitude);
                           $scope.tripRequest.ToLong = (response.data.result.EndAddressViewModel.Longitude);
                           $scope.tripRequest.tripId = response.data.result.TripID;
                           $scope.tripId = response.data.result.TripID;
                           scheduleTrip($scope.tripRequest);
                       }
                       else {
                           //UtilityFactory.toastError('Error', response.data.message);
                           $scope.tripId = null;
                           $scope.tripRequest.From = null;
                           $scope.tripRequest.To = null;
                           $scope.scheduleMarkers = [];
                           directionsDisplay.setMap(null);
                       }
                   }, function (errormsg) {

                       UtilityFactory.toastError('Error', errormsg.data);
                   });
            };

            function setMap() {
                $scope.map = {
                    center: {
                        latitude: $scope.centerLatitude,
                        longitude: $scope.centerLongitude
                    },
                    zoom: 15,
                }
                if ($scope.isFleetMap) {
                    autoRefreshMarker = $interval(function () {
                        setFleetMarkers();
                    }, 5000);
                }
                else {
                    scheduleTrip($scope.tripRequest);
                }
            }           

            function scheduleTrip(tripRequest) {
                $scope.scheduleMarkers = [];

                directionsDisplay.setMap($scope.mapControl.getGMap());

                $scope.scheduleMarkers.push({
                    'latitude': tripRequest.FromLat, 'longitude': tripRequest.FromLong,
                    'icon': '../../images/pickup.png', 'tripId': $scope.tripRequest.tripId
                });
                $scope.scheduleMarkers.push({
                    'latitude': tripRequest.ToLat, 'longitude': tripRequest.ToLong,
                    'icon': '../../images/dropoff.png', 'tripId': $scope.tripRequest.tripId
                });

                var request = {
                    origin: new google.maps.LatLng(tripRequest.FromLat, tripRequest.FromLong),
                    destination: new google.maps.LatLng(tripRequest.ToLat, tripRequest.ToLong),
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                };
                directionsService.route(request, function (response, status) {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
                        //directionsDisplay.setPanel(document.getElementById('directionsList'));
                        //$scope.directions.showList = true;
                        setBounds();
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            };

            uiGmapIsReady.promise().then(function (maps) {
                google.maps.event.trigger($scope.mapControl.getGMap(), "resize");
                
            });

            function setBounds() {
                var bounds = new google.maps.LatLngBounds();

                angular.forEach($scope.selectedTripmarkerDetails, function (stop) {
                    bounds.extend(new google.maps.LatLng(stop.latitude, stop.longitude));
                });

                $scope.mapControl.getGMap().fitBounds(bounds);
            };

            function clearMarkers() {               
                $scope.vehiclesMarkerDetails = [];
            };

            function setFleetMarkers() {
                clearMarkers();
                var lat = null;
                var long = null;

                if ($scope.tripId != null) {
                    ScheduleService.getDriverGPS($scope.tripId)
                        .then(function (response) {
                            if (response.data != null) {
                                $scope.activeTripRunId = response.data.RunId;
                                isTripActive = response.data.IsTripActive
                                if (!isTripActive) {
                                    var passengerId = $scope.passengerId
                                    ScheduleService.getlastripdetails($scope.passengerId)
                                        .then(function (response) {
                                              if (response.data.status == 1) {
                                                  $scope.tripRequest.From = response.data.result.StartAddressViewModel.Address1 + ', ' + response.data.result.StartAddressViewModel.City + ', ' + response.data.result.StartAddressViewModel.ZipCode;
                                                  $scope.tripRequest.To = response.data.result.EndAddressViewModel.Address1 + ', ' + response.data.result.EndAddressViewModel.City + ', ' + response.data.result.EndAddressViewModel.ZipCode;
                                                  $scope.tripRequest.FromLat = (response.data.result.StartAddressViewModel.Latitude);
                                                  $scope.tripRequest.FromLong = (response.data.result.StartAddressViewModel.Longitude);
                                                  $scope.tripRequest.ToLat = (response.data.result.EndAddressViewModel.Latitude);
                                                  $scope.tripRequest.ToLong = (response.data.result.EndAddressViewModel.Longitude);

                                                  $scope.activeTrip = true;
                                                  $scope.cancelTrip = false;
                                                  $scope.tripId = response.data.result.TripID;
                                                  $scope.tripRequest.Shuttle = response.data.result.VehicleName;
                                                  $scope.tripRequest.RunName = response.data.result.RunName;
                                                  $scope.tripRequest.StartTime = response.data.result.EstimatedPickupTime;
                                                  $scope.tripRequest.EndTime = response.data.result.EstimatedDestinationTime;
                                                  $scope.disableCancel = false;
                                                  scheduleTrip($scope.tripRequest);
                                              }
                                              else {
                                                  $scope.tripId = null;
                                                  $scope.tripRequest.From = null;
                                                  $scope.tripRequest.To = null;
                                                  $scope.activeTrip = false;
                                                  $scope.cancelTrip = true;
                                                  $scope.scheduleMarkers = [];
                                                  directionsDisplay.setMap(null);
                                                  //stopAutoRefreshMarker();
                                                  //window.location.reload();
                                                  return;
                                              }
                                          }, function (errormsg) {

                                              UtilityFactory.toastError('Error', errormsg.data);
                                          });
                                }
                                else {
                                    isCancelable = response.data.IsCancelable
                                    if (!isCancelable) {
                                        $scope.disableCancel = true;
                                    }
                                }
                            }
                            else {
                            }
                        }, function (errormsg) {
                        });
                }

                if ($scope.dispatchSelectedRunId != null)
                {
                    ScheduleService.getActiveRuns(currentDivision.DivisionID, null)
                    .then(function (response) {
                        if (response.data != null) {
                            for (var i = 0; i < response.data.result.length; i++) {
                                $scope.getActiveRuns = response.data.result[i]

                                if ($scope.getActiveRuns.RunId == $scope.dispatchSelectedRunId) {
                                    if ($scope.getActiveRuns.LatestVehicleLatitude != null & $scope.getActiveRuns.LatestVehicleLongitude != null)
                                    {
                                        var icon = '../../images/VehicleCurrentTrip.png'
                                        $scope.vehiclesMarkerDetails.push({
                                            'vehicleName': $scope.getActiveRuns.VehicleName, 'driverName': $scope.getActiveRuns.DriverName,
                                            'latitude': $scope.getActiveRuns.LatestVehicleLatitude, 'longitude': $scope.getActiveRuns.LatestVehicleLongitude,
                                            'runName': $scope.getActiveRuns.RunName, 'runId': $scope.getActiveRuns.RunId, 'icon': icon
                                        });
                                    }
                                }
                            }
                        }
                        else {
                            UtilityFactory.toastError('Error', $scope.returnMsg);
                        }
                    }, function (errormsg) {
                        UtilityFactory.toastError('Error', $scope.returnMsg);
                    });
                }
                else {
                    ScheduleService.getActiveRuns(currentDivision.DivisionID, null)
                    .then(function (response) {
                        if (response.data != null) {
                            for (var i = 0; i < response.data.result.length; i++) {
                                $scope.getActiveRuns = response.data.result[i];

                                if ($scope.getActiveRuns.LatestVehicleLatitude != null & $scope.getActiveRuns.LatestVehicleLongitude != null)
                                {
                                    if ($scope.activeTripRunId != null && $scope.getActiveRuns.RunId == $scope.activeTripRunId && isTripActive) {
                                        var icon = '../../images/VehicleCurrentTrip.png'
                                        $scope.vehiclesMarkerDetails.push({
                                            'vehicleName': $scope.getActiveRuns.VehicleName, 'driverName': $scope.getActiveRuns.DriverName,
                                            'latitude': $scope.getActiveRuns.LatestVehicleLatitude, 'longitude': $scope.getActiveRuns.LatestVehicleLongitude,
                                            'runName': $scope.getActiveRuns.RunName, 'runId': $scope.getActiveRuns.RunId, 'icon': icon
                                        });
                                    }
                                    else if ($scope.getActiveRuns.DriverId != null && $scope.getActiveRuns.VehicleId != null) {

                                        if ($scope.getActiveRuns.NumOfActiveTrips > 0) {
                                            var icon = '../../images/VehicleActiveTrips.png'
                                            $scope.vehiclesMarkerDetails.push({
                                                'vehicleName': $scope.getActiveRuns.VehicleName, 'driverName': $scope.getActiveRuns.DriverName,
                                                'latitude': $scope.getActiveRuns.LatestVehicleLatitude, 'longitude': $scope.getActiveRuns.LatestVehicleLongitude,
                                                'runName': $scope.getActiveRuns.RunName, 'runId': $scope.getActiveRuns.RunId, 'icon': icon
                                            });
                                        }
                                        else {
                                            var icon = '../../images/VehicleNoTrips.png'
                                            $scope.vehiclesMarkerDetails.push({
                                                'vehicleName': $scope.getActiveRuns.VehicleName, 'driverName': $scope.getActiveRuns.DriverName,
                                                'latitude': $scope.getActiveRuns.LatestVehicleLatitude, 'longitude': $scope.getActiveRuns.LatestVehicleLongitude,
                                                'runName': $scope.getActiveRuns.RunName, 'runId': $scope.getActiveRuns.RunId, 'icon': icon
                                            });
                                        }
                                    }
                                    else {
                                        //Do nothing
                                    }
                                }
                                
                            }
                        }
                        else {
                            UtilityFactory.toastError('Error', $scope.returnMsg);
                        }
                    }, function (errormsg) {
                        UtilityFactory.toastError('Error', $scope.returnMsg);
                    });
                }
                
            };

            //marker click function
            $scope.markerEvent = {
                click: function (gMarker, eventName, model) {
                    if (model.$id) {                        
                        $scope.coords = model.coords;
                        $scope.show = true;
                    }
                }
            };

            function stopAutoRefreshMarker() {
                if (angular.isDefined(autoRefreshMarker)) {
                    $interval.cancel(autoRefreshMarker);
                    autoRefreshMarker = undefined;
                }
            };

            $scope.$on('$destroy', function (event) {
                stopAutoRefreshMarker();
            });
            
        }

        function preLink(scope, element, attrs) {
            ScheduleService.getServiceAreaLocation()
                .then(function (response) {
                    if (response.data !== null) {
                        scope.centerLatitude = response.data.Latitude;
                        scope.centerLongitude = response.data.Longitude;
                        scope.addressRest = response.data.Address;
                        //LocationFactory.setadd($scope.addressRest);
                        //scope.mapCenter.latitude = latitude;
                        //scope.mapCenter.longitude = longitude;
                        
                        if (scope.tripRequest.length > 0){
                            if (typeof scope.tripRequest == "string")
                            {
                                scope.tripRequest = JSON.parse(scope.tripRequest);
                            }
                            scope.isFleetMap = false;
                            
                        }
                        else {
                            scope.isFleetMap = true;
                        }
                        scope.setMap();
                    }
                    else {
                        //UtilityFactory.toastError('Error', $scope.returnMsg);
                    }
                }, function (errormsg) {
                    UtilityFactory.toastError('Error', $scope.returnMsg);
                });
            
        };

        function postLink(scope, element, attrs) {
            scope.$watch("currentTrip", function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != '') {
                    if (typeof newValue == "string"){
                        scope.currentTrip = JSON.parse(newValue);
                    }                     
                    else if (typeof newValue == "object") {
                        scope.currentTrip = newValue;
                        scope.setCurrentTripMap();
                    }
                }
            });

            scope.$watch("passenger", function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != '') {
                    if (typeof newValue == "string")
                    {
                        scope.passenger = JSON.parse(newValue);
                    }                        
                    else if (typeof newValue == "object")
                    {
                        scope.passenger = newValue;
                        scope.getCurrentActiveTrip()
                    }
                }

            });

            scope.$watch("dispatchSelectedRunId", function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != '') {
                    if (typeof newValue == "string") {
                        scope.dispatchSelectedRunId = JSON.parse(newValue);
                        scope.clearMarkers();
                        scope.selectedTripmarkerDetails = [];
                    }
                    else if (typeof newValue == "object") {
                        scope.dispatchSelectedRunId = newValue;
                        //scope.setNewDispatchSelectedRunId()
                    }
                }

            });

            scope.$watch("dispatchSelectedTrip", function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != '') {
                    if (typeof newValue == "string") {
                        scope.dispatchSelectedTrip = JSON.parse(newValue);
                        scope.selectedTripmarkerDetails = [];
                    }
                    else if (typeof newValue == "object") {
                        scope.selectedTripmarkerDetails = [];
                        scope.dispatchSelectedTrip = newValue;
                        scope.setSelectedTripMap();
                    }
                }

            });
        }

        
    }

})();


(function () {
    'use strict';

    angular.module('oneMVApp')
        .controller('ReservationsController',
		['$location', '$scope', '$state', '$timeout', '$window', '$uibModal',
         'ConfigFactory', 'ScheduleService', 'uiGmapIsReady', 'DivisionService', 'MessageBox',
         'UtilityFactory', 'authService', 'GeoLocationService', 'LocationFactory', 'RedirectionService', 'ProfileService', 'googleMapsConfig',
         'PageService',
          reservationsController]
        );

    function reservationsController
		($location, $scope, $state, $timeout, $window, $uibModal,
        ConfigFactory, ScheduleService, uiGmapIsReady, DivisionService, MessageBox,
		UtilityFactory, authService, GeoLocationService, LocationFactory, RedirectionService, ProfileService, googleMapsConfig
        ,PageService) {

        var vm = this;
        PageService.setTitle('New Reservation');
        PageService.setHeadline('On Demand');
        vm.reservationRequest = {};
        vm.reservationRequest.ReservationDate = new Date();
        vm.minDate = new Date();
        vm.maxDateAllowed = new Date(2017, 2, 28);

        vm.currentPassenger = { "Id": authService.authentication.passengerId };
        var operatorId = null;
        vm.userReservationOptions = {};
        vm.hasActiveTrip = false;
        vm.hasFutureTrips = false;
        vm.position = null;
        vm.reservationType = 'current';
        var divisionId = '';
        vm.homePassengerId = null;

        var closestPin, otherPin, locationPin, myLocationPin, hubIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {
            myLocationPin = 'images/pin-my-location.png';
        }
        else {
            myLocationPin = 'images/pin-my-location.svg';
        }

        var getActiveTrip = function () {
            ScheduleService.getlastripdetails(vm.currentPassenger.Id)
                .then(function (response) {
                    if (response.data.status === 1 && response.data.result) {
                        vm.hasActiveTrip = true;
                        
                    }
                    else {
                        ScheduleService.tripsForServiceDate(vm.currentPassenger.Id)
                        .then(function (response) {
                            if(response.data.status === 1 && response.data.result)
                            {
                                if (response.data.result.length > 0)
                                    vm.hasFutureTrips = true;
                            }

                        }, function (err) {
                            vm.hasFutureTrips = false;
                        });
                    }
                    //check current time and see if the window is in the future 
                }, function (err) {
                    vm.hasActiveTrip = false;
                    vm.hasFutureTrips = false;
                });
        }

        function populateDivisionParameters() {
            getActiveTrip();

            vm.userReservationOptions = {
                DivisionId: divisionId,
                OperatorId: operatorId
            };
            ConfigFactory.getDivisionParameters(divisionId)
                     .then(function (params) {
                         if (params) {
                             var options = vm.userReservationOptions;

                             options.passengersLimit = params.PassengersLimit ? eval(params.PassengersLimit) : 5;
                             options.allowWillCall = params.AllowWillCall ? eval(params.AllowWillCall.toLowerCase()) : false;
                             options.allowPassengerWillCall = params.AllowPassengerWillCall ? eval(params.AllowPassengerWillCall.toLowerCase()) : false;
                             options.allowEquipment = params.AllowEquipment ? eval(params.AllowEquipment.toLowerCase()) : false;
                             options.isAdvancedReservation = params.AllowAdvancedReservation ? eval(params.AllowAdvancedReservation.toLowerCase()) : false;
                             options.allowMultipleSeatBooking = params.AllowMultipleSeatBooking ? eval(params.AllowMultipleSeatBooking.toLowerCase()) : false;
                             options.isWheelChair = params.HasWheelChair ? eval(params.HasWheelChair.toLowerCase()) : false;
                             options.isCompanion = params.HasCompanions ? eval(params.HasCompanions.toLowerCase()) : false;
							 options.companionsLimit = params.HasCompanions == false ? 0: params.CompanionsLimit ? eval(params.CompanionsLimit): 1;
                             options.isPCA = params.HasPCA ? eval(params.HasPCA.toLowerCase()) : false;
                             options.isServiceAnimal = params.HasServiceAnimal ? eval(params.HasServiceAnimal.toLowerCase()) : false;
                             options.allowCustomLocation = params.AllowCustomLocation ? eval(params.AllowCustomLocation.toLowerCase()) : false;
                             options.promiseWindow = params.PromiseWindow ? eval(params.PromiseWindow) : 10;
                             options.reservationType = vm.reservationType;
                             options.allowOnlySameDayAdvRes = params.AllowOnlySameDayAdvRes ? eval(params.AllowOnlySameDayAdvRes.toLowerCase()) : false;
                             options.dropoffHomeLocationOnly = params.DropoffHomeLocationOnly ? eval(params.DropoffHomeLocationOnly.toLowerCase()) : false;
                             options.homePassengerId = options.dropoffHomeLocationOnly ? vm.currentPassenger.Id : null;
                             options.checkFRBeforeDRT = params.CheckFRBeforeDRT ? eval(params.CheckFRBeforeDRT.toLowerCase()) : false;
                             options.noOfFRArrivals = params.NoOfFRArrivals ? eval(params.NoOfFRArrivals) : 3;
                             options.allowASAPReservations = params.AllowASAPReservations ? eval(params.AllowASAPReservations) : false;
                             options.allowAppointments = params.AllowAppointments ? eval(params.AllowAppointments) : false;
                             options.allowLocationNotes = params.AllowLocationNotes ? eval(params.AllowLocationNotes) : false;
                             options.allowReservationOnlyWhenGpsIsOn = params.AllowBookingIffGpsIsOn ? eval(params.AllowBookingIffGpsIsOn) : false;
                             options.maxRadiusToAllowBooking = params.MaxRadiusToAllowBooking ? eval(params.MaxRadiusToAllowBooking) : false;
                             options.allowFaring = params.AllowFaring ? eval(params.AllowFaring) : false;

                             options.sameDayResLowerBound = params.SameDayResLowerBound ? params.SameDayResLowerBound : "00:00";
                             options.sameDayResUpperBound = params.SameDayResUpperBound ? params.SameDayResUpperBound : "24:00";
                             options.futureResLowerBound = params.FutureResLowerBound ? params.FutureResLowerBound : "00:00";
                             options.futureResUpperBound = params.FutureResUpperBound ? params.FutureResUpperBound : "24:00";
                             options.allowChildren = params.AllowChildren ? eval(params.AllowChildren) : false;
                             options.childrenLimit = params.ChildrenLimit ? eval(params.ChildrenLimit) : 3;

                             vm.reservationFormOptions = options;

                         	 // use TO home location if present
                             if (options.dropoffHomeLocationOnly) {
                             	$timeout(getDestinationHomeLocation, 0);
                             }

                             //extra options only needed by user reservations directive.
                             options.isPassenger = true;
                             options.isReadOnly = true;
                             options.autoRefresh = true;
                             options.batchDays = params.BatchDays ? eval(params.BatchDays) : 7;
                             options.minFromDays = params.MinFromDays ? eval(params.MinFromDays) : 30;
                             options.passengerBookingMinDays = params.PassengerBookingMinDays ? eval(params.PassengerBookingMinDays) : 0;
                             options.passengerBookingMaxDays = params.PassengerBookingMaxDays ? eval(params.PassengerBookingMaxDays) : 14;
                             vm.reservationFormOptions = options;
                         }
                     }, function (response) {
                         UtilityFactory.toastError('Error', response.data.ReturnMessage);
                     });

            getMap();
		}

        vm.onReservationSuccess = function (trip, isASAP) {
            vm.addedTrip = trip; //here we can display a trip on our existing map
            if (isASAP)
                $location.path('on-demand/active-trip');
            else {
                var scheduleTripDisplay = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/reservations/displayTrip-modal.html',
                    controller: 'DisplayScheduledTripController as vm',
                    size: '',
                    resolve: {
                        trip: function () {
                            return trip;
                        },
                        options :function(){
                            return vm.reservationFormOptions;
                        }                        
                    }
                });
                scheduleTripDisplay.result.then(function () {
                    //loadMasterRuns();
                });
                //open modal

            }
        };

        vm.showMap =false;
       vm.zoom = 15;
        vm.center = {
        latitude: 39.809860,
            longitude: -98.555183
            };
       vm.myStyles = googleMapsConfig.mapStyles;
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: vm.myStyles

        };
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };
        vm.mapControl = {};

        function getMap() {
            uiGmapIsReady.promise().then(function (maps) {
                ScheduleService.getServiceAreaLocation(divisionId).then(function (response) {
                    if (response.data.status == 1) {
                        vm.center.latitude = response.data.result.Latitude;
                        vm.center.longitude = response.data.result.Longitude;
                        if (response.data.result.ZoomLevel !== undefined && response.data.result.ZoomLevel !== null
                                && response.data.result.ZoomLevel != '')
                                    vm.zoom = response.data.result.ZoomLevel;
                    }
                    vm.showMap = true;

                });

                GeoLocationService.getCurrentPosition().then(function (position) {
                    vm.position = {
                        "coords": {
                            "Latitude": position.coords.latitude,
                            "Longitude": position.coords.longitude
                        },
                        "icon": vm.myLocationIcon
                    };

                    //here get closest location
                    LocationFactory.getLocations('', 'false', divisionId).then(function (result) {
                    	var filteredResults = angular.copy(result.data);
                    	var filteredResult = LocationFactory.findClosestLocation(vm.position.coords, filteredResults);
                    	//show selected location iff the current gps is within 300 ft of a building
                    	//1 mile ~= 5280 ft
                    	if (filteredResult && parseFloat(filteredResult.distance) * 5280 <= 300)
                    		$scope.$broadcast('closestLocation', filteredResult);

                    	// get destination Home location
                    }, function (err) {
                    });
                }, function (err) {
                    //position error
                });
            });
        }
		
        function getDestinationHomeLocation() {
            
        	ProfileService.GetHomeAddress(vm.currentPassenger.Id)
				.then(function (homeAddress) {
					$scope.$broadcast('homeLocationDisable', true);
					if (homeAddress) {
					    // set TO address to the home address
						vm.reservationRequest.ToLocation = homeAddress;
						var toAddressDisplay = (homeAddress.Name || '') + " " + (homeAddress.Address || '') + " " + (homeAddress.City || '') + " " + (homeAddress.Zip || '');
					    //
					    // On slow cell connections, this gets broadcast before reservationFormDirective.js gets loaded.
                        // So the home address is NEVER DISPLAYED!!!  You can test this by throttling connection at 2000 kbs.
                        // We need to $broadcast after waiting 4 seconds.
					    //
						$scope.$broadcast('homeLocation', homeAddress);
						$scope.$broadcast('homeLocationText', toAddressDisplay);
						$timeout(function () {
						    $scope.$broadcast('homeLocation', homeAddress);
						    $scope.$broadcast('homeLocationText', toAddressDisplay);
						    $scope.$broadcast('homeLocationDisable', true);
						}, 4000)
					} else {
						// ask passenger to create a home address
						var divisionParameters = DivisionService.getSystemParameters();
						if (! divisionParameters.DropoffHomeLocationEdit) {
							// get help phone number
							var helpPhone = DivisionService.getSupportPhoneNumber();
							var message = "Please call Help desk at " + helpPhone + " and ask them to create a Home Address for you.";
							MessageBox.info('Home Address is Required', message).then(function () {
								$window.history.back();
							});
						} else {
							// passenger has not set his home location, and may edit it, so show home address editor as a modal
							$uibModal.open({
								animation: true,
								backdrop: false,
								templateUrl: 'app/modules/shared/profile/home-address-modal.html',
								controller: function () { },
								size: ''
							}).closed.then(function () {
								// home address was changed - reload the page
								$state.reload();
							});
						}
					}
				},
				function (err) {
				    console.log('Error getting home location');
				    console.log(err);
				});
        }

        function activate(callback) {
            if (!authService.isLoggedIn()) {
                RedirectionService.save('/on-demand/reservations');
                $location.path('login');
            }
            else {
                divisionId = DivisionService.getDivisionId();
                if (divisionId != null && divisionId != undefined && divisionId != '') {
                    if (callback && typeof callback === "function")
                        callback();
                }
                else
                    $location.path('dashboard/');
            }
        }

        activate(populateDivisionParameters);

        // Start of code for Ionic
        vm.ionicInclude = 'app/modules/on-demand/reservations/reservations.html';
        vm.ionicCustomClassName = '';
        vm.disableScroll = true;
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

    };

})();
(function () {
    //debugger;

    'use strict';

    angular.module('oneMVApp').factory('ScheduleService', ScheduleService);
    ScheduleService.$inject = ['$http', '$q', 'ConfigFactory', 'authService', 'env', 'localStorageService', '$rootScope'];

    function ScheduleService($http, $q, ConfigFactory, authService, env, localStorageService, $rootScope) {
    var service = {
        getCurrentUser: getCurrentUser,
        getPassdatall: getPassdatall,
        getpassenger: getpassenger,
        schedulepost: schedulepost,
        cancelpost: cancelpost,
        getlastripdetails: getlastripdetails,
        updateEmailPhoneandAddress: updateEmailPhoneandAddress,
        getActiveRuns: getActiveRuns,
        getServiceAreaLocation: getServiceAreaLocation,
        getDriverGPS: getDriverGPS,
        getSearchPassanger: getSearchPassanger,
        getPastRuns: getPastRuns,
        savePastTrip: savePastTrip,
        getPassengerTrips: getPassengerTrips,
        getServiceDateByDivision: getServiceDateByDivision,
        getStates: getStates,
        searchPassenger: searchPassenger,
        tripsForServiceDate: tripsForServiceDate,
        getTripCancelStatusList: getTripCancelStatusList
    };
    return service;
    var value;


    function tripsForServiceDate(passengerId) {
        var deferred = $q.defer();

        var url = env.oneMVApiUrl  + 'passenger/' + passengerId + '/tripsForServiceDate';

        $http({
            method: 'GET',
            url: url + '?rnd=' + new Date().getTime(),
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err);
        });

        return deferred.promise;
    };


    function searchPassenger(divisionInfo, passengerId) {
        var deferred = $q.defer();

        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            var url = oneMVURL + "passenger/search/" + passengerId;
            $http({
                method: 'GET',
                url: url + '?rnd=' + new Date().getTime(),
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err);
            });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise;
    };


    function getStates() {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: '../Passenger/getStates?rnd=' + new Date().getTime(),
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err);
        });
        return deferred.promise;
    };

    function getCurrentUser() {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '../Operation/GetCurrentUser';
        $http({
            method: 'GET',
            'url': serviceUrl
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    function getPassdatall() {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '../Passenger/getpassDataauto?rnd=' + new Date().getTime();
        $http({
            method: 'GET',
            'url': serviceUrl
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    function getpassenger(passengerId) {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '../Passenger/GetPassDetailByPassId?rnd=' + new Date().getTime();
        $http({
            method: 'GET',
            'url': serviceUrl,
            params: { PassengerId: passengerId },
            dataType: "json",
            contentType: "application/json; charset=utf-8"
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };
    function getPassengerTrips(divisionId, passengerId, fromDate, toDate) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'passenger/' + passengerId +'/trips/' +
                                            fromDate + '/' + toDate + '?rnd=' + new Date().getTime();
                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    //data: JSON.stringify(passengerTripParam),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    function schedulepost(scheduleTripReqparam) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'passenger/' + scheduleTripReqparam.PassengerID + '/trip/schedule';
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify(scheduleTripReqparam),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    //call api to cancel trip
    function cancelpost(cancelreq) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'passenger/' + cancelreq.PassengerID + '/trip/cancel';
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify(cancelreq),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    //call api to get the last active trip details
    function getlastripdetails(passengerID) {
    		var deferred = $q.defer();
    		ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
    			if (oneMVURL && oneMVURL != "") {
    				//get the base url from config.
    				var serviceUrl = oneMVURL + 'passenger/' + parseInt(passengerID) + '/activeTrip?rnd=' + new Date().getTime();
    				$http({
    					method: 'GET',
    					'url': serviceUrl,
    					dataType: "json",
    					ContentType: "application/json; charset=utf-8"
    				}).then(function (response) {
    					$rootScope.$broadcast("hasActiveTripChanged", response.data.status == 1);
    					deferred.resolve(response);
    				}, function (err) {
    					deferred.reject(err)
    				});
    			}
    			else {
    				$log.error('Error: - Could not fetch service api url')
    				UtilityFactory.toastError("Could not fetch service api url");
    			}
    		});
    		return deferred.promise;
    };

    function updateEmailPhoneandAddress(newpassenger) {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '/Passenger/UpdateEmailPhoneandAddress';
        $http({
            method: 'POST',
            'url': serviceUrl,
            data: JSON.stringify(newpassenger),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    function getServiceAreaLocation(divisionId) {
        var deferred = $q.defer();
        //get the base url from config.
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                var serviceUrl = oneMVURL + "division/" + divisionId + "/serviceArea?rnd=" + new Date().getTime();

                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
        });
        return deferred.promise;
    };

    function getDriverGPS(tripId) {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '../Passenger/GetDriverGPS?rnd=' + new Date().getTime();
        $http({
            method: 'GET',
            'url': serviceUrl,
            params: {
                TripId: tripId
            },
            dataType: "json",
            contentType: "application/json; charset=utf-8",
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    //Search passanger  by clientpassangerid
    function getSearchPassanger(ClientPassangerID) {
        var deferred = $q.defer();
        //get the base url from config.
        var serviceUrl = '../Passenger/GetSearchPassanger?ClientPassangerID=' + ClientPassangerID;
        $http({
            method: 'GET',
            'url': serviceUrl,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
        }).then(function (response) {
            deferred.resolve(response);
        }, function (err) {
            deferred.reject(err)
        });
        return deferred.promise;
    };

    //call api to get the active runs for current service date
    function getActiveRuns(divisionId) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'Dispatch/GetRuns?rnd=' + new Date().getTime();
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify({ "DivisionId": divisionId, "ServiceDate": null }),
                    dataType: "json",
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    //call api to get the past runs for the service date
    function getPastRuns(divisionId, serviceDate) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'Dispatch/GetPastRuns?rnd=' + new Date().getTime();
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify({ "DivisionId": divisionId, "ServiceDate": serviceDate }),
                    dataType: "json",
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    //call api to the trips in the past
    function savePastTrip(saveTripReqparam) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'Dispatch/InsertPastTrip';
                $http({
                    method: 'POST',
                    'url': serviceUrl,
                    data: JSON.stringify(saveTripReqparam),
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    //call api to get the service date for the division
    function getServiceDateByDivision(divisionId) {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'division/' + divisionId + '/serviceDate?rnd=' + new Date().getTime();
                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;
    };

    function getTripCancelStatusList()
    {
        var deferred = $q.defer();
        ConfigFactory.getOneMVApiURLPromise().then(function (oneMVURL) {
            if (oneMVURL && oneMVURL != "") {
                //get the base url from config.
                var serviceUrl = oneMVURL + 'passenger/getCancellationReasons?rnd=' + new Date().getTime();
                $http({
                    method: 'GET',
                    'url': serviceUrl,
                    ContentType: "application/json; charset=utf-8"
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject(err)
                });
            }
            else {
                $log.error('Error: - Could not fetch service api url')
                UtilityFactory.toastError("Could not fetch service api url");
            }
        });
        return deferred.promise;

    }
}
})();


(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('TripNegotiationLogService', TripNegotiationLogService);

    TripNegotiationLogService.$inject = ['$http', '$q', 'env'];

    function TripNegotiationLogService($http, $q, env) {
        var service = {
            addApprovalLog: addApprovalLog,
            addRejectionLog:addRejectionLog
        };
        return service;

        function addApprovalLog(tripRequestId, negotiationLogId, modifiedBy) {
            var defer = $q.defer();
            var _url = env.oneMVApiUrl + "tripNegotiationLog/accept/" + tripRequestId + '/' + negotiationLogId + '/' + modifiedBy;
            $http({
                method: 'PUT',
                url: _url
            }).then(function successCallback(response) {
                if (response.data.status == 1) {
                    defer.resolve(response.data.result);
                } else {
                    defer.reject(response.data.result);
                }
            });
            return defer.promise;
        }

        function addRejectionLog(tripRequestId, modifiedBy) {
            var defer = $q.defer();
            var _url = env.oneMVApiUrl + "tripNegotiationLog/reject/" + tripRequestId + '/' + modifiedBy;
            $http({
                method: 'PUT',
                url: _url
            }).then(function successCallback(response) {
                if (response.data.status == 1) {
                    defer.resolve(response.data.result);
                } else {
                    defer.reject(response.data.result);
                }
            });
            return defer.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ForgotPasswordController', ForgotPasswordController);

    ForgotPasswordController.$inject = ['$scope', '$state', 'env', 'PasswordService', 'authService', 'vcRecaptchaService', 'DivisionService', 'PortalUtilityService', 'MessageService'];

    function ForgotPasswordController($scope, $state, env, PasswordService, authService, vcRecaptchaService, DivisionService, PortalUtilityService, MessageService) {
        var vm = this;
        vm.captchaPublicKey = env.captchaPublicKey;
        vm.WidgetCreate = widgetCreate;
        vm.setCaptchaResponse = setCaptchaResponse;
        
        vm.verifyEmail = verifyEmail;
        vm.cancel = cancel;
        
        var widgetId = -1;

        function setCaptchaResponse(response) {
            authService.verifyCaptcha(response).then(function (result) {
                if (!result.success)
                    vcRecaptchaService.reload(widgetId);
            },
                function (error) {
                });
        }

        function widgetCreate(_widgetId) {
            widgetId = _widgetId;
        }
        function cancel() {
            $state.go('loginOneMV');
        }
        function verifyEmail() {

            PasswordService.SendPasscode(vm.Email).then(function (response) {
                if (response.data && response.data.result) {
                    if (response.data.result.ChangeStatus)
                        $state.go('verify-update-password', { obj: { email: vm.Email } });
                    else {
                        vm.isClicked = !vm.isClicked;
                        MessageService.showError(response.data.result.ChangeStatusDescription);
                        
                    }
                }
            }, function (err) {
                vm.isClicked = !vm.isClicked;
                MessageService.showError(err);
                
            });

        };

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/login/forgot-password.html';
        vm.ionicCustomClassName = 'ionic-onemv-login';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        vm.showRecaptcha = !env.isIonic;
        // End of code for Ionic

        activate();

        function activate() {
            var divisionId = DivisionService.getDivisionId();
            if (!PortalUtilityService.hasValue(divisionId))
                $state.go("division");
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('LoginController', LoginController);

    LoginController.$inject = ['$location', '$scope', '$rootScope', 
        'authService', 'env', 'MessageService', 'DivisionService', 'ConfigFactory',
        'GeoLocationService', 'ServiceAreaService', '$timeout', '$window','PageService'];

    function LoginController($location, $scope, $rootScope, 
                            authService, env, MessageService, DivisionService, ConfigFactory, GeoLocationService, ServiceAreaService,
                            $timeout, $window, PageService) {
        var vm = this;        
        var division = {};
        var divisionSupportsFeed = false;
        vm.message = "";
        //vm.alias = '';
        vm.providers = [];
        $scope.hideHeader = $location.path() === '/login';
        vm.isAmazonProvider = false;

        vm.navigateToHome = function () {
            window.history.back();
        };

        vm.allowedToLoginOrRegister = false;
        vm.loginOrRegisterMessage = '';
        vm.hasGpsBeenChecked = false;
        vm.PageService = PageService;
        vm.PageService.setTitle('Whats New');
        vm.PageService.setHeadline('Latest Service Updates');
        var activate = function () {

            DivisionService
                .getDivisionInfo()
                .then(onDivisionSuccess, onDivisionFailure);
        };

        function getSystemParams() {
            ConfigFactory
                .getDivisionParameters(division.DivisionID)
                .then(function (params) {
                    if (params) {
                        divisionSupportsFeed = params.DivisionSupportsFeed
                                                ? eval(params.DivisionSupportsFeed.toLowerCase())
                                                : true;

                        var allowRegisterIffGpsIsOn = params.AllowRegisterIffGpsIsOn
                                                        ? eval(params.AllowRegisterIffGpsIsOn)
                                                        : false;
                        if (allowRegisterIffGpsIsOn)
                        {
                            isGpsEnabled();
                        } else {
                            vm.allowedToLoginOrRegister = true;
                            vm.hasGpsBeenChecked = true;
                        }

                    }
                });
        }

        function isGpsEnabled() {
            GeoLocationService
                   .getCurrentPosition()
                   .then(function (position) {
                       if (position) {
                           isInServiceArea(position);
                       }
                       else
                           disableLogin('Your device is unable to determine your GPS location.');
                   }, function (err) {
                       disableLogin('GPS must be enabled to use this application.');
                   });
        }


        function isInServiceArea(position) {
            vm.hasGpsBeenChecked = true;
            ServiceAreaService
                .isInServiceArea(division.DivisionID, position.coords.latitude, position.coords.longitude)
                .then(function (response) {
                    if (response && !response.data.result) {
                        disableLogin('You must be within the service area to login or register.');
                    } else{
                        vm.allowedToLoginOrRegister = true;
                    }
                }, function (error) {
                    disableLogin('We are unable to verify your GPS location. Please try again later.');
                })
        }


        function disableLogin(message) {
            vm.hasGpsBeenChecked = true;
            vm.allowedToLoginOrRegister = false;
            vm.loginOrRegisterMessage = message;
            // navigate to dashboard after 10 seconds.
            vm.redirectTimeout = $timeout(function () {
                $window.location.replace('#/');
            }, 10000);
        }
        // kill the timeout if the user navigates away before 10 seconds.
        $scope.$on("$destroy", function () {
            if (vm.redirectTimeout) {
                $timeout.cancel(vm.redirectTimeout);
            }
        });
        function onDivisionSuccess(response) {
            if (response.data.status === 1) {
                division = response.data.result;
                vm.alias = division.Alias;
                var logins = response.data.result.AllowedLogins;
                var providers = logins.split(',');
                for (var i = 0; i < providers.length; i++) {
                    vm.isAmazonProvider = providers[i].toLowerCase() == "amazon";
                    vm.providers.push({ 'name': providers[i] });
                }

                getSystemParams();
            }            
        };

        function onDivisionFailure(error) {
            $location.path("dashboard/");
        }        

        activate();

        vm.ionicUseExternalLink = env.ionic == null ? false :  env.ionic.appVersion == 'v9.6.52';

        vm.authExternalProvider = function (provider) {
            if (provider == 'OneMV' || provider == 'One MV')
            {

                $location.path('loginOneMV');
                return;
            } else if (provider == 'Google' && $('body').hasClass('platform-cordova')) {
                $location.path('loginGoogleIonic');
                return;
            }
            var redirectUri = location.protocol + '//' + location.host + '';
            // for IONIC
            if ($('body').hasClass('platform-ios') || $('body').hasClass('platform-android')) {
                // for the mobile IONIC app iOS and Android version, 
                // this is a dummy URL that will work in the InAppBrowser plugin
                redirectUri = 'http://localhost/callback/';
            }
            if ($('body').hasClass('platform-browser')) {
                // for running IONIC version locally.
                redirectUri += '/index.ionic.html#';
            }

           var externalProviderUrl = env.authServerUrl  + "Account/ExternalLogin?provider=" + provider
                                                                        + "&response_type=token&client_id=" + env.audience
                                                                        + "&redirect_uri=" + redirectUri
                                                                        + "&divisionSupportsFeed=" + divisionSupportsFeed
                                                                        + "&divisionId=" + DivisionService.getDivisionId();
            // If body has class 'platform-cordova', then we are on a mobile device.
            // When on a mobile device, we need to use the cordova inappbrowser
            if ($('body').hasClass('platform-cordova')) {
                var target = '_blank';
                var options = 'location=no,toolbar=yes,clearcache=yes,clearsessioncache=yes,closebuttoncaption=Back to Passenger App,toolbar=yes,transitionstyle=coververtical';
                var ref = window.open(externalProviderUrl, target, options);
                ref.addEventListener('loadstart', function (event) {
                    if (event.url.indexOf('http://localhost/callback/#') == 0 || event.url.indexOf('file:///#/') == 0) {
                        var newLocation = event.url.substring(event.url.indexOf('#'), event.url.length);
                        ref.close();
                        window.location = newLocation;
                    }
                });
                ref.addEventListener('loaderror', function (event) {
                    console.log('loaderror:' + JSON.stringify(event));
                });
            } else {
                window.location = externalProviderUrl;
            }
        };

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/login/login.html';
        vm.ionicCustomClassName = 'ionic-login-class';
        vm.ionicHideNavBar = true;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
      
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('OneMVLoginController', OneMVLoginController);

    OneMVLoginController.$inject = ['$location', '$scope', '$rootScope', 
        'authService', 'env', 'MessageService', 'DivisionService', 'PageService'];

    function OneMVLoginController($location, $scope, $rootScope,
                            authService, env, MessageService, DivisionService, PageService) {
        var vm = this;
        vm.login = login;
        vm.cancel = cancel
        vm.divisionId = DivisionService.getDivisionId();
        vm.PageService = PageService;
        vm.PageService.setTitle('Login');
        vm.PageService.setHeadline('With your ONEMV account');
        function cancel()
        {
            $location.path('dashboard/');
        }
        function login() {
            //call one mv login
            var request = {
                UserName: vm.username,
                Password: vm.password,
                DivisionId: vm.divisionId,
                Provider: 'MvLogin'
            }
                     //will call a service
            authService.loginOneMV(request).then(function (response) {
                $rootScope.$broadcast('loggedIn', null);
                $location.path('dashboard/');
            }, function errorCallback(error) {
                //call message service
                vm.isClicked = !vm.isClicked
                if(error)
                    MessageService.showError(error.Message);
            });
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/login/onemv-login.html';
        vm.ionicCustomClassName = 'ionic-onemv-login';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

        function activate() {
            
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('VerifyUpdatePasswordController', VerifyUpdatePasswordController);

    VerifyUpdatePasswordController.$inject = ['$scope', '$state', '$stateParams', '$location','env', 'PasswordService', 'MessageService', 'authService'];

    function VerifyUpdatePasswordController($scope, $state, $stateParams, $location, env, PasswordService, MessageService, authService) {
        var vm = this;
        vm.submit = submit;
        
        vm.captchaPublicKey = env.captchaPublicKey;
        vm.WidgetCreate = widgetCreate;
        vm.setCaptchaResponse = setCaptchaResponse;
        vm.email = ($stateParams.obj) ? $stateParams.obj.email : "";
        var queryString = $location.search();
        if (queryString)
        {
            if (queryString.email)
                vm.email = queryString.email;
            if (queryString.division)
                vm.division = queryString.division;
            
        }
      

        var widgetId = -1;

        function setCaptchaResponse(response) {
            authService.verifyCaptcha(response).then(function (result) {
                if (!result.success)
                    vcRecaptchaService.reload(widgetId);
            },
                function (error) {
                });
        }

        function widgetCreate(_widgetId) {
            widgetId = _widgetId;
        }



       
        function submit()
        {
            if (vm.newPassword != vm.repeatNewPassword)
            {
                MessageService.showError("New and Repeat Passwords don't match.")
                vm.isClicked = !vm.isClicked;
                return;
            }
            var passwordData = {
                TemporaryCode: vm.temporaryCode,
                Email: vm.email,
                NewPassword: vm.newPassword
            }
            PasswordService.VerifyAndUpdatePassword(passwordData).then(function (response) {
                if (response.data && response.data.result && response.data.result) {
                    if (response.data.result.ChangeStatus) {
                        $state.go("loginOneMV");
                    }
                    else {
                        vm.isClicked = !vm.isClicked;
                        MessageService.showError(response.data.result.ChangeStatusDescription);
                    }
                }
                else {
                    MessageService.showError("Could not update password");
                    vm.isClicked = !vm.isClicked;
                }
              
            }, function (err) {
                MessageService.showError(err);
                vm.isClicked = !vm.isClicked;
            });
          
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/login/verify-update-password.html';
        vm.ionicCustomClassName = 'ionic-onemv-login';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        vm.showRecaptcha = !env.isIonic;
        // End of code for Ionic

        activate();

        function activate() {
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('DivisionsController', DivisionsController);

    DivisionsController.$inject = ['$window', '$scope', '$rootScope', '$location', 'DivisionService', 'GeoLocationService',
        'CommonService', 'env','UtilityFactory'];

    function DivisionsController($window, $scope, $rootScope, $location, DivisionService, GeoLocationService, CommonService, env,UtilityFactory) {
        //figure out gps is on or off. If on then find divisions in same state and state drop down
        var vm = this;
        vm.divisions = [];
        vm.selectedDivision = '';
        vm.isDivisionLoaded = false;
        vm.showDivisionDropdown = true;
        vm.states = [];
        var noDivision = { 'Alias': '--', 'DivisionName': '--' };
        var noState = { 'Name': '--', 'Id': '--' };
        vm.setDivision = setDivision;
        vm.fetchDivisionsForSelectedState = fetchDivisionsForSelectedState;

        activate();
        function populateDivisions(response) {

            if (response.data.result != null && response.data.result.length > 0) {
                vm.divisions = response.data.result;
                vm.divisions.splice(0, 0, noDivision);
                if (env.isIonic && env.isIonicDevice) {
                    // In passenger app, lets select Amazon, or remove amazon from
                    // the drop down based on env.ionic.divisionName
                    if (env.ionic.divisionName == 'amazon') {
                        // Its Amazon, select Amazon and GO
                        vm.selectedDivision = 'amazon';
                        vm.setDivision();
                    } else {
                        // Not Amazon, remove Amazon from the list.
                        var exclusions = [206]; // add any divisions that have their own app to this array.
                        angular.forEach(vm.divisions, function (value, key) {
                            if (exclusions.indexOf(parseInt(value.DivisionID)) != -1) {
                                var index = vm.divisions.indexOf(value);
                                if (index > -1) {
                                    vm.divisions.splice(index, 1);
                                }
                            }
                        })
                    }
                }


                vm.selectedDivision = vm.divisions[0].Alias;
                vm.isDivisionLoaded = true;
            }
        }

        function activate() {
            if (env.isIonic && env.isIonicDevice && env.ionic.divisionName == 'amazon') {
                // Its Amazon, select Amazon and GO
                vm.selectedDivision = 'amazon';
                vm.setDivision();
            }
            GeoLocationService.getCurrentPosition().then(function (position) {
                var latitude = position.coords.latitude
                var longitude = position.coords.longitude
                DivisionService.getDivisionsByLocation(latitude, longitude).then(populateDivisions, function (error) {
                    vm.isDivisionLoaded = true;
                    vm.showDivisionDropdown = false;
                });
            });
            CommonService.GetStatesWithDivisions().then(
                function (result) {
                    vm.states = result;
                    vm.states.splice(0, 0, noState);
                    vm.selectedState = vm.states[0].Id;
                },
                function (err) {
                    UtilityFactory.toastError('', "Could not load states list. Please try again later.")
                });
            //DivisionService.getDivisions()
            //    .then(populateDivisions, function (error) {
            //        vm.isDivisionLoaded = true;
            //        vm.showDivisionDropdown = false;
            //    })
        };

        $scope.reloadPage = function () { $window.location.reload(); };

        function setDivision() {
            if (vm.selectedDivision != noDivision.Alias) {
                var alias = vm.selectedDivision;
                $location.path('dashboard/' + alias);
            }
        }
        function fetchDivisionsForSelectedState() {
            if (vm.selectedState != noState.Id) {
                vm.divisions = [];
                vm.divisions.splice(0, 0, noDivision);
                DivisionService.getDivisionByState(vm.selectedState)
                    .then(populateDivisions, function (error) {
                        vm.isDivisionLoaded = true;
                        vm.showDivisionDropdown = false;
                    });
            }
        }
        // Start of code for Ionic
        if (env.isIonic) {
            vm.env = env.ionic.env;
        } else {
            vm.env = '';
        }
        vm.refresh = function (refresher) {
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
        }
        // End of code for Ionic

    }
    
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('LogoutController', LogoutController);

    LogoutController.$inject = ['$location', '$rootScope', 'authService'];

    function LogoutController($location, $rootScope,authService) {
           var vm = this;
           authService.logOut().then(function () {
               $rootScope.$broadcast('loggedout', null);
               $location.path('dashboard/');
           }, function () {
               console.log('Unable to sign-out user.');
           })
           
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('MinAppSupportController', MinAppSupportController);

    MinAppSupportController.$inject = ['$rootScope', '$location', 'DynamicContentService', 'PageService', 'DivisionService'];

    function MinAppSupportController($rootScope, $location, DynamicContentService, PageService, DivisionService) {
        debugger;
        var vm = this;
        vm.PageService = PageService;
        var _error = 'This version is no longer supported. Please download the latest version from app store';
        vm.PageService.setTitle('App Error');
        vm.PageService.setHeadline('This version is no longer supported');

        function activate() {
            if (DivisionService.getDivisionId())
                DivisionService
                     .getDivisionInfo()
                 .then(handleSuccess, handleFailure);
            else
                handleFailure();
        }

        function handleSuccess(response) {
            if (response.data.status === 1) {
                var division = response.data.result;
                vm.ErrorMessage = division.MinAppError
            }
        }

        function handleFailure() {
            vm.ErrorMessage = _error;
        }

        activate();

        // Start of code for Ionic
        //vm.ionicInclude = 'app/shared/whats-new/whats-new.html';
        //vm.ionicCustomClassName = 'ionic-whats-new card';
        //vm.ionicHideNavBar = false;
        //vm.ionicUseRefresher = true;
        //vm.ionicPullingText = 'Refresh';
        //vm.ionicRefreshingText = 'Loading';
        //vm.ionicSpinner = 'spiral'; // none to disable.
        //vm.refresh = function (refresher) {
        //    getData();
        //    $rootScope.$broadcast('scroll.refreshComplete');

        //}
        // End of code for Ionic
    }
})();

(function () {
    angular.module('oneMVApp').controller('nav', nav);


    nav.$inject = [ '$scope', '$location', '$rootScope', '$uibModal', '$timeout', '$interval',
                    'authService', 'ScheduleService', 'DivisionService','OneMvServices'];

    function nav($scope,$location, $rootScope, $uibModal, $timeout, $interval,
                    authService, ScheduleService, DivisionService,OneMvServices) {

        $scope.title = 'MOBI';
        $scope.hasActiveTrip = false;
        var autoRefresh = undefined;
        var modalVehicleArriving = false;
        var modalVehicleArrived = false;
        $scope.parentState = undefined;
        var allowedServices =  DivisionService.getAllowedServices();       

        var menus = [
            {
                "name": "commuter",
                "service": "commuter",
                "url": "commuter/home-commuter",
                "order": 6,
                "class": "link--commuter",
                "level": 1,
                "isServiceMenu" :true,
                "subPages": [
                  {
                      "name": "Advanced Reservations",
                      "url": "commuter/adv-schedule-setup",
                      "service": "commuter",
                      "showOffline": false,
                      "order": 7
                  },
                  {
                      "name": "Bus Stops",
                      "url": "commuter/all-stops",
                      "service": "commuter",
                      "order": 8
                  },
                  {
                      "name": "Published Schedule",
                      "url": "commuter/published-schedule",
                      "service": "commuter",
                      "order": 9
                  },
                ]
            },
          {
              "name": "drt",
              "isServiceMenu" :true,
              "order": 10,
              "url": "on-demand/reservations",
              "service": "drt",
              "class": "link--demand",
              "showOffline": false,
              "level": 1,
              "subPages": [
                {
                    "name": "Active Trip",
                    "url": "on-demand/active-trip",
                    "service": "drt",
                    "showOffline": false,
                    "showActive": false,
                    "order": 11
                }
              ]

          },
          {
              "name": "fixed",
              "isServiceMenu" :true,
              "url": "fixed-route/landing",
              "service": "fixed",
              "class": "link--fixed",
              "order": 12,
              "level": 1,
              subPages: [
                {
                    "name": "Routes",
                    "url": "fixed-route/allRoutes",
                    "service": "fixed",
                    "order": 13
                },
                {
                    "name": "Stops",
                    "url": "fixed-route/stops",
                    "service": "fixed",
                    "order": 14
                },
                {
                    "name": "Schedule",
                    "url": "fixed-route/schedule",
                    "service": "fixed",
                    "order": 15
                },
                {
                    "name": "Published Schedule",
                    "url": "http://thebus.mobi/content/documents/amz-published-schedule.pdf",
                    "service": "fixed",
                    "isExternal": true,
                    "order": 16
                }
              ]
          },
          {
              "name": "My Trips",
              "url": "passenger-trips",
              "service": "drt,commuter",
              "class": "link--trips",
              "order": 17,
              "showOffline": false,
              "level": 1           
          },

          //shared Pages
          {
              "name": "User Profile",
              "id": "menuProfile",
              "url": "shared/profile",
              "service": "commuter,fr,drt",
              "showOffline": false,
              "isProfileMenu": true,
              "order": 20,
              "level": 2
          },
          {
              "name": "Change Password",
              "id": "changePassword",
              "url": "change-password",
              "service": "commuter,fr,drt",
              "showOffline": false,
              "isOneMV": true,
              "order": 21,
              "level": 2
          },
          {
              "name": "Manage Vehicles",
              "url": "commuter/my-vehicles",
              "service": "commuter",
              "showOffline": false,
              "order": 22,
              "level": 2
          },
          {
              "name": "What's New",
              "url": "news",
              "service": "commuter,fr,drt",
              "order": 23,
              "level": 2
          },
          {
              "name": "Policies",
              "url": "commuter/policy",
              "service": "commuter",
              "order": 24,
              "level": 2
          },
          {
              "name": "Support",
              "url": "support",
              "service": "commuter",
              "order": 25,
              "level": 2
          },
          {
              "name": "Notifications",
              "url": "notifications",
              "service": "commuter,fr,drt",
              "order": 26,
              "level": 2
          },
          {
              "name": "Settings",
              "url": "settings",
              "service": "commuter,drt,fr",
              "showOffline": false,
              "order": 27,
              "level": 2
          },
          {
              "name": "Sign in",
              "url": "login",
              "service": "commuter,drt",
              "order": 28,
              "showOffline": true,
              "level": 2
          },
          {
              "name": "Sign out",
              "url": "logout",
              "service": "commuter,drt",
              "order": 29,
              "showOffline": false,
              "level": 2
          }

        ];

        $scope.pagelink = function (url, app, showAsModal, event, isExternal) {
            if (app != null) {
                $scope.ionicToggleMenu()
            }            

            //if we have multiple modals needed on menu clicks tomorrow, we need to pass controller and markup as menu properties.
            if (showAsModal) {
                showNotificationModal();
            } else if (!angular.isUndefined(isExternal) && isExternal) {
                window.open(url, '_system', '');
            } else {
                if (url)
                    $location.path(url);
                else $location.path('#');
            }
        }

        function showNotificationModal() {

            $uibModal.open({
                animation: true,
                templateUrl: 'app/shared/notification/notification.html',
                controller: 'NotificationController as vm',
                size: ''
            });
        }


        // returns true if the current router url matches the passed in url
        // so views can set 'active' on links easily
        $scope.isActive = function (name) {
            return isCommuterLink(name) || isMyTripsLink(name) || isDrtLink(name) || isFixedRouteLink(name);            
        };

        function isMyTripsLink(name){
            return name == 'My Trips' 
                    && ($location.path() == '/passenger-trips');
        }    

        function isDrtLink(name){
            return $location.path().indexOf('on-demand') > -1 && name === 'drt';
        }

        function isCommuterLink(name){
            return $location.path().indexOf('commuter') > -1 && name === 'commuter';
        }

        function isFixedRouteLink(name){
            return $location.path().indexOf('fixed-route') > -1 && name === 'fixed';
        }


        $scope.closeDropDown = function () {
            $scope.isopen = false;
        };

        $scope.goBack = function (event) {
            angular.element('#page-wrapper').addClass('back');
            $timeout(function () {
                angular.element('#page-wrapper').removeClass('back');
            }, 1000);
            window.history.back();
        };
       
        function onlineMenus(menu) {
            var result = angular.isUndefined(menu.showOffline) || !menu.showOffline;
            if (result && menu.isProfileMenu) {
                // show profile menu only if dropoff Home location only is true
                // note: remove this limitation when non home location items are added to Profile
                var param = DivisionService.getSystemParameters();
                result = param.DropoffHomeLocationOnly;
            }
            if (result && menu.isOneMV) {
                result = authService.authentication.loginProvider === "MvLogin";
            }
            return result;
        };


        function offlineMenus(menu) {
            return angular.isUndefined(menu.showOffline) || menu.showOffline;
        };

        function allowedForDivision(menu) {            
            if (allowedServices) {
                var menuServices = menu.service.split(',');

                for (var i = 0; i < menuServices.length; i++) {
                    for(var j = 0;j<allowedServices.length;j++){
                        if(allowedServices[j].name.toLowerCase() == menuServices[i].toLowerCase())
                        return true;
                    }                        
                }
                return false;
            }

            return false;
        }

        function sortByOrder(a, b) {
            return a.order > b.order;
        };

        function copy(o) {
            return Object.assign({}, o)
        };

        function toggleMenu() {
            var loginPredicate = authService.isLoggedIn() ? onlineMenus : offlineMenus;
            var divisionPredicate = allowedForDivision;

            var processedMenus = menus
              .map(copy)
              .filter(divisionPredicate)
              .filter(loginPredicate)
              .sort(sortByOrder);

            for (var i = 0; i < processedMenus.length; i++) {
                if (processedMenus[i].subPages)
                    processedMenus[i].subPages = processedMenus[i]
                    .subPages
                    .map(copy)
                    .filter(divisionPredicate)
                    .filter(loginPredicate)
                    .sort(sortByOrder);
            }

            $scope.pages = setPages(processedMenus);            
        }


        function setPages(pages) {

            if (!pages) return undefined;

            var menus = [];
            
            for (var i = 0; i < pages.length; i++) {
                var page = {
                    'alias': getMenuName(pages[i]),
                    'name' : pages[i].name,
                    'order': pages[i].order,
                    'service': pages[i].service,
                    'showAsModal': pages[i].showAsModal,
                    'class': pages[i].class,
                    'showActive': pages[i].showActive,
                    'level': pages[i].level
                };
                if (pages[i].url)
                    page.url = pages[i].url;
                if (pages[i].subPages)
                    page.subPages = setPages(pages[i].subPages);
                page.isExternal = pages[i].isExternal;
                menus.push(page);
            }
            return menus;
        }

        function getMenuName(menu){

            if(!menu.isServiceMenu) return menu.name;

            for(var i = 0;i <allowedServices.length;i++){
                if(menu.service.toLowerCase().includes(allowedServices[i].name.toLowerCase()))
                    return allowedServices[i].alias;
            }    
            return undefined;
        }

        function setActiveTripMenuItem(flag) {
            outer: for (var m in $scope.pages) {
                if ($scope.pages[m].name == "drt") {
                    inner: for (var subM in $scope.pages[m].subPages) {
                        if ($scope.pages[m].subPages[subM].name == "Active Trip") {
                            $scope.pages[m].subPages[subM].showActive = flag;
                            break outer;
                        }
                    }
                }
            }
        }

        function CheckVehicleStatusForTrip(passengerId) {
            if (!angular.isUndefined(OneMvServices.getDrtInfo()) && authService.isLoggedIn()) {
                var divisionId = '';
                ScheduleService.getlastripdetails(passengerId, divisionId).then(function (response) {
                    if (response.data.status === 1 && response.data.result) {
                        setActiveTripMenuItem(true);

                    } else {
                        setActiveTripMenuItem(false);
                    }
                    if (response.data.status == 1) {
                        var currentTripDetails = response.data.result;



                        if (!modalVehicleArriving && currentTripDetails.TripID != null && currentTripDetails.PickUpGeofenceTime != null && currentTripDetails.StartTime == null && currentTripDetails.OriginDepartTime == null) {
                            event.preventDefault();
                            $scope.modelinstance = $uibModal.open({
                                template: '<div class="modal__header" >' +
                                  '<h4 class="modal-title">Info</h4>' +
                                  ' </div>' +
                                  '<div class="modal__-body">' +
                                  '<p>Your vehicle will be arriving soon</p>' +
                                  '</div>' +
                                  '<div class="modal__footer">' +
                                  '<button class="btn btn-warning" type="button" ng-click="close()">OK</button>' +
                                  ' </div>',
                                scope: $scope,
                                replace: true,
                                backdrop: 'static',
                                keyboard: false
                            });
                            modalVehicleArriving = true;
                        } else if (!modalVehicleArrived && currentTripDetails.TripID != null && currentTripDetails.StartTime != null && currentTripDetails.OriginDepartTime == null) {
                            if (modalVehicleArriving) {
                                modalVehicleArriving = false;
                                $scope.close();
                            };
                            event.preventDefault();
                            $scope.modelinstance = $uibModal.open({
                                template: '<div class="modal-header" >' +
                                  '<h3 class="modal-title">Info</h3>' +
                                  ' </div>' +
                                  '<div class="modal-body">' +
                                  '<p>Your vehicle has just arrived</p>' +
                                  '</div>' +
                                  '<div class="modal-footer">' +
                                  '<button class="btn btn-warning" type="button" ng-click="close()">OK</button>' +
                                  ' </div>',
                                scope: $scope,
                                replace: true,
                                backdrop: 'static',
                                keyboard: false
                            });
                            modalVehicleArrived = true;
                            stopAutoRefresh();
                        }
                    }
                }, function (err) {
                    console.log('CheckVehicleStatusForTrip', err);
                });
            }


        };

        $scope.close = function () {
            $scope.modelinstance.close();
            modalVehicleArrived = false;
            modalVehicleArriving = false;

        }

        function refresh() {
            $scope.pages = [];
            allowedServices =  DivisionService.getAllowedServices();
            toggleMenu();

            if (angular.isUndefined(autoRefresh) && !$rootScope.navAutoRefreshIsRunning) {
                autoRefresh = $interval(function () {
                    CheckVehicleStatusForTrip(authService.authentication.passengerId);
                }, 15000);
                $rootScope.navAutoRefreshIsRunning = !angular.isUndefined(autoRefresh);
            };
        };

        $scope.$on('$destroy', function (event) {
            stopAutoRefresh()
        });

        function stopAutoRefresh() {
            if (angular.isDefined(autoRefresh)) {

                $interval.cancel(autoRefresh);
                autoRefresh = undefined;
                $rootScope.navAutoRefreshIsRunning = false;
            };
        };

        $scope.$on('loggedIn', function () {
            refresh();
        });
        $scope.$on('loggedout', function () {
            refresh();
            stopAutoRefresh();
        });
      
        $scope.$on('divisionChanged', function () {
            refresh();
        });

        // show active trip menu item only if user has an active trip
        $scope.$on('hasActiveTripChanged', function (event, hasActiveTrip) {
            if ($scope.hasActiveTrip != hasActiveTrip) {
                $scope.hasActiveTrip = hasActiveTrip;
                setActiveTripMenuItem(hasActiveTrip);
                refresh();
            }
        });       

        refresh();



        $scope.toggleGroupIonic = function (group, isParent) {
            if (!$scope.isGroupShownIonic(group)) {
                $scope.shownGroupIonic = group;
            } else if (isParent) {
                $scope.shownGroupIonic = null;
            }
        };
        $scope.wipeLocalStorageInfo = function () {
            console.log('go 1');
            $rootScope.$broadcast('ionicShowSplashScreen');
            $scope.ionicToggleMenu();
            var ionicCHCPOn = window.localStorage['ionicCHCPOn'] ? window.localStorage['ionicCHCPOn'] : 'true';
            var localEnv = window.localStorage['env'] ? window.localStorage['env'] : '-dev';
            window.localStorage.clear();
            window.localStorage['ionicCHCPOn'] = ionicCHCPOn;
            window.localStorage['env'] = localEnv;
            window.location.replace('#/nav/division');
            $timeout(function () {
                window.location.reload(true);
            }, 500)
        };
        $scope.isGroupShownIonic = function (group) {
            return $scope.shownGroupIonic === group;
        };

        $scope.ionicToggleMenu = function () {
            $rootScope.$broadcast('ionicToggleLeftMenu');
        };

    }

})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('NotificationController', NotificationController);

    NotificationController.$inject = ['$uibModal','NotificationService', 'PageService', 'authService','OneMvServices'];

    function NotificationController($uibModal, NotificationService, PageService, authService, OneMvServices) {

        var vm = this;
        vm.title = 'Notifications';
        vm.PageService = PageService;
        vm.PageService.setTitle('Notifications');
        vm.PageService.setHeadline('Service updates');
        vm.commuterAlerts = [];
        vm.frNotifications = [];

        vm.isFrNotificationLoading = true;
        vm.isCommuterAlertLoading = false;
        vm.isCommuterNotificationLoading = false;
        vm.isDRTNotificationLoading = false;           
        vm.hasCommuter = false;
        vm.hasFixedRoute = false;
        vm.hasDRT = false;

        vm.commuterInfo = OneMvServices.getCommuterInfo();
        vm.fixedRouteInfo = OneMvServices.getFixedRouteInfo();
        vm.drtInfo = OneMvServices.getDrtInfo();

        vm.cancel = function () {
          //  $uibModalInstance.dismiss('cancel');
        };

        activate();

        vm.showTripInfo = showTripInfo;


        function showTripInfo(notification) {
            showCommuterTripInfo(notification.LinkedId);
        }

        function showCommuterTripInfo(tripId) {
            var commuterTripModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/shared/trips/commuter-trip-modal.html',
                controller: 'CommuterTripModalController as vm',
                size: '-fs',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                    tripId: tripId
                }
            });

            commuterTripModal.result.then(function (response) {
                if (response.cancelled || response.isModified) {
                    getCommuterNotifications();
                }
            });

        }

        function activate() {

        vm.isloggedIn = authService.isLoggedIn();
        
            if(!angular.isUndefined(vm.commuterInfo)){
                vm.hasCommuter = true;
                getCommuterNotifications();
            }
            if(!angular.isUndefined(vm.fixedRouteInfo)){
                vm.hasFixedRoute = true;
                getFixedRouteNotifications();
            }
            if(!angular.isUndefined(vm.drtInfo)){
                vm.hasDRT = true;
                getDRTNotifications();
            }
        }
        
        function getFixedRouteNotifications() {
            vm.isFrNotificationLoading = true;
            NotificationService
                .getFixedRouteNotification()
            .then(function (response) {
                vm.frNotifications = response.data.notifications;
                angular.forEach(vm.frNotifications, function (notification) {
                    notification.Title = notification.linkTitle;
                    notification.Message = notification.text;
                });
                vm.isFrNotificationLoading = false;
            }, function (error) {
                vm.isFrNotificationLoading = false;
            });
        }

        function getCommuterNotifications() {
            vm.isCommuterNotificationLoading = true;
            NotificationService
                .getCommuterNotifications()
             .then(function (response) {
                 vm.CommuterNotifications = response.data.result;
                 vm.isCommuterNotificationLoading = false;
             }, function (error) {
                 vm.isCommuterNotificationLoading = false;
             });
        };

        function getDRTNotifications() {
            vm.isDRTNotificationLoading = true;
            NotificationService
                .getDRTNotifications()
             .then(function (response) {
                 vm.DRTNotifications = response.data.result;
                 vm.isDRTNotificationLoading = false;
             }, function (error) {
                 vm.isDRTNotificationLoading = false;
             });
        };

    }
})();

(function () {
	"use strict";

	angular
        .module("oneMVApp")
        .directive("notificationItem", notificationItem);

	function notificationItem() {
		return {
			restrict: "E",
			scope: {
				data: "="
			},
			templateUrl: "app/modules/shared/notification/notification-item.component.html"
		};

	}
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('NotificationService', NotificationService);

    NotificationService.$inject = ['$http', '$q', 'env', 'authService', 'DivisionService'];

    function NotificationService($http, $q, env, authService, DivisionService) {

        var service = {
            getServiceAlerts: getServiceAlerts,
            getFixedRouteNotification: getFixedRouteNotification,
            getCommuterNotifications: getCommuterNotifications,
            getDRTNotifications: getDRTNotifications
        };
        return service;

        function getServiceAlerts() {
            var deferred = $q.defer();

            var route = authService.isLoggedIn() ? '/serviceAlertsForUser/' + authService.authentication.userId : '/serviceAlerts';

            var serviceUrl = env.commuterApiUrl + 'common/' + DivisionService.getDivisionId() + route + "?rnd=" + Date.parse(new Date());
            $http({
                method: 'GET',
                'url': serviceUrl
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        };
       
        function getFixedRouteNotification() {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                'url': env.oneMVFixedRouteApiUrl + "notifications/" + DivisionService.getDivisionId()
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }

        function getCommuterNotifications() {
            var deferred = $q.defer();
            var passengerId = authService.isLoggedIn() ? authService.authentication.passengerId : 0;
            var url = passengerId == 0
                ? env.oneMVApiUrl + "notifications/commuter/" + DivisionService.getDivisionId()
                : env.oneMVApiUrl + "notifications/commuter/" + DivisionService.getDivisionId() + '/' + passengerId;
            $http({
                method: 'GET',
                'url': url
            }).then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject();
            });
            return deferred.promise;
        }
        function getDRTNotifications() {
            var deferred = $q.defer();
            if (!authService.isLoggedIn())
                deferred.reject();
            else {
                var passengerId = authService.authentication.passengerId;
                var url = env.oneMVApiUrl + "notifications/DRT/" + DivisionService.getDivisionId() + '/' + passengerId;
                $http({
                    method: 'GET',
                    'url': url
                }).then(function (response) {
                    deferred.resolve(response);
                }, function (err) {
                    deferred.reject();
                });
            }
            return deferred.promise;
           
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ChangePasswordController', ChangePasswordController);

    ChangePasswordController.$inject = ['$location',
        'authService', 'env', 'MessageService', 'DivisionService', 'PageService', 'PasswordService'];

    function ChangePasswordController($location,
                            authService, env, MessageService, DivisionService, PageService, PasswordService) {
        var vm = this;
        vm.changePassword = changePassword;
        vm.cancel = cancel;
        vm.divisionId = DivisionService.getDivisionId();
        vm.PageService = PageService;
        vm.PageService.setTitle('Change Password');
        vm.PageService.setHeadline('Update your password');
        function cancel() {
            $location.path('dashboard/');
        }
        function changePassword() {
            if (vm.newPassword !== vm.newPasswordRetype) {
                MessageService.showError("New Password and Retype Password do not match");
                vm.isClicked = !vm.isClicked;
                return;
            }
                //call one mv login
            var request = {
                UserName: vm.username,
                OldPassword: vm.oldPassword,
                NewPassword: vm.newPassword,
                DivisionId: vm.divisionId,
                PassengerId: authService.authentication.passengerId,
                Provider: 'MvLogin'
            }
            //will call a service
            PasswordService.ChangePassword(request).then(function (response) {
                vm.isClicked = !vm.isClicked
                if (response.data && response.data.result) {
                    if (response.data.result.ChangeStatus) {
                        MessageService.showSuccess("Password Changed successfully");
                        vm.oldPassword = "";
                        vm.newPassword = "";
                        vm.newPasswordRetype = "";
                    } else {
                        MessageService.showError(response.data.result.ChangeStatusDescription);
                    }
                }
            }, function errorCallback(error) {
                //call message service
                vm.isClicked = !vm.isClicked
                if (error)
                    MessageService.showError(error.Message);
            });
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/profile/change-password.html';
        vm.ionicCustomClassName = 'ionic-onemv-login';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic

        function activate() {

        }

    }
})();
(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .directive('homeAddressDirective', homeAddressDirective);

	homeAddressDirective.$inject = ['$window', 'DivisionService', 'LocationFactory', 'authService', 'ProfileService', 'CommonService', 'UtilityFactory', '$uibModalStack'];

	function homeAddressDirective($window, DivisionService, LocationFactory, authService, ProfileService, CommonService, UtilityFactory, $uibModalStack) {
		return {
			controller: homeAddressController,
			replace: true,
			restrict: 'E',
			scope: {
				HomeAddress: '=?data',
				invalid: '=?invalid'
			},
			templateUrl: 'app/modules/shared/profile/homeAddress.html'
		};
		
		function homeAddressController($scope, $uibModalStack) {
			// initialize bindings
			$scope.hasModalParent = $uibModalStack.getTop() !== undefined;
			$scope.loading = true;
			$scope.invalid = true;
			$scope.hasHomeAddress = false;
			$scope.isContainerManagingData = $scope.HomeAddress !== undefined;
            // If HomeAddress is passed from the caller, use it.
			$scope.HomeAddress = $scope.HomeAddress == null ? {} : $scope.HomeAddress;
			$scope.HomeAddressSearch = {};
			$scope.googleLocations = [];
			$scope.states = [];
			$scope.countries = [{ name: 'United States', code: 'USA' }];

			// initialize globals
			$scope.divisionId = DivisionService.getDivisionId();
			$scope.passengerId = authService.authentication.passengerId;
			$scope.submitted = false;
			$scope.AddEdit = true;
			$scope.zipcode = "";
			$scope.stateabbr = "";
			$scope.isValidZip = false;
			$scope.allowEditHomeAddress = false;
			$scope.showHomeAddress = false;
			$scope.dataServiceTo = LocationFactory.dataServiceTo;

			// populate States list
			CommonService.GetAllStates().then(
				function (result) {
					$scope.states = result;
				},
				function (err) {
					UtilityFactory.toastError('', "Could not load states list. Please try again later.")
				});

			// return user to previous screen
			$scope.Cancel = function () {
				$uibModalStack.dismissAll();
				$window.history.back();
			};

			// user selected a home location
			$scope.SelectedHomeAddress = function (location) {
				// remember suite
				var suite = $scope.HomeAddressSearch.Suite;

				// set home location
				$scope.HomeAddressSearch = angular.copy(location);
				$scope.HomeAddressSearch.Suite = suite;

				// get the state Id
				$scope.HomeAddressSearch.StateId = $scope.states.filter(function (s) { return s.Abbr == location.State })[0].Id;
				$scope.HomeAddress = angular.copy($scope.HomeAddressSearch);

				// click the list radio button for this address
				$scope.HomeAddressGooglePlaceId = location.GooglePlaceId;

				$scope.invalid = false;
			}

			// search for home locations based on user input to search fields
			$scope.GoogleSearch = function () {
				$scope.invalid = true;
				$scope.googleLocations = [];
				UtilityFactory.toastInfo("Home Address - Search", "Searching for matching addresses. Please wait.");
				var state = $scope.states.filter(function (s) { return s.Id == $scope.HomeAddressSearch.StateId; })[0];
				var searchString = ($scope.HomeAddressSearch.Address || "") + ', ' + ($scope.HomeAddressSearch.City || "") + ', ' + ((state && state.Abbr) || "") + ', ' + ($scope.HomeAddressSearch.Zip || "");
				LocationFactory.getLocations(searchString, true, $scope.divisionId, $scope.passengerId, true).then(function (locations) {
					// convert Google location search to OneMV Location object
					for (var l = 0; l < locations.data.length; l++) {
						var address = locations.data[l].loc;
						var location = {};
						var add = "", streetNumber = "", streetName = "";
						for (var i in address.address_components) {
							var addressComponent = address.address_components[i];
							if (addressComponent.types[0] == "street_number") {
								streetNumber = addressComponent.short_name;
							}
							else if (addressComponent.types[0] == "route") {
								streetName = addressComponent.short_name;
							}
							else if (addressComponent.types[0] == "locality") {
								location.City = addressComponent.short_name;
							}
							else if (addressComponent.types[0] == "administrative_area_level_1") {
								location.State = addressComponent.short_name;
							}
							else if (addressComponent.types[0] == "postal_code") {
								location.Zip = addressComponent.short_name;
							}
							else {
								//do nothing
								var t = addressComponent;
							}
						}
						location.Address = streetNumber + ' ' + streetName
						location.Name = address.formatted_address;
						location.Latitude = address.geometry.location.lat;
						location.Longitude = address.geometry.location.lng;
						location.GooglePlaceId = address.place_id;

						$scope.googleLocations.push(location);
					}

					if ($scope.googleLocations.length == 0) {
						AddressNotFound();
					} else {
						$scope.hasHomeAddress = true; //assume user will choose a home address
					}
				}, function (err) {
					AddressNotFound();
				});
			};

			// user message if no addresses are found
			function AddressNotFound() {
				UtilityFactory.toastError('Find Home Address', "Home location not found. Please change address and try again.")
			}

			// update home address
			$scope.UpdateHomeAddress = function () {
				ProfileService.UpdateHomeAddress($scope.passengerId, $scope.HomeAddress)
					.then(
					function (response) {
						var message = response.data.result;
						if (response.data.status == 1) {
							$scope.submitted = true;
							UtilityFactory.toastSuccess('Success', message);
							setTimeout(function () {
								if ($scope.hasModalParent) {
									$uibModalStack.dismissAll();
								} else {
									$window.history.back();
								}
							}, 0);
						} else {
							UtilityFactory.toastError('Error', message);
						}
					},
					function (err) {
						var message = err.data.Result;
						UtilityFactory.toastError('Error', message);
					});
			};

			var activate = function () {
				// determine if home location should be displayed
			    $scope.showHomeAddress = ProfileService.ShowHomeAddress();
			    if ($scope.showHomeAddress) {
					// determine if passenger may edit home location
					$scope.allowEditHomeAddress = ProfileService.AllowEditHomeAddress();
				}

			    // read current passenger home address if not in the Profile page
				if (!$scope.isContainerManagingData) {
				    ProfileService.GetHomeAddress($scope.passengerId)
					.then(function (response) {
					    $scope.HomeAddress = response == null ? {} : response;
					    $scope.invalid = false;
					},
					function (err) {
					    $scope.error = err.error_description;
					});
				} 
			};

			// update the Suite separately
			$scope.isUpdatingSuite = false;
			$scope.$watch(
			"HomeAddressSearch.Suite",
			function () {
				$scope.isUpdatingSuite = true;
				$scope.HomeAddress.Suite = $scope.HomeAddressSearch.Suite;
			}, true);

			// HomeAddress is loaded either from the containing page, or from this control
			$scope.$watch(
			"HomeAddress", 
            
			function (source, data) {
			    if ($scope.isUpdatingSuite == true) {
			        $scope.isUpdatingSuite = false;
			    }
			    $scope.hasHomeAddress = false;
			    $scope.HomeAddressSearch = {};
			    if ($scope.HomeAddress) {
			        $scope.hasHomeAddress = $scope.HomeAddress.GooglePlaceId;
			        $scope.HomeAddressSearch = angular.copy($scope.HomeAddress);
			        if ($scope.HomeAddress && $scope.HomeAddress.GooglePlaceId) {
			            // initialize globals
			            $scope.googleLocations = [];

			            // load and select the current home address, if any
			            if ($scope.HomeAddress && $scope.HomeAddress.GooglePlaceId && $scope.HomeAddress.GooglePlaceId != "") {
			                $scope.googleLocations.push($scope.HomeAddress);
			                $scope.invalid = false;
			            }

			            $scope.loading = false;
			        }
			    }
				
			}, true);

			
		    //
		    // $onInit does not work in Ionic world.
		    // must execute activate() otherwise, add function to $onInit.
		    //
			if ($('body').hasClass('is-ionic')) {
			    $(document).ready(function () {
			        activate();
			    })
			} else {
			    this.$onInit = activate;
			}
		}
	}
})();

(function () {
	'use strict';

	angular
        .module('oneMVApp')
        .controller('ProfileController', ProfileController);

	ProfileController.$inject = ['$scope', '$rootScope', '$location', '$window', 'DivisionService', 'LocationFactory', 'authService', 'ProfileService', 'CommonService', 'UtilityFactory', 'LocationService', 'MessageService', 'RedirectionService','PageService'];

	function ProfileController($scope, $rootScope, $location, $window, DivisionService, LocationFactory, authService, ProfileService, CommonService, UtilityFactory, LocationService, MessageService, RedirectionService, PageService) {
		// initialize globals
		var vm = this;
		vm.PageService = PageService;
        vm.PageService.setTitle('Profile');
        vm.PageService.setHeadline('Latest Service Updates');
		vm.loading = true;
		vm.invalid = true;
		vm.passenger = {};
		vm.passenger.HomeAddress = {};
		vm.passengerId = authService.authentication.passengerId;
		vm.divisionId = DivisionService.getDivisionId();
		vm.submitted = false;

		// update profile
		vm.Cancel = function () {
			$window.history.back();
		};

		vm.UpdateProfile = function () {
			// update home address
			ProfileService.UpdateProfile(vm.passenger)
                .then(
                function (response) {
                	var message = response.data.result;
                	if (response.data.status == 1) {
                		vm.submitted = true;
                		UtilityFactory.toastSuccess('Success', message);
                		setTimeout(function () {
                			$window.history.back();
                		}, 0);
                	} else {
                		UtilityFactory.toastError('Error', message);
                	}
                },
                function (err) {
                	var message = err.data.Result;
                	UtilityFactory.toastError('Error', message);
                });
		};

		var activate = function () {
			if (!authService.isLoggedIn()) {
				RedirectionService.save('/shared/profile');
				$location.path('login');
			} else {
				vm.showHomeAddress = ProfileService.ShowHomeAddress();
				if (vm.showHomeAddress) {
					// determine if passenger may edit home location
				    vm.allowEditHomeAddress = ProfileService.AllowEditHomeAddress();
				}

				// read current passenger profile info
				ProfileService.GetProfile(vm.passengerId).then(function (response) {
				    vm.passenger = response;
				    vm.loading = false;

				},
				function (err) {
					vm.error = err.error_description;
					vm.loading = false;
				});
			}
		};
	    //
	    // $onInit does not work in Ionic world.
	    // must execute activate() otherwise, add function to $onInit.
	    //
		if ($('body').hasClass('is-ionic')) {
		    $(document).ready(function () {
		        activate();
		    })
		} else {
		    vm.$onInit = activate;
		}

		// Start of code for Ionic
		vm.ionicInclude = 'app/shared/profile/profile.html';
		vm.ionicCustomClassName = 'ionic-profile card';
		vm.ionicHideNavBar = false;
		vm.ionicUseRefresher = false;
		// End of code for Ionic
	}
})();

(function () {
    'use strict';
    angular.module('oneMVApp')
        .controller('DisplayPushMessageController', DisplayPushMessageController);

    DisplayPushMessageController.$inject = ['$uibModalInstance','messageTitle','messageBody','messageType'];

    function DisplayPushMessageController($uibModalInstance, messageTitle, messageBody, messageType) {
        var vm = this;
        vm.messageType = messageType;
        vm.messageTitle = messageTitle;
        vm.messageBody = messageBody;
        console.log('modal', vm);
        vm.close = function () {
            $uibModalInstance.close({ 'result': 'ok' });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ExternalRegistrationController', ExternalRegistrationController);

    ExternalRegistrationController.$inject = ['$location', '$timeout', '$rootScope', 'vcRecaptchaService',
        'authService', 'VerificationService', 'env', 'DivisionService', 'ConfigFactory', 'RedirectionService', 'PageService'];

    function ExternalRegistrationController($location, $timeout, $rootScope, vcRecaptchaService, authService,
        VerificationService, env, DivisionService, ConfigFactory, RedirectionService, PageService) {

        var vm = this;

        var widgetId = -1;
        vm.captchaPublicKey = env.captchaPublicKey;
        vm.WidgetCreate = widgetCreate;
        vm.setCaptchaResponse = setCaptchaResponse;

        vm.isClicked = false;
        vm.savedSuccessfully = false;

        vm.organisationIdLabel = '';
        vm.showOrganisationId = false;
        vm.showAllowSms = false;
        vm.showFirstName = false;
        vm.showLastName = false;
        vm.showClientTelephone = false;
        vm.allowSms = false;
        vm.telNum = '';
        vm.clientPassengerId = '';
        vm.PageService = PageService;
        vm.PageService.setTitle('New Account');
        vm.PageService.setHeadline('Create a ONEMV Login');

        var feedType = '';
        var registrationFailedMsg = "Failed to register. Please try again later.";

        function setCaptchaResponse(response) {
            authService.verifyCaptcha(response).then(function (result) {
                if (!result.success)
                    vcRecaptchaService.reload(widgetId);
            },
                function (error) {
                });
        }

        function widgetCreate(_widgetId) {
            widgetId = _widgetId;
        }

        var activate = function () {
            var divisionId = DivisionService.getDivisionId();

            DivisionService.getDivisionInfo()
                   .then(function (response) {
                       feedType = response.data.result.DivisionFeedType.FeedType;
                   });

            vm.registerData = {
                userName: authService.externalAuthData.userName,
                provider: authService.externalAuthData.provider,
                externalAccessToken: authService.externalAuthData.externalAccessToken,                
                divisionId: divisionId,
                firstName: authService.externalAuthData.firstName,
                lastName: authService.externalAuthData.lastName
            };

            vm.firstName = vm.registerData.firstName;
            vm.lastName = vm.registerData.lastName;
            vm.provider = vm.registerData.provider;

            vm.PageService.setHeadline(vm.provider +' Sign Up');

            ConfigFactory
                .getDivisionParameters(divisionId)
                .then(function (params) {
                    if (params) {
                        vm.organisationIdLabel = params.OrganisationIdLabel ? params.OrganisationIdLabel : 'Client Passenger Id';
                        vm.showOrganisationId = params.ShowOrganisationId ? eval(params.ShowOrganisationId.toLowerCase()): false;
                        vm.showAllowSms = params.ShowAllowSms ? eval(params.ShowAllowSms.toLowerCase()): false;
                        vm.showFirstName = params.ShowFirstName ? eval(params.ShowFirstName.toLowerCase()) : false;
                        vm.showLastName = params.ShowLastName ? eval(params.ShowLastName.toLowerCase()) : true;
                        vm.showClientTelephone = params.ShowClientTelephone ? eval(params.ShowClientTelephone.toLowerCase()) : false;
                }
            });

        };

        activate();

        vm.cancel = function () {
            RedirectionService.redirectTo('dashboard/');
        }

        vm.registerExternal = function () {

            vm.message = '';
            vm.isClicked = true;            

            VerificationService
               .passengerExists(vm.clientPassengerId)
               .then(function (response) {

                   if (response.data.status != 1) {
                       vm.message = registrationFailedMsg;
                       vm.isClicked = false;
                       return;
                   }

                   if (feedType == 'FeedOnly' && !response.data.result) {
                       //can't register as passenger not found for division that is feed only/
                       vm.message = "Passenger not found.";
                       vm.isClicked = false;
                       return;
                   }

                   register(response.data.result);
               });
        };


        function register(divisionSupportsFeed) {

            var mobileNo = vm.telNum;
            if (mobileNo && mobileNo != '')
                mobileNo = "+1" + mobileNo;
          
            vm.registerData.telephoneNumber = mobileNo;
            vm.registerData.allowSms = vm.allowSms;
            vm.registerData.divisionSupportsFeed = divisionSupportsFeed;
            vm.registerData.clientPassengerId = vm.clientPassengerId;
            vm.registerData.firstName = vm.firstName;
            vm.registerData.lastName = vm.lastName;

            authService.registerExternal(vm.registerData).then(function (response) {
                vm.savedSuccessfully = true;
                startTimer();
            }, function (error) {
                vm.message = error.Message;
                vm.isClicked = false;
                vcRecaptchaService.reload(widgetId);
            });
        }



        var startTimer = function () {
            var timer = $timeout(function () {
                $timeout.cancel(timer);
                $rootScope.$broadcast('loggedIn', null);
                RedirectionService.redirect();
            }, 2000);
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/registration/external-registration.html';
        //TODO Kevin. Please add correct custom class name.
        vm.ionicCustomClassName = 'ionic-template-external-registration';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        vm.showRecaptcha = !env.isIonic;
        // End of code for Ionic
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('OneMVRegistrationController', OneMVRegistrationController);

    OneMVRegistrationController.$inject = ['$location', '$scope', '$rootScope',
        'authService', 'env', 'MessageService', 'DivisionService', 'ConfigFactory', 'vcRecaptchaService','VerificationService', 'PageService'];

    function OneMVRegistrationController($location, $scope, $rootScope,
                            authService, env, MessageService, DivisionService, ConfigFactory, vcRecaptchaService, VerificationService, PageService) {
        var vm = this;
        vm.cancel = cancel;
        vm.register = register;        
        vm.captchaPublicKey = env.captchaPublicKey;
        vm.WidgetCreate = widgetCreate;
        vm.setCaptchaResponse = setCaptchaResponse;
        vm.message = '';        
        vm.organisationIdLabel = '';
        vm.showOrganisationId = false;
        vm.showAllowSms = false;
        vm.showFirstName = false;
        vm.showLastName = false;
        vm.showClientTelephone = false;
        var widgetId = -1;
        var divisionId = -1;
        var feedType = '';
        vm.clientPassengerId = '';
        vm.PageService = PageService;
        vm.PageService.setTitle('New Account');
        vm.PageService.setHeadline('Create a ONEMV Login');


        function cancel(){
            $location.path('dashboard/');
        }
        
        function setCaptchaResponse(response){
            authService.verifyCaptcha(response).then(function (result) {
                if(!result.success)
                    vcRecaptchaService.reload(widgetId);
            },
                function (error) {
            });
        }

        function widgetCreate(_widgetId){
            widgetId = _widgetId;
        }

        function register() {
            vm.message = '';
            vm.isClicked = true;
            VerificationService
               .passengerExists(vm.clientPassengerId)
               .then(function (response) {
                   if (response.data.status != 1) {
                       vm.message = "Failed to register. Please try again later.";
                       vm.isClicked = false;
                       return;
                   }

                   if (feedType == 'FeedOnly' && !response.data.result) {
                       //can't register as passenger not found for division that is feed only/
                       vm.message = "Passenger not found."
                       vm.isClicked = false;
                       return;
                   }

                   registerUser(response.data.result);
               });            
        }


        function registerUser(divisionSupportsFeed) {

            var mobileNo = vm.phoneNumber;
            if (mobileNo && mobileNo != '')
                mobileNo = "+1" + mobileNo;

            var registrationObject = {
                TelephoneNumber: mobileNo,
                AllowSMS: vm.sendSMS,
                UserName: vm.email,
                Password: vm.password,
                ConfirmPassword: vm.confirmPassword,
                ClientPassengerId: vm.clientPassengerId,
                DivisionId: divisionId,
                FirstName: vm.firstName,
                LastName: vm.lastName,
                Provider: 'MvLogin',
                DivisionSupportsFeed: divisionSupportsFeed
            };
            authService.registerOneMV(registrationObject).then(function (result) {
                $rootScope.$broadcast('loggedIn', null);
                $location.path('dashboard/');                
            }, function (error) {
                vm.message = error.Message;
                vm.isClicked = false;
                if (widgetId != -1) {
                    vcRecaptchaService.reload(widgetId);
                }                
            });
        }

        function activate() {

            divisionId = DivisionService.getDivisionId();


            DivisionService.getDivisionInfo()
         .then(function (response) {
             feedType = response.data.result.DivisionFeedType.FeedType;
         });


            ConfigFactory.getDivisionParameters(divisionId).then(function (params) {
                vm.organisationIdLabel = params.OrganisationIdLabel ? params.OrganisationIdLabel : 'Passenger Id';
                vm.showOrganisationId = params.ShowOrganisationId ? eval(params.ShowOrganisationId.toLowerCase()) : false;
                vm.showAllowSms = params.ShowAllowSms ? eval(params.ShowAllowSms.toLowerCase()) : false;
                vm.showFirstName = params.ShowFirstName ? eval(params.ShowFirstName.toLowerCase()) : false;
                vm.showLastName = params.ShowLastName ? eval(params.ShowLastName.toLowerCase()) : true;
                vm.showClientTelephone = params.ShowClientTelephone ? eval(params.ShowClientTelephone.toLowerCase()) : false;
            }, function (error) {
                vm.divisionHasFeed = false;
            });
        }

        activate();

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/registration/onemv-registration.html';
        vm.ionicCustomClassName = '';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        vm.showRecaptcha = !env.isIonic;
        // End of code for Ionic


    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('SettingsController', SettingsController);

    SettingsController.$inject = ['$rootScope', 'SettingsService', 'authService', 'UtilityFactory', 'PageService'];

    function SettingsController($rootScope, SettingsService, authService, UtilityFactory, PageService) {
        var vm = this;
        vm.isSettingsLoading = false;
        vm.isSettingsLoaded = false;
        vm.isSettingsUpdating = false;
        vm.settings = null;
        vm.updateSettings = updateSettings;
        vm.PageService = PageService;
        vm.PageService.setTitle('Settings');
        vm.PageService.setHeadline('Manage App Settings');
        
        function activate() {
            getSettings();
        }
        
        function getSettings() {
            vm.isSettingsLoading = true;
            vm.isSettingsLoaded = false;
            SettingsService
               .getSettings(authService.authentication.passengerId)
           .then(function (response) {
               if (response && response.length > 10)
                   response = response.substring((response.length-10));
               vm.clientTelephone = response;
               vm.isSettingsLoading = false;
               vm.isSettingsLoaded = true;
           }, function (error) {
               vm.isSettingsLoading = false;
           });
        }

        function updateSettings() {
            vm.isSettingsUpdating = true;
            var mobileNo = vm.clientTelephone;
            if (mobileNo != "" && !isNaN(mobileNo) && mobileNo > 0) {
                mobileNo = "+1" + mobileNo;
                var settings = {
                    "PassengerId": authService.authentication.passengerId,
                    "ClientTelephone": mobileNo
                }
                SettingsService
                   .updateSettings(settings)
               .then(function (response) {
                   if (response) {
                       UtilityFactory.toastSuccess('Success', 'Settings updates sucessfully');
                   } else {
                       UtilityFactory.toastError('Error', 'Could not update settings');
                   }
                   vm.isSettingsUpdating = false;
                   getSettings();
               }, function (error) {
                   UtilityFactory.toastError('Error', 'Could not update settings');
                   vm.isSettingsUpdating = false;
                   getSettings();
               });
            } else {
                UtilityFactory.toastError('Error', 'Please enter a valid number');
                vm.isSettingsUpdating = false;
            }
        }

        activate();
        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/settings/settings.html';
        vm.ionicCustomClassName = 'ionic-settings';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh Settings';
        vm.ionicRefreshingText = 'Loading Settings';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            activate();
            $rootScope.$broadcast('scroll.refreshComplete');
        }
        // End of code for Ionic
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('SettingsService', SettingsService);

    SettingsService.$inject = ['$http', '$q', 'env'];

    function SettingsService($http, $q, env) {
        var service = {
            getSettings: getSettings,
            updateSettings: updateSettings
        };

        return service;

        function getSettings(passengerId) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.oneMVApiUrl + "passenger/" + passengerId + '/settings' + "?rnd=" + Date.parse(new Date());
            $http.get(serviceUrl)
            .then(function (response) {
                if (response && response.data && response.data.status == 1)
                    deferred.resolve(response.data.result);
                else
                    deferred.reject(response.data.errors);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }


        
        function updateSettings(settings) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiUrl + 'passenger/settings';
            $http.post(serviceUrl, settings)
            .then(function (response) {
                if (response && response.data && response.data.status == 1)
                    deferred.resolve(response.data.result);
                else
                    deferred.reject(response.data.errors);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('SupportController', SupportController);

    SupportController.$inject = ['$rootScope', '$location', 'DynamicContentService', 'PageService'];

    function SupportController($rootScope,$location, DynamicContentService, PageService) {
        var vm = this;
        vm.PageService = PageService;
        vm.PageService.setTitle('Support');
        vm.PageService.setHeadline('FAQ');
        
        function getData() {
            DynamicContentService.getSupportFAQ().then(function (response) {
                if(response.data.status == 1)
                    vm.data = response.data.result.FAQContent;
            }, function (err) { 
                console.log('something is wrong');
            });
        }

        getData();
        // // Start of code for Ionic
        // vm.ionicInclude = 'app/shared/support/support.html';
        // vm.ionicCustomClassName = 'ionic-support card';
        // vm.ionicHideNavBar = false;
        // vm.ionicUseRefresher = true;
        // vm.ionicPullingText = 'Refresh Support';
        // vm.ionicRefreshingText = 'Loading Support';
        // vm.ionicSpinner = 'spiral'; // none to disable.
        // vm.refresh = function (refresher) {
        //     getData();
        //     $rootScope.$broadcast('scroll.refreshComplete');
        // }
        // // End of code for Ionic
    }
})();

(
    function () {
        'use strict';

        angular.module('oneMVApp')
        .controller('CommuterTripModalController', CommuterTripModalController);

        CommuterTripModalController.$inject = ['$uibModalInstance', '$uibModal', '$rootScope', 'tripId', 'authService',
            'MapService', 'ReservationService', 'MapIconService', 'vehicleService'];

        function CommuterTripModalController($uibModalInstance, $uibModal, $rootScope, tripId, authService,
             MapService, ReservationService, MapIconService, vehicleService) {

            var vm = this;
            var passengerId = authService.authentication.passengerId;
            var isModified = false;
            var markerEvents = [{ event: 'click', callback: iconClickHandler }];
            var noVehicle = { id: null, licenceplate: '--' };

            vm.show = false;
            vm.reservationInfo = {};
            vm.details = true;
            vm.markers = [];
            vm.cancel = cancelCommuterTrip;
            vm.modifyReservation = modifyReservation;            
            vm.close = close;
            vm.loading = true;
            vm.passengerVehicles = [];
            var existingVehicleId = undefined;
            vm.vehicleForReservation = undefined;
            vm.isWaitlisted = true;
            vm.selectedRating = 0;
            vm.canRateTrip = canRateTrip;
            vm.showRatingModal = showRatingModal;



            function showRatingModal() {
                if (!canRateTrip()) {
                    return false;
                }

                var modalInstance = $uibModal.open({
                    templateUrl: 'app/modules/commuter/modals/feedback-modal/commuter-feedback-modal.html',
                    controller: 'CommuterFeedbackModalController as vm',
                    resolve: {
                        feedbackInfo: function () {
                            return {
                                reservationId: vm.reservationInfo.id,
                                rating: vm.selectedRating,
                                comment: ''
                            }
                        }
                    }
                });

                modalInstance.result.then(function (result) {
                    if (!angular.isUndefined(result) && result.isSaved) {
                        getReservation(vm.reservationInfo.id);
                    }

                }, function () {
                    // dismiss
                });
            }

            function initializeMap() {
                vm.map = MapService.initializeMap();
            }

            function activate() {
                getReservation(tripId);
                initializeMap();
            }

            function setMapData() {
                buildQrCode();
                setMarkers();

                vm.loading = false;
            }

            function getReservation(reservationId) {

                ReservationService.getReservationById(passengerId, reservationId)
                .then(function (response) {
                    if (response.data.status === 1) {
                        vm.reservationInfo = response.data.result;
                        setWaitlistedStatus();
                        existingVehicleId = vm.reservationInfo.vehicleId;
                        vm.selectedRating = vm.reservationInfo.feedbackRating;
                        getPassengerVehicles();
                        setMapData();
                        canRateTrip();
                    }
                });
            }


            function canRateTrip() {                
                return vm.reservationInfo.feedbackRating == null || vm.reservationInfo.feedbackRating == undefined;
            }

            function setWaitlistedStatus() {
                vm.isWaitlisted = vm.reservationInfo.status == 'Waitlisted';
            }

            function getPassengerVehicles() {
                vehicleService.getVehiclesForPassenger(passengerId)
                .then(function (response) {
                    if (response.data.status === 1 && response.data.result.passengerVehicles != null)
                        vm.passengerVehicles = response.data.result.passengerVehicles;

                    if (vm.passengerVehicles.length > 0)
                        vm.passengerVehicles.splice(0, 0, noVehicle);
                    else
                        vm.passengerVehicles.push(noVehicle);

                    for (var i = 0; i < vm.passengerVehicles.length; i++) {
                        if (vm.passengerVehicles[i].id == existingVehicleId) {
                            vm.vehicleForReservation = vm.passengerVehicles;
                            break;
                        }
                    }


                }, function (error) {
                });
            }




            function buildQrCode() {
                var el = document.getElementById('ticketQRcode');

                var lqrcode = new QRCode(el, {
                    width: 100,
                    height: 100,
                    text: vm.reservationInfo.encryptedId,
                    correctLevel: 1,
                    useSVG: true
                });

            }

            activate();

            function cancelCommuterTrip() {
                var reservation =
               {
                   reservationId: vm.reservationInfo.id,
                   routeName: vm.reservationInfo.routeName,
                   passengerId: passengerId,
                   startTime: vm.reservationInfo.pickupTime,
                   reservationDate: vm.reservationInfo.reservationDate
               };

                var modalCancelReservation = $uibModal.open({
                    templateUrl: 'app/modules/commuter/modals/cancel-reservation-modal/cancel-reservation.html',
                    controller: 'CancelReservationController as vm',
                    size: '-fs',
                    backdrop: true,
                    ariaLabelledBy: 'Cancel reservation',
                    resolve: {
                        reservationInfo: function () {
                            return reservation;
                        }
                    }
                });
                modalCancelReservation.result.then(function (result) {
                    if (result.isCancel) {
                        $rootScope.$broadcast('reservationChanged');
                        $uibModalInstance.close({
                            'cancelled': true
                        });
                    }
                });
            }

            function modifyReservation() {
                var modifyReservationModal = $uibModal.open({
                    templateUrl: 'app/modules/commuter/modals/modify-reservation-modal/modify-reservation-pickup.html',
                    controller: 'ModifyReservationPickup as vm',
                    ariaLabelledBy: 'Modify reservation time',
                    backdrop: false,
                    size: '-fs',
                    resolve: {
                        reservation: function () {
                            return vm.reservationInfo;
                        }
                    }
                });

                modifyReservationModal.result.then(function (response) {
                    if (response.refresh) {
                        isModified = true;
                        getReservation(response.reservationId);
                    }

                }, function () {

                });
            }

            function iconClickHandler(model) {
                vm.show = true;
                vm.coords = model.coords;
            }

            function setMarkers() {
                vm.show = false;
                populateMarkers();
                MapService.setMapBounds(vm.markers, markerEvents);
            }


            function populateMarkers() {
                vm.markers.push({
                    latitude: vm.reservationInfo.pickupLatitude,
                    longitude: vm.reservationInfo.pickupLongitude,
                    icon: getMapIcon('pickup', vm.reservationInfo.scheduleType),
                    name: vm.reservationInfo.pickupStopName,
                    address: vm.reservationInfo.pickupAddress
                });

                vm.markers.push(
                    {
                        latitude: vm.reservationInfo.dropoffLatitude,
                        longitude: vm.reservationInfo.dropoffLongitude,
                        icon: getMapIcon('dropoff', vm.reservationInfo.scheduleType),
                        name: vm.reservationInfo.dropoffStopName,
                        address: vm.reservationInfo.dropoffAddress
                    });
            }

            function close() {
                $uibModalInstance.close({
                    'isModified': isModified
                });
            }

            function getMapIcon(stoptype, schedule) {
                if (stoptype === 'pickup') {
                    if (schedule === 'AM')
                        return MapIconService.getCommuterStopIcon();
                    else
                        return MapIconService.getCommuterHubIcon();
                }
                else {
                    if (schedule === 'PM')
                        return MapIconService.getCommuterStopIcon();
                    else
                        return MapIconService.getCommuterHubIcon();
                }

            }

        }
    })();

(function () {
    'use strict';

    angular
    .module('oneMVApp')
    .controller('TripDetailsModalController', TripDetailsModalController);

    TripDetailsModalController.$inject = ['$uibModalInstance', '$timeout', 'tripModalRequest', 'uiGmapIsReady', 'MapService', 'MapIconService'];

    function TripDetailsModalController($uibModalInstance, $timeout, tripModalRequest, uiGmapIsReady, MapService, MapIconService) {

        var vm = this;
        var markerEvents = [{ event: 'click', callback: iconClickHandler }];


        vm.show = false;
        vm.passengerTrip = tripModalRequest.passengerTrip;
        vm.options = typeof tripModalRequest.options == 'string' ? JSON.parse(tripModalRequest.options) : tripModalRequest.options;
        vm.serviceDate = tripModalRequest.serviceDate;
        
        vm.map = MapService.initializeMap();
       

        $timeout(function () {
            vm.markers = [];
            vm.markers.push({
                latitude: vm.passengerTrip.startLatitude,
                longitude: vm.passengerTrip.startLongitude,
                icon: MapIconService.getDrtPickupIcon(),
                name: vm.passengerTrip.startName,
                address : vm.passengerTrip.startAddress
            });
            vm.markers.push({
                latitude: vm.passengerTrip.endLatitude,
                longitude: vm.passengerTrip.endLongitude,
                icon: MapIconService.getDrtDropoffIcon(),
                name: vm.passengerTrip.endName,
                address: vm.passengerTrip.endAddress
            });

            MapService.setMapBounds(vm.markers,markerEvents);
        }, 1000);

        function iconClickHandler(model) {
            vm.show = true;
            vm.coords = model.coords;
        }
        vm.cancel = function cancelTrip() {
            $uibModalInstance.close({
                'action': 'cancel'
            });

        };
        vm.closeModal = function () {
            $uibModalInstance.close({
                'action': 'close'
            });
        };

        vm.displayRatingOption = function () {
            return vm.passengerTrip.Status === 'End' ||
                (vm.passengerTrip.Status === 'Reserved' && (vm.serviceDate > vm.passengerTrip.serviceDate));
        };
    }
})();
(function () {

    'use strict';

    angular.module('oneMVApp')
    .controller('PassengerTripsCtrl', PassengerTripsCtrl);

    PassengerTripsCtrl.$inject = ['$state', '$uibModal', 'authService', 'ReservationService', 'PageService',
     'LuumLinkedService','OneMvServices','ConfigFactory','DivisionService'];

    function PassengerTripsCtrl($state, $uibModal, authService, ReservationService, PageService,
         LuumLinkedService,OneMvServices,ConfigFactory,DivisionService) {
        var vm = this;
        vm.pastTrips = [];
        vm.futureTrips = [];
        vm.todaysTrips = [];
        
        vm.PageService = PageService;
        PageService.setTitle('Passenger Trips');
        PageService.setHeadline('My Trips');

        vm.addressRest = null;
        vm.centerLatLong;
        vm.onTripCancelled = onTripCancelled;
        vm.showTripDetails = showTripDetails;

        var options = {};
        options.reservationType = 'current';
        options.OperatorId = '';
        options.isPassenger = true;
        options.reloadTrips = false;

        var divisionId = DivisionService.getDivisionId();
        var passengerId = authService.authentication.passengerId;
        vm.currentPassenger = { "Id": passengerId }; 
        
        
        if (!authService.isLoggedIn())
            $state.go('login');

        vm.commuterInfo = OneMvServices.getCommuterInfo();
        vm.drtInfo = OneMvServices.getDrtInfo();    

        vm.hasCommuter = !angular.isUndefined(vm.commuterInfo);
        vm.hasDrt = !angular.isUndefined(vm.drtInfo);
        
        vm.loading = true;        
        vm.totalTripsCount = 0;
    
        activate();

        function activate() {
            LuumLinkedService.verify(authService.authentication.passengerId);
            populateDivisionParameters();
            getUpcomingTrips();
        }

        function getUpcomingTrips() {
            ReservationService.getAllReservationsForPassenger(passengerId)
                .then(function (response) {
                    if (response.data.status === 1) {
                        populateTrips(response.data.result.reservations);
                    }
                    vm.loading = false;
                },
                    function () {
                        vm.loading = false;
                    });
        }

        function populateTrips(trips) {
            vm.pastTrips = [];
            vm.futureTrips = [];
            vm.todaysTrips = [];
            vm.totalTripsCount = 0;

            if (!trips) return;            

            vm.totalTripsCount = trips.length;

            for (var i = 0; i < trips.length; i++) {
                var trip = trips[i];                    
                var compare = moment().dayOfYear() - moment(trips[i].reservationDate).dayOfYear();

                if (compare > 0)
                    vm.pastTrips.push(trip);
                else if (compare < 0)
                    vm.futureTrips.push(trip);
                else
                    vm.todaysTrips.push(trips[i]);
            }
        }

        function showTripDetails(trip) {
            var commuterTripModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/modules/shared/trips/commuter-trip-modal.html',
                controller: 'CommuterTripModalController as vm',
                size: '-fs',
                backdrop: false,
                keyboard :true,
                resolve: {
                    tripId: trip.id
                }
            });

            commuterTripModal.result.then(function (response) {
                if (response.cancelled || response.isModified) {
                    getUpcomingTrips();
                }
            });
        }     

        function populateDivisionParameters() {
            ConfigFactory.getDivisionParameters(divisionId)
            .then(function (params) {
            
                options.promiseWindow = params.PromiseWindow;
                options.DivisionId = divisionId;
                options.batchDays = params.BatchDays ? eval(params.BatchDays) : 7;
                options.minFromDays = params.MinFromDays ? eval(params.MinFromDays) : 30;
                options.isAdvancedReservation = params.AllowAdvancedReservation ? eval(params.AllowAdvancedReservation.toLowerCase()) : false;
                options.showCancelOptions = params.CancelReasonRequired ? eval(params.CancelReasonRequired.toLowerCase()) : false;
                options.allowFaring = params.AllowFaring ? eval(params.AllowFaring.toLowerCase()) : false;
                options.allowLocationNotes = params.AllowLocationNotes ? eval(params.AllowLocationNotes) : false;
                options.allowChildren = params.AllowChildren ? eval(params.AllowChildren) : false;
                options.allowMultipleSeatBooking = params.AllowMultipleSeatBooking ? eval(params.AllowMultipleSeatBooking.toLowerCase()) : false;

        });
            vm.userReservationOptions = options;
        }

        function onTripCancelled() {}

        // Start of code for Ionic
        vm.ionicOnTouch = function () {
            // Need to resize the screen if one of the trip cards is clicked.
            $rootScope.$broadcast('ionicScrollResize', { action: 'resize' })
        }
        vm.ionicInclude = 'app/modules/on-demand/trips/my-trips.html';
        vm.ionicCustomClassName = 'ionic.my-trips';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh Trips';
        vm.ionicRefreshingText = 'Loading Trips';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            //
            // change this flag to trigger the my-trips directive to reload.
            //
            options.reloadTrips = !options.reloadTrips;
            $rootScope.$broadcast('scroll.refreshComplete');
        }

    }

})();
(function () {
    'use strict';

    angular.module("oneMVApp").directive('tripCardDirective', tripCardDirective);
    tripCardDirective.$inject = ['$uibModal', 'UtilityFactory'];
    function tripCardDirective($uibModal, UtilityFactory) {
        var directive = {
            controller: controller,
            restrict: 'E',
            link: link,
            replace: true,
            scope: {
                trip: '@',
                options: '@',
                tripType: '@',
                divisionServiceDate: '=',
                allowTripRating: "=",
                notifyOnCancel: "=onTripCancel"
            },
            templateUrl: 'app/modules/shared/trips/tripCard.html'
        };
        return directive;

        function link(scope, element, attrs) {
            
           scope.$watch('trip', function (newValue, oldValue) {
                if (newValue != oldValue) {
                    if (typeof newValue == "string")
                        scope.passengerTrip = JSON.parse(newValue);
                    else if (typeof newValue == "object")
                        scope.passengerTrip = newValue;
                   
                }
            });

        }
        
        function controller($scope) {
            $scope.passengerTrip = JSON.parse($scope.trip);
            $scope.opts = JSON.parse($scope.options);
            $scope.serviceDate = $scope.divisionServiceDate;

            $scope.detailsModal = function () {
               var tripDetail =  $uibModal.open({
                    templateUrl: 'app/modules/shared/trips/drt-trip-modal.html',
                    controller: 'TripDetailsModalController as vm',
                    size: '-fs',
                    backdrop: false,
                    resolve: {
                        tripModalRequest : function()
                        {
                            return {
                                passengerTrip: $scope.passengerTrip,
                                options: $scope.options,
                                serviceDate: $scope.serviceDate
                            }
                        }
                    }
               });

               tripDetail.result.then(function (result) {
                   if(result && result.action === 'cancel')
                   {
                       $scope.cancel($scope.passengerTrip);
                   }
               });
            };
           
       
            $scope.getDisplayStatus = function (status) {
                var result = status;

                switch (status) {
                    case 'Cancel':
                        result = 'Cancelled';
                        break;
                    case 'No-show':
                        result = 'No show';
                        break;
                    case 'Un-scheduled':
                        result = 'Reserved';
                        break;
                }

                return result;
            };

            $scope.cancel = function (trip) {
                var tripToCancel = {
                    'tripId': trip.TripId,
                    'passengerId': trip.PassengerId,
                    'from': trip.startName,
                    'to': trip.endName,
                    'scheduledTime': trip.schedPickupTime
                };

                var modalCancelTrip = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/activeTrip/trip-cancellation-prompt.html',
                    controller: 'TripCancellationController as vm',
                    size: '-fs',
                    resolve: {
                        tripToCancel: function () {
                            return tripToCancel;
                        },
                        showCancelOptions: $scope.opts.showCancelOptions

                    }
                });
                modalCancelTrip.result.then(function (result) {
                    if (result.isCancel) {
                        UtilityFactory.toastSuccess("Success!", "Trip cancelled");
                        if (typeof ($scope.notifyOnCancel) == 'function') {
                            $scope.notifyOnCancel();
                        }

                    }
                    else
                        UtilityFactory.toastError("Error!", "Unable to cancel the trip.");
                });
            };
        }
    }
})();
(function () {
    'use strict';

    angular.module('oneMVApp')
    .directive('mvPassengerTrips', userReservationsDirective);

    userReservationsDirective.$inject = ['$filter', '$interval', '$uibModal',
        'UtilityFactory', 'ScheduleService', 'DivisionService', 'PageService'];

    function userReservationsDirective( $filter,  $interval, $uibModal, 
        UtilityFactory, ScheduleService,  DivisionService) {
        var directive = {
            controller: controller,
            link: link,
            restrict: 'E',
            replace: false,
            scope: {
                passenger: '@',
                newTrip: '@',
                options: '@',
                divisionId: '@',
                notifyTripCancelled: '=onTripCancelled',
                allowTripRating: "="
            },
            templateUrl: 'app/modules/shared/trips/userReservations.html'
        };
        return directive;

        function link(scope, element, attrs) {
            // This is here to trigger scope.init() when this event first occurs.
            // In the Mobile App, 'options' gets loaded so fast that by the time
            // the $watch('options') occurs, the value is the same.
            var initialRun = true; 
            scope.$watch('options', function (newValue, oldValue) {
                if (newValue != oldValue || initialRun) {
                    if (typeof newValue == "string")
                        scope.opts = JSON.parse(newValue);
                    else if (typeof newValue == "object")
                        scope.opts = newValue;
                    initialRun = false;
                    scope.init();
                }
            });
         
        }

        function controller($scope, OneMvServices) {
            var divisionId = undefined;
            var operatorId = undefined;
            var batchDays = 7; //get from system params
            var minFromDays = 30;
            var dateFormat = 'MM-DD-YYYY';
            $scope.isCancelling = false;
            $scope.loading = true;
            var autoRefresh = undefined;
            var autoRefreshActiveTrip = undefined;
            $scope.showTabs = false;

            $scope.commuterInfo = OneMvServices.getCommuterInfo();
            $scope.drtInfo = OneMvServices.getDrtInfo();    

            $scope.opts = undefined;

            $scope.activeTrip = {
                TripId: null
            };

            $scope.passengerFutureTrips = [];
            $scope.passengerPastTrips = [];
            $scope.passengerActiveTrips = [];

            if ($scope.passenger != '') {
                var pass = JSON.parse($scope.passenger);
                $scope.passengerId = pass ? pass.Id : undefined;
            }            
            $scope.showTabs = !angular.isUndefined($scope.commuterInfo) && !angular.isUndefined($scope.drtInfo);            
            $scope.getDisplayStatus = function (status) {
                var result = status;

                switch (status) {
                    case 'Cancel':
                        result = 'Canceled'
                        break;
                    case 'No-show':
                        result = 'No Show'
                        break;
                }

                return result;
            };

            $scope.activate = function (passenger) {
                $scope.passengerId = passenger.Id;
                $scope.loading = true;
                
                getServiceDateByDivision();
            };

            $scope.displayRatingOption = function (passengerTrip) {
                return passengerTrip.Status === 'End' ||
                    (passengerTrip.Status === 'Reserved'
                    && ($scope.serviceDate > passengerTrip.serviceDate));
            };

            $scope.cancel = function (trip) {
              
                var tripToCancel = {
                    'tripId': trip.TripId,
                    'passengerId': trip.PassengerId,
                    'from': trip.startName,
                    'to': trip.endName,
                    'scheduledTime': trip.schedPickupTime
                };

                var modalCancelTrip = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/modules/on-demand/activeTrip/trip-cancellation-prompt.html',
                    controller: 'TripCancellationController as vm',
                    size: '-fs',
                    backdrop: false,
                    resolve: {
                        tripToCancel: function () {
                            return tripToCancel;
                        },
                        showCancelOptions: $scope.opts.showCancelOptions

                    }
                });
                modalCancelTrip.result.then(function (result) {
                    if (result.isCancel) {
                        UtilityFactory.toastSuccess("Success!", "Trip cancelled");
                        getTripsForPassenger(null, true);
                    }
                    else
                        UtilityFactory.toastError("Error!", "Unable to cancel the trip.");
                });
            };


            $scope.init = function () {
                $scope.loading = true;
                $scope.isPassenger = $scope.opts.isPassenger;
                $scope.reservationType = $scope.opts.reservationType;
                divisionId = $scope.opts.DivisionId;
                operatorId = $scope.opts.OperatorId;
                batchDays = $scope.opts.batchDays;
                $scope.opts.autoRefresh = true;
                minFromDays = $scope.opts.minFromDays;
                
                $scope.isStartDp = false;
                $scope.isEndtDp = false;
                $scope.date = { 'from': undefined, 'to': undefined };
                $scope.minFromDateAllowed = undefined;
                $scope.maxFromDateAllowed = undefined;
                $scope.minToDateAllowed = undefined;
                $scope.maxToDateAllowed = undefined;
                $scope.showMap = [];
                if ($scope.isPassenger)
                    $scope.activate($scope.passenger);
            };

            function getServiceDateByDivision() {
                $scope.loading = true;
                ScheduleService.getServiceDateByDivision(divisionId)
                .then(function (response) {
                    if (response.data.status == 1) {
                        var serviceDate = response.data.result;
                        $scope.serviceDate = serviceDate;
                        setCalendarDates(serviceDate);
                        $scope.loading = false;
                        var callback = $scope.opts.autoRefresh ? setAutoRefresh : null;
                        getTripsForPassenger(callback);
                    }
                }, function errorCallback(response) {
                    $scope.loading = false;
                    UtilityFactory.toastError("Error!", "Failed to get Service Date.");
                });
            };


            function setAutoRefresh() {
                autoRefreshActiveTrip = $interval(function () {
                    getActiveTrip();
                }, 30000);
                autoRefresh = $interval(function () {
                    getTripsForPassenger();
                }, 60000);
            }

            function getActiveTrip(callback) {
                var pass = JSON.parse($scope.passenger);
                $scope.passengerId = pass ? pass.Id : undefined;
                
                ScheduleService.getlastripdetails($scope.passengerId, divisionId).then(function (response) {
                    if (response.data.status == 1) {
                       
                        if (!angular.isUndefined($scope.passengerFutureTrips)) {
                            var activeTrip = $filter('filter')($scope.passengerFutureTrips,
                                { TripId: response.data.result.TripID });
                            if (activeTrip.length > 0)
                                $scope.activeTrip = activeTrip[0];
                        }
                    }
                    else
                        $scope.activeTrip = {
                            TripId: null
                        };
                    if (callback)
                        callback();
                }, function () {
                });
            };


            function setCalendarDates(serviceDate) {

                if ($scope.isPassenger) {
                    if (!$scope.opts.isAdvancedReservation) {
                        $scope.date.to = moment(serviceDate).format(dateFormat);
                    }
                    else
                        $scope.date.to = moment(serviceDate).add(batchDays, 'd').format(dateFormat);

                    $scope.date.from = moment(serviceDate).add(-minFromDays, 'd').format(dateFormat);
                }
                else {
                    var selectedMomentDate = moment(serviceDate).format(dateFormat);

                    $scope.date.from = selectedMomentDate;
                    $scope.date.to = selectedMomentDate;

                    var maxToDate = moment(selectedMomentDate, dateFormat).add(batchDays, 'd');
                    $scope.minToDateAllowed = selectedMomentDate;
                    $scope.maxToDateAllowed = new Date(maxToDate);

                    var minFromDate = moment(selectedMomentDate, dateFormat).add(-minFromDays, 'd');
                    $scope.minFromDateAllowed = new Date(minFromDate);
                    $scope.maxFromDateAllowed = selectedMomentDate;
                }
            };

            $scope.onTripCancel = function () {
                getTripsForPassenger(null, true);
            }
            $scope.dateChanged = function () {
                var fromDate = $scope.date.from;
                $scope.minToDateAllowed = fromDate;
                if (isBefore($scope.date.to, $scope.date.from))
                    $scope.date.to = angular.copy($scope.date.from);

                getTripsForPassenger();
            };

            function isBefore(from, to) {
                var diff = new Date(from).getTime() <= new Date(to).getTime();
                return diff;
            };


            function getTripsForPassenger(callback, isFromCancel) {

                $scope.loading = true;
                var fromDate = $filter('date')($scope.date.from, 'yyyy-MM-dd');
                var toDate = $filter('date')($scope.date.to, 'yyyy-MM-dd');

                var pass = JSON.parse($scope.passenger);
                $scope.passengerId = pass ? pass.Id : undefined;
                ScheduleService.getPassengerTrips(divisionId, $scope.passengerId, fromDate, toDate)
                    .then(function (response) {

                        if (response.data.status == 1) {
                            mapTrips(response.data.result);

                        }
                        $scope.loading = false;
                        if (callback) {
                            getActiveTrip(callback)


                        }
                        else if (isFromCancel)
                            getActiveTrip();
                    }, function (errormsg) {
                        $scope.loading = false;
                        UtilityFactory.toastError('Error', errormsg.data);
                    });
            };

            function mapTrips(trips) {
                addPromiseWindowAndEpochToTrip(trips);

                $scope.passengerPastTrips = getTrips(trips, filterPastTrips, sortPastTrips);
                $scope.passengerFutureTrips = getFutureTrips(trips);//, filterFutureTrips, sortFutureTrips);
                
            };

            function getFutureTrips(trips) {
                var futureTrips = angular.copy(trips);

                for (var i = 0; i < $scope.passengerPastTrips.length; i++) {
                    var tripId = $scope.passengerPastTrips[i].TripId;
                    futureTrips = $filter('filter')(futureTrips, { TripId: '!' + tripId });
                }
                return futureTrips;

            }


            function sortFutureTrips(a, b) {
                return a.schedEpoch - b.schedEpoch;
            };

            function filterPastTrips(trip) {
                var currentDivisionEpoch = moment.tz(DivisionService.getTimeZone()).format('x');

                return trip.Status === 'Cancel'
                    || trip.Status === 'No-show'
                    || trip.Status === 'End'
                    || //trip.Status === 'Reserved' && 
                       trip.serviceDate < $scope.serviceDate;
            };

            function sortPastTrips(a, b) {
                return b.schedEpoch - a.schedEpoch;
            };



            function getTrips(trips, filter, sort) {

                var filtered = trips.filter(filter);

                if (filtered) {
                    filtered.sort(sort);
                }
                return filtered;
            }

            function mapPromiseWindowAndEpoch(trip) {
                var promiseWindow = $scope.opts.promiseWindow;
                trip.schedEpoch = moment.tz(trip.schedPickupTime, DivisionService.getTimeZone()).format('x');
                trip.estEpoch = moment.tz(trip.estimatedPickupTime, DivisionService.getTimeZone()).format('x');

                if (trip.estimatedPickupTime) {
                    //var pickupTime = trip.schedPickupTime;
                    //var promiseWindowsEndTime = DateFactory.getPromiseWindowEndTime(pickupTime, promiseWindow);
                    //trip.promiseWindowStartTime = $filter('date')(pickupTime, 'h:mm a');
                    //trip.promiseWindowEndTime = $filter('date')(promiseWindowsEndTime, 'h:mm a');

                    var startPickupWindowTime = new moment(trip.startPickupWindowTime);
                    var endPickupWindowTime = new moment(trip.endPickupWindowTime);
                    trip.promiseWindowStartTime = startPickupWindowTime.format('h:mm A');
                    trip.promiseWindowEndTime = endPickupWindowTime.format('h:mm A');

                    if (trip.vehicleLicense == null)
                        trip.vehicleLicense = "N/A";
                }
            };

            function addPromiseWindowAndEpochToTrip(trips) {


                for (var i = 0; i < trips.length; i++)
                    mapPromiseWindowAndEpoch(trips[i]);
            }


            function getMapInfo(trip) {
                var mapInfo =
                    {
                        'activeTripRunId': trip.RunId,
                        'FromLat': trip.startLatitude,
                        'FromLong': trip.startLongitude,
                        'ToLat': trip.endLatitude,
                        'ToLong': trip.endLongitude,
                        'tripId': trip.TripId
                    };

                return mapInfo;
            };


            $scope.addNewTrip = function (trip) {
                var tripDate = moment(trip.ScheduledPickupTime).format(dateFormat);
                //if new trip falls between existing selected dates 
                if (isBefore($scope.date.from, tripDate) && isBefore(tripDate, $scope.date.to))
                    getTripsForPassenger();
            };

            $scope.$on('$destroy', function (event) {
                if (angular.isDefined(autoRefresh)) {
                    $interval.cancel(autoRefresh);
                    autoRefresh = undefined;
                }




                if (angular.isDefined(autoRefreshActiveTrip)) {
                    $interval.cancel(autoRefreshActiveTrip);
                    autoRefreshActiveTrip = undefined;
                }

            });

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('WhatsNewController', WhatsNewController);

    WhatsNewController.$inject = ['$rootScope','$location', 'DynamicContentService', 'PageService'];

    function WhatsNewController($rootScope, $location, DynamicContentService, PageService) {
        var vm = this;
        vm.PageService = PageService;
        vm.PageService.setTitle('Whats New');
        vm.PageService.setHeadline('Latest Service Updates');

        function getData() {
            DynamicContentService.getWhatsNewData().then(function (response) {
                vm.data = response.data.result;                
            });
        }

        getData();

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/whats-new/whats-new.html';
        vm.ionicCustomClassName = 'ionic-whats-new card';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = true;
        vm.ionicPullingText = 'Refresh';
        vm.ionicRefreshingText = 'Loading';
        vm.ionicSpinner = 'spiral'; // none to disable.
        vm.refresh = function (refresher) {
            getData();
            $rootScope.$broadcast('scroll.refreshComplete');

        }
        // End of code for Ionic
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('VerificationController', VerificationController);

    VerificationController.$inject = ['$timeout', '$rootScope','authService', 'VerificationService', 'DivisionService', 'RedirectionService', 'PageService'];

    function VerificationController($timeout, $rootScope, authService, VerificationService,  DivisionService, RedirectionService, PageService) {

        var vm = this;

        vm.isClicked = false;
        vm.savedSuccessfully = false;
        vm.message = '';
        vm.code = '';
        vm.PageService = PageService;
        vm.PageService.setTitle('Verification');

        var activate = function () {
            vm.registerData = {
                userName: authService.externalAuthData.userName,
                provider: authService.externalAuthData.provider,
                externalAccessToken: authService.externalAuthData.externalAccessToken,
                divisionId: DivisionService.getDivisionId(),
                divisionSupportsFeed: false
            };
            vm.PageService.setHeadline('Verify your ' + authService.externalAuthData.provider +' account');
        };

        activate();

        vm.cancel = function () {
            RedirectionService.redirectTo('dashboard/');
        }

        vm.registerExternal = function () {
            vm.message = '';
            vm.isClicked = true;
            if (vm.code.trim() !== '')
                validate();
            else {
                vm.message = 'Validation code missing.';
                vm.isClicked = false;
            }
        };



        var validate = function () {
            VerificationService
                .validate(vm.code.trim())
                .then(function (res) {
                    if (res.data.status == 1)
                        register();
                    else {
                        vm.message = "Invalid code.";
                        vm.isClicked = false;
                    }
                }, function (response) {
                    vm.message = response.data.Message;
                    vm.isClicked = false;
                });
        }

        function register() {           
            authService.registerExternal(vm.registerData).then(function (response) {
                vm.savedSuccessfully = true;
                startTimer();
            }, function (error) {
                vm.message = "An error occured. Please try again later."
                vm.isClicked = false;
            });
        }



        var startTimer = function () {
            var timer = $timeout(function () {
                $timeout.cancel(timer);
                $rootScope.$broadcast('loggedIn', null);
                RedirectionService.redirect();
            }, 2000);
        }

        // Start of code for Ionic
        vm.ionicInclude = 'app/shared/verification/verification.html';
        vm.ionicCustomClassName = 'ionic-template-verification';
        vm.ionicHideNavBar = false;
        vm.ionicUseRefresher = false;
        // End of code for Ionic
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .factory('VerificationService', VerificationService);

    VerificationService.$inject = ['$http','$q','env','DivisionService'];

    function VerificationService($http, $q, env, DivisionService) {
        var service = {
            validate: validate,
            passengerExists: passengerExists
        };

        return service;

        function validate(key) {
            var deferred = $q.defer();
            //get the base url from config.
            var serviceUrl = env.oneMVApiUrl  + 'division/' + DivisionService.getDivisionId()
                                + '/Validate?key=' + key;
            $http.get(serviceUrl)
            .then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }

        function passengerExists(clientPassengerId) {
            var deferred = $q.defer();
            var serviceUrl = env.oneMVApiOrgUrl + 'passenger/exists/' + DivisionService.getDivisionId() + '/' + clientPassengerId;
            $http.get(serviceUrl)
            .then(function (response) {
                deferred.resolve(response);
            }, function (err) {
                deferred.reject(err)
            });

            return deferred.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('AddVehicleController', AddVehicleController);

    AddVehicleController.$inject = ['authService', 'vehicleService', '$uibModalInstance', 'atleastOneVehicleExist','$timeout'];

    function AddVehicleController(authService, vehicleService, $uibModalInstance, atleastOneVehicleExist,$timeout) {
        var vm = this;
        vm.vehicleInfo = undefined;
        vm.atleastOneVehicleExist = atleastOneVehicleExist;
        vm.message = '';
        vm.isSaving = false;
        vm.errorMessage = 'Add failed';
        vm.showMessage = false;
        var passengerId = authService.authentication.passengerId;        
        var isAdded = false;
        vm.maxYear = new Date().getFullYear() + 1;
        vm.isYearValid = isYearValid;

        function getDefaultVehicleInfo() {
            return {
                year: '',
                make: '',
                model: '',
                color: '',
                licencePlate: '',                
                isDefault: !vm.atleastOneVehicleExist,
                isActive: true
            };
        }

        function isYearValid() {
            if (vm.vehicleInfo.year !== '') {
                return vm.vehicleInfo.year >= '1930' && vm.vehicleInfo.year <= vm.maxYear;
            }
            return true;
        };

        function showMessage(msg) {
            vm.message = msg;
            vm.showMessage = true;
            $timeout(function () {
                vm.showMessage = false;
            }, 5000);
        };

        vm.save = function () {
            vm.isSaving = true;
            isAdded = false;
            if (isValid()) {
                vehicleService.save(vm.vehicleInfo, passengerId)
                .then(function (response) {
                    if (response.data && response.data.status == 1 && response.data.result > -1) {
                        vm.vehicleInfo.id = response.data.result;
                        //reset
                        vm.vehicleInfo = getDefaultVehicleInfo();
                        isAdded = true;
                        $uibModalInstance.close({ 'isAdded': isAdded });
                    }
                    else
                        showMessage(response.data.result);
                    vm.isSaving = false;
                }, function (error) {
                    showMessage(response.data.message);
                    vm.isSaving = false;
                });
            }
            else {
                showMessage("Invalid Input!");
                vm.isSaving = false;
            }
        }        

        function isValid() {
            return !(vm.vehicleInfo.color === '' || vm.vehicleInfo.color.trim() == ''
            || vm.vehicleInfo.licencePlate === '' || vm.vehicleInfo.licencePlate.trim() == ''
                || vm.vehicleInfo.make === '' || vm.vehicleInfo.make.trim() == ''
                || vm.vehicleInfo.model === '' || vm.vehicleInfo.model.trim() == ''
                || vm.vehicleInfo.year === '');
        };

        
        vm.cancel = function() {
            $uibModalInstance.close({'isAdded' : isAdded});
        };


        activate();

        function activate() {
            vm.vehicleInfo = getDefaultVehicleInfo();
        }

        
    }
})();

(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('CancelReservationController', CancelReservationController);

    CancelReservationController.$inject = ['$location', '$uibModalInstance', 'reservationInfo', 'ReservationService', 'StopDataService', 'MessageService'];

    function CancelReservationController($location, $uibModalInstance, reservationInfo, ReservationService, StopDataService, MessageService) {
        /* jshint validthis:true */
        var vm = this;
        vm.reservationInfo = reservationInfo;
        vm.routeName = vm.reservationInfo.routeName;
        vm.startTime = vm.reservationInfo.startTime;
        vm.reservationDate = moment(vm.reservationInfo.reservationDate).format('MM/DD/YYYY');
        vm.cancelError = false;
        vm.disable = false;
        vm.errorMessage = 'Sorry, we were unable to cancel this reservation.';    

        vm.cancelReservation = function () {
            vm.disable = true;
            if (vm.reservationInfo.reservationId) {
                ReservationService.cancelReservation(vm.reservationInfo.passengerId, vm.reservationInfo.reservationId)
                .then(function (response) {
                    if (response && response.data && response.data.status == 1) {
                        $uibModalInstance.close({ 'action': 'close', 'isCancel': true });
                    } else {
                        vm.cancelError = true;
                        if (response.data.result && response.data.message == 'Failure')
                            vm.errorMessage = response.data.result;
                    }
                    vm.disable = false;
                });
            } else {
                vm.cancelError = true;
            }
        };
        
        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };

        this.MakeDisable = function () {
            if (vm.disable) {
                return true;
            }
            else {
                return false;
            }
        };
    }
})();



(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ModifyReservationPickup', ModifyReservationPickup);

    ModifyReservationPickup.$inject = ['$location', '$uibModalInstance', 'ReservationService',
        'vehicleService', 'DivisionService', 'authService', 'reservation'];

    function ModifyReservationPickup($location, $uibModalInstance, ReservationService,
        vehicleService, DivisionService,authService, reservation) {

        var vm = this;

        var passengerId = authService.authentication.passengerId;
        var newReservationInfo = undefined;
        var noVehicle = { id: null, licenceplate: '--' };

        vm.reservationInfo = reservation;
        vm.message = "";
        vm.isSaving = false;
        vm.currentTripId = vm.reservationInfo.tripId;
        vm.selectedTripId = vm.reservationInfo.tripId;
        vm.availableParking = 0;
        vm.selectedVehicleId = angular.copy(vm.reservationInfo.vehicleId);
        vm.divisionAllowsWaitlist = true;

        vm.manageVehicle = manageVehicle;
        vm.modifyTrip = modifyTrip;
        vm.cancel = cancel;

        function init() {

            DivisionService
               .isWaitlistAllowedByDivision()
           .then(function (response) {
               vm.divisionAllowsWaitlist = response;
           });

            getAlternateTrips();
            getPassengerVehicles();
        }

        function cancel() {
            $uibModalInstance.close({
                'action': 'close'
            });
        };

        function manageVehicle() {
            vm.message = "";

            ReservationService
                .manageParkingForReservation(passengerId, vm.reservationInfo.id, vm.selectedVehicleId)
            .then(function (response) {
                if (response.data.status == 0) {
                    var msg = response.data.result.message;
                    vm.message = msg;
                }
                else {
                    $uibModalInstance.close({
                        'action': 'close',
                        'refresh': true,
                        'reservationId': response.data.result.id
                    });
                }
            }, function (error) {

            });
        }

        function getAlternateTrips() {
            ReservationService
             .getAllTripsForCurrentReservation(vm.reservationInfo.id, passengerId)
                 .then(function (response) {
                     vm.trips = response.data.result.altTrips;
                     vm.availableParking = vm.trips[0].availableParking;
                 }, function (error) {

                 })
        }

        function getPassengerVehicles() {
            vehicleService.getVehiclesForPassenger(passengerId)
            .then(function (response) {
                if (response.data.status === 1 && response.data.result.passengerVehicles != null)
                    vm.passengerVehicles = response.data.result.passengerVehicles;

                if (vm.passengerVehicles.length > 0)
                    vm.passengerVehicles.splice(0, 0, noVehicle);
                else
                    vm.passengerVehicles.push(noVehicle);             

            }, function (error) {
            });
        }


        function modifyTrip() {
            vm.isSaving = true;
            vm.message = '';

            ReservationService
            .modifyReservation(vm.reservationInfo.id, vm.selectedTripId, passengerId)
            .then(function (response) {
                if (response.data.status == 0) {
                    vm.message = response.data.result.message;
                    vm.isSaving = false;
                }
                else {
                    vm.isSaving = false;
                    $uibModalInstance.close({
                        'action': 'close',
                        'refresh': true,
                        'reservationId': response.data.result.id
                    });
                }

            }, function (error) {
                vm.message = error;
                vm.isSaving = false;
            });
        }

        init();
    }
})();



(function () {
    'use strict';

    var app = angular.module('oneMVApp');
    app.controller('CommuterFeedbackModalController', CommuterFeedbackModalController);

    CommuterFeedbackModalController.$inject = ['$uibModalInstance', 'UtilityFactory', 'ConfigFactory', 'FeedbackService', 'feedbackInfo'];

    function CommuterFeedbackModalController($uibModalInstance,UtilityFactory, ConfigFactory, FeedbackService, feedbackInfo) {
        var vm = this;
        vm.feedbackInfo = angular.copy(feedbackInfo);

        vm.cancel = cancel;
        vm.saveFeedback = saveFeedback;


        vm.disableSubmit = function () {
            return vm.feedbackInfo.rating <= 0 || vm.feedbackInfo.rating == null;
        };

        function cancel() {
            $uibModalInstance.close({isSaved:false});
        };

        function saveFeedback() {            

            FeedbackService
                .addCommuterFeedback(
                {
                    Comment: vm.feedbackInfo.comment.trim(),
                    Rating: vm.feedbackInfo.rating
                },
                                        vm.feedbackInfo.reservationId)
              .then(function (response) {
                if (response.data.status == 1) {
                    vm.isSaving = false;
                    UtilityFactory.toastSuccess("Success!", "Feedback saved successfully");
                    $uibModalInstance.close({isSaved :true});
                } else {
                    vm.isSaving = false;
                    UtilityFactory.toastError("Error!", "Could not save feedback");
                    console.log('Error: - ' + response.data.message);
                }
            }, function errorCallback(response) {
                vm.isSaving = false;
                UtilityFactory.toastError("Error!", "Could not save feedback");
                console.log('Error: - ' + response.data.message);
            });

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('RemoveVehicleConfirmationController', RemoveVehicleConfirmationController);

    RemoveVehicleConfirmationController.$inject = ['$location','$uibModalInstance','vehicleService','id','authService'];

    function RemoveVehicleConfirmationController($location, $uibModalInstance, vehicleService, id, authService) {

        var vm = this;
        vm.isRemoving = false;

        vm.removeVehicle = function () {
            vm.isRemoving = true;
            vehicleService.removeVehicle(id, authService.authentication.passengerId)
                .then(function (response) {
                    if (response.data && response.data.status == 1)
                        $uibModalInstance.close({ removed: true });                    
                    else 
                        if (response.data.result && response.data.result !== '')
                            $uibModalInstance.close({ removed: false, errorMessage: response.data.result });
                }, function (err) {
                });
        };

        vm.cancel = function () {
            $uibModalInstance.dismiss({removed:false});
        };
    }
})();

(function () {
    'use strict';
    angular
        .module('oneMVApp')
        .controller('ReservationMapController', ReservationMapController);

    ReservationMapController.$inject = ['$scope', '$location', '$timeout', '$http', '$uibModalInstance','$interval',
        'GeoLocationService',  'StopDataService', 'uiGmapIsReady', 'LocationService', 'reservation_stops'];

    function ReservationMapController($scope, $location, $timeout, $http, $uibModalInstance, $interval,
        GeoLocationService, StopDataService,uiGmapIsReady, LocationService, reservation_stops) {
        var vm = this;
        vm.title = 'Schedule Stops';
        vm.mapControl = {};
        vm.stopMarker = [];
        var autoRefreshMarker = undefined;
        vm.map = {
            // http://angular-google-maps.org/use
            center: {
                latitude: 43.75514221191406,
                longitude: -116.57597351074219
            },
            zoom: 10,
            lineStyle: {
                color: '#333',
                weight: 5,
                opacity: 0.7
            }
        };
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false

        };
        var myLocationPin = 'images/pin-my-location.png';
        vm.myLocationIcon = {
            url: myLocationPin,
            size: new google.maps.Size(42, 42),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(20, 20)
        };

        vm.reservationStops = reservation_stops;
        if (vm.reservationStops.id != null || vm.reservationStops.id != '')
        {
            if (vm.reservationStops.scheduleType == 'AM') {
                vm.icon = 'images/pin-busstop-green.svg'
                vm.hubIcon = 'images/pin-hub.svg'

                vm.stopMarker.push({
                    'stopId': vm.reservationStops.pickupStopId, 'stopName': vm.reservationStops.pickupStopName,
                    'latitude': vm.reservationStops.pickupLatitude, 'longitude': vm.reservationStops.pickupLongitude,
                    'icon': vm.icon, 'address': vm.reservationStops.pickupAddress
                });
                vm.stopMarker.push({
                    'stopId': vm.reservationStops.dropoffStopId, 'stopName': vm.reservationStops.dropoffStopName,
                    'latitude': vm.reservationStops.dropoffLatitude, 'longitude': vm.reservationStops.dropoffLongitude,
                    'icon': vm.hubIcon, 'address': vm.reservationStops.dropoffAddress
                });
            }
            else {
                vm.icon = 'images/pin-busstop-grey.svg'
                vm.hubIcon = 'images/pin-hub.svg'

                vm.stopMarker.push({
                    'stopId': vm.reservationStops.pickupStopId, 'stopName': vm.reservationStops.pickupStopName,
                    'latitude': vm.reservationStops.pickupLatitude, 'longitude': vm.reservationStops.pickupLongitude,
                    'icon': vm.hubIcon, 'address': vm.reservationStops.pickupAddress
                });
                vm.stopMarker.push({
                    'stopId': vm.reservationStops.dropoffStopId, 'stopName': vm.reservationStops.dropoffStopName,
                    'latitude': vm.reservationStops.dropoffLatitude, 'longitude': vm.reservationStops.dropoffLongitude,
                    'icon': vm.icon, 'address': vm.reservationStops.dropoffAddress
                });
            }            
        }
        else
        {
            return;
        }
        
        autoRefreshMarker = $interval(function () {
            getMyLocation();
        }, 10000);

        function getMyLocation()
        {            
          GeoLocationService.getCurrentPosition()            
            .then(function (position) {
                if (position == undefined || position == null)
                {
                    stopAutoRefreshMarker()
                    return;
                }
                vm.myLocation = {
                    "coords": {
                        "latitude": position.coords.latitude,
                        "longitude": position.coords.longitude
                    },
                    "icon": vm.myLocationIcon
                };
                
            }, function (err) {

            });
        }

        uiGmapIsReady.promise().then(function (maps) {
            google.maps.event.trigger(vm.mapControl.getGMap(), "resize");
            
            var bounds = new google.maps.LatLngBounds();

            angular.forEach(vm.stopMarker, function (stop) {
                bounds.extend(new google.maps.LatLng(stop.latitude, stop.longitude));
            });

            vm.mapControl.getGMap().fitBounds(bounds);
        });

        //marker click function
        vm.markerEvent = {
            click: function (gMarker, eventName, model) {
                if (model.$id) {
                    //navigateToSelectedStop(model.coords);
                    if (vm.selectedLocation)
                        StopDataService.setGeoLocation(vm.selectedLocation);
                    StopDataService.setStop(model.coords);
                    vm.coords = model.coords;
                    vm.show = true;
                }
            }
        };

        vm.cancel = function () {
            stopAutoRefreshMarker();
           $uibModalInstance.dismiss('cancel');
           vm.isDone = true;
       };

       function stopAutoRefreshMarker() {
           if (angular.isDefined(autoRefreshMarker)) {
               $interval.cancel(autoRefreshMarker);
               autoRefreshMarker = undefined;
           }
       };

       $scope.$on('$locationChangeStart', function (event) {
           stopAutoRefreshMarker();
       });
    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('ReservationController', ReservationController);

    ReservationController.$inject = ['$location', '$uibModalInstance', 'reservationInfo', '$interval', '$rootScope',
        'isAdd', 'ReservationService', 'MessageService', 'vehicleService', 'StopDataService', 'DivisionService'];

    function ReservationController($location, $uibModalInstance, reservationInfo, $interval, $rootScope,
        isAdd, ReservationService, MessageService, vehicleService, StopDataService, DivisionService) {
        /* jshint validthis:true */
        var vm = this;
        vm.isAdd = isAdd;
        vm.disable = false;
        vm.isReserved = false;
        vm.hasVehicles = false;
        vm.needsParking = false;
        vm.vehicles = [];
        vm.selectedVehicle = undefined;
        vm.loadingVehicles = true;
        vm.isAMReservation = reservationInfo.scheduleType === "AM";
        vm.parkingNotAvailable = false;
        vm.noParkingMessage = "Parking not available.";
        vm.availableParkingSlots = 0;
        vm.isParkingAttachedToReservation = true;
        vm.reservationData = reservationInfo;
        vm.updateLabels = updateLabels;
        var availableSeats = 0;
        vm.divisionAllowsWaitlist = true;
        vm.numCompanions = [];
        vm.selectedCompanions = 0;


        var noVehicle = { 'licenceplate': '--', 'id': undefined };

        vm.reserve = reserve;

        var init = function () {

            DivisionService
               .isWaitlistAllowedByDivision()
           .then(function (response) {
               vm.divisionAllowsWaitlist = response;
               getAvailableSeats();
           }, function () {
               getAvailableSeats();
           });
        };


        function updateLabels() {

            if (!vm.divisionAllowsWaitlist)
                setReservationLabels();
            else {
                if (isParkingSelectedAndUnAvailable() || availableSeats < 1 + vm.selectedCompanions)
                    setWaitlistLabels();
                else
                    setReservationLabels();
            }
        }

        function isParkingSelectedAndUnAvailable() {
            if (!vm.isAMReservation) return false;

            return vm.selectedVehicle !== noVehicle
                    && vm.availableParkingSlots <= 0;
        }

        function getAvailableSeats() {
            ReservationService.getAvailableSeatsForTrip(reservationInfo.trip.tripId, Date.parse(reservationInfo.reservationDate))
                .then(function (response) {
                    getVehicles();
                    if (response.data.status === 1) {
                        availableSeats = response.data.result.availableCapacity;
                        if (response.data.result.allowedCompanions > 0){
                            for (var i = 0; i <= response.data.result.allowedCompanions; i++) {
                                vm.numCompanions.push(i);
                            }
                        }
                    }


                },
                    function error(response) {
                    });
        };

        function setReservationLabels() {
            vm.btnText = 'Reserve Seat';
            vm.modalText = 'Reserve a seat';
            vm.modalSuccessText = 'Reservation Created';
        }

        function setWaitlistLabels() {
            vm.btnText = 'Add To Waitlist';
            vm.modalText = 'Add to waitlist';
            vm.modalSuccessText = 'Added To Waitlist';
        }

        function getParkingInfo() {

            if (!vm.isAMReservation) {
                updateLabels();
                return;
            }

            StopDataService
                    .getAvailableParkingsForStop(reservationInfo.pickupStop.id, reservationTimespan())
                    .then(
                        function (response) {
                            if (response.data.status === 1) {
                                vm.availableParkingSlots = response.data.result;
                            }
                            if (vm.availableParkingSlots <= 0)
                                vm.parkingNotAvailable = true;

                            updateLabels();
                        },
                        function (error) {
                            MessageService.showInformation(error);
                        });
        };

        function getVehicles() {
            vehicleService.getVehiclesForPassenger(reservationInfo.passengerId)
            .then(function (response) {

                getParkingInfo();

                if (response.data.status === 1 && response.data.result.passengerVehicles != null) {
                    vm.vehicles = response.data.result.passengerVehicles;
                    vm.vehicles.splice(0, 0, noVehicle);
                    vm.selectedVehicle = findDefault(vm.vehicles);
                    vm.hasVehicles = true;

                    if (vm.isAMReservation)
                        vm.needsParking = true;
                }

                if (!vm.vehicles || vm.vehicles.length === 0)
                    vm.selectedVehicle = noVehicle;

                vm.loadingVehicles = false;
            }, function (error) {
                vm.hasVehicles = false;
                vm.loadingVehicles = false;
            });
        }





        function findDefault(vehicles) {
            for (var i = 0; i < vehicles.length; i++) {
                if (vehicles[i].isDefault) return vehicles[i];
            }
            return noVehicle;
        };

        function reservationTimespan() {
            return Date.parse(reservationInfo.reservationDate);
        }



        function reserve() {
            vm.disable = true;
            var reservation = {
                'pickupStopId': reservationInfo.pickupStop.id,
                'dropoffStopId': reservationInfo.dropoffStop.id,
                'tripId': reservationInfo.trip.tripId,
                'reservationDate': reservationInfo.reservationDate,
                'passengerId': reservationInfo.passengerId,
                'divisionId': reservationInfo.divisionId,
                'routeId': reservationInfo.trip.routeId,
                'schedule': reservationInfo.scheduleType,
                'companions' :vm.selectedCompanions

            };

            if (vm.needsParking && !angular.isUndefined(vm.selectedVehicle.id)) {
                reservation.vehicleId = vm.selectedVehicle.id;
            }

            ReservationService.addReservations(reservationInfo.passengerId, [reservation]).then(handleReservationSuccess);
        };

        function handleReservationSuccess(response) {
            if (response.data && response.data.status == 1) {

                if (response.data.result.errors && response.data.result.errors.length > 0)
                    MessageService.showInformation(response.data.result.errors[0]);
                else
                    getReservation(reservationInfo.passengerId, response.data.result.id[0]);
            } else
                MessageService.showInformation("Error processing reservation.");

            vm.disable = false;
        }


        function getReservation(passengerId, rId) {
            ReservationService.getReservationById(passengerId, rId)
            .then(function (response) {
                vm.isReserved = true;
                vm.confirmationNumber = response.data.result.confirmationNumber;
                //hide parking section if not selected.
                if (!vm.needsParking)
                    vm.isParkingAttachedToReservation = false;

                StopDataService.getAvailableParkingsForStop(reservationInfo.pickupStop.id, reservationTimespan())
               .then(function (response) {
                   if (response.data.status === 1 && response.data.result) {
                       vm.availableParkingSlots = response.data.result;
                   }
               });
            });
        }

        vm.cancel = function () {
            $uibModalInstance.close({
                'action': 'close', 'isReserved': vm.isReserved
            });
        };

        vm.navigateToReservationPage = function () {
            $uibModalInstance.close({
                'action': 'reservation'
            });
        };

        vm.navigateToAddVehicles = function () {
            $uibModalInstance.close({
                'action': 'vehicle'
            });
        };

        this.MakeDisable = function () {
            if (vm.disable) {
                return true;
            }
            else {
                return false;
            }
        };

        init();
    }
})();



(function () {
    'use strict';
    angular
        .module('oneMVApp')
        .controller('StopsMapController', StopsMapController);

    StopsMapController.$inject = ['$location', 'GeoLocationService',
        'StopDataService', 'uiGmapIsReady', 'LocationService', '$http', '$timeout',
        'schedule_stops', 'routeData', '$uibModalInstance', '$window'];

    function StopsMapController($location, GeoLocationService,
        StopDataService, uiGmapIsReady, LocationService, $http, $timeout,
        schedule_stops, routeData, $uibModalInstance, $window) {

        var vm = this;
        vm.title = 'Schedule Stops'
        vm.mapControl = {};
        vm.stopMarker = [];
        vm.map = {
            // http://angular-google-maps.org/use
            center: {
                latitude: 43.75514221191406,
                longitude: -116.57597351074219
            },
            zoom: 10,
            lineStyle: {
                color: '#333',
                weight: 5,
                opacity: 0.7
            }
        };
        var myStyles = [
           {
               featureType: "poi",
               elementType: "labels",
               stylers: [
                     { visibility: "off" }
               ]
           },
           {
               "featureType": "transit",
               "elementType": "labels.icon",
               "stylers": [
                   {
                       "visibility": "off"
                   }
               ]
           }
        ];
        vm.mapOptions = {
            mapTypeControl: false,
            zoomControl: false,
            streetViewControl: false,
            styles: myStyles

        };

        var busStopGreen, busStopGrey, hubIcon, pickupIcon;
        if ($window.navigator.userAgent.indexOf("Trident") > 0 || $window.navigator.userAgent.indexOf("MSIE") > 0) {
            busStopGreen = 'images/pin-busstop-green.png';
            busStopGrey = 'images/pin-busstop-grey.png';
            hubIcon = 'images/pin-hub.png';
            pickupIcon = 'images/pin_pickup.png';
        }
        else {
            busStopGreen = 'images/pin-busstop-green.svg';
            busStopGrey = 'images/pin-busstop-grey.svg';
            hubIcon = 'images/pin-hub.svg';
            pickupIcon = 'images/pin_pickup.svg';
        }

        vm.scheduleStops = schedule_stops;

        if (vm.scheduleStops.IsAM) {// TBD add this field
            angular.forEach(vm.scheduleStops.stops, function (stop) {
                vm.icon = { url: busStopGreen };
                if (stop.isHub) {
                    vm.icon = { url: hubIcon }
                }
                vm.stopMarker.push({
                    'stopId': stop.stopId, 'stopName': stop.name,
                    'latitude': stop.latitude, 'longitude': stop.longitude,
                    'icon': vm.icon,
                    'address': stop.address
                });
            });
        }
        else {
            angular.forEach(vm.scheduleStops.stops, function (stop) {
                vm.icon = { url: busStopGrey };
                if (stop.isHub) {
                    vm.icon = { url: hubIcon }
                }
                vm.stopMarker.push({
                    'stopId': stop.stopId, 'stopName': stop.name,
                    'latitude': stop.latitude, 'longitude': stop.longitude,
                    'icon': vm.icon,
                    'address': stop.address
                });
            });
        }

        vm.icon = 'images/pin_pickup.svg';
        vm.icon = { url: pickupIcon };
        uiGmapIsReady.promise().then(function (maps) {

            google.maps.event.trigger(vm.mapControl.getGMap(), "resize");

            if (routeData != null && routeData.length > 0) {

                var decodedPath = google.maps.geometry.encoding.decodePath(routeData[0].line);

                var line = new google.maps.Polyline({
                    path: decodedPath,
                    strokeOpacity: 0.5,
                    strokeWeight: 5,
                    icons: [{
                        icon: {
                            path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,
                            strokeOpacity: 0,
                            fillOpacity: 1,
                            scale: 2.5
                        },
                        offset: '25px',
                        repeat: '200px',

                    }],
                    zIndex: 1
                });
                var lineStroke = new google.maps.Polyline({
                    path: decodedPath,
                    strokeColor: '#fff',
                    strokeOpacity: 1.0,
                    strokeWeight: 8,
                    zindex: 0
                });
                line.setMap(vm.mapControl.getGMap());
                lineStroke.setMap(vm.mapControl.getGMap());


            }
            var bounds = new google.maps.LatLngBounds();

            if (decodedPath && decodedPath.length > 0)
                angular.forEach(decodedPath, function (l) {
                    bounds.extend(new google.maps.LatLng(l.lat(), l.lng()));
                });
            else {
                angular.forEach(vm.stopMarker, function (m) {
                    bounds.extend(new google.maps.LatLng(m.latitude, m.longitude));
                });

            }
            vm.mapControl.getGMap().fitBounds(bounds);

        });

        vm.polylines = [{
            id: 1,
            path: vm.path,
            stroke: {
                color: '#6060FB',
                weight: 5
            },
            editable: false,
            draggable: false,
            geodesic: true,
            visible: true,
        }];

        //marker click function
        vm.markerEvent = {
            click: function (gMarker, eventName, model) {
                if (model.$id) {
                    //navigateToSelectedStop(model.coords);
                    if (vm.selectedLocation)
                        StopDataService.setGeoLocation(vm.selectedLocation);
                    StopDataService.setStop(model.coords);
                    vm.coords = model.coords;
                    vm.show = true;
                }
            }
        };

        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
            vm.isDone = true;
        };
    }

})();

(function () {
    'use strict';
    angular
        .module('oneMVApp')
        .directive('backControl', backControl);

    backControl.$inject = ['$window'];

    function backControl($window) {

        var directive = {
            restrict: 'E',
            controller: controller,
            replace:true,
            template: '<button class="go-back" ng-click="goBack()">Back</button>'
        };
        return directive;

        function controller($scope,$window) {
            $scope.goBack = function () {
                $window.history.back();
            }
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('oneMVApp')
        .filter('routeStopsName', function () {
            return function (routeLongName) {
                if (routeLongName && routeLongName.length > 0) {
                    var startIndex = routeLongName.indexOf("-") + 1;
                    var endIndex = routeLongName.length;
                    return routeLongName.substring(startIndex, endIndex);
                }
            }
        });

    angular
        .module('oneMVApp')
        .filter('routeShortName', function () {
            return function (routeLongName) {
                if (routeLongName && routeLongName.length > 0) {
                    var startIndex = 0;
                    var endIndex = routeLongName.indexOf("-") - 1;
                    return routeLongName.substring(startIndex, endIndex);
                }
            }
        });

    angular
        .module('oneMVApp')
        .directive('routeCard', routeCard);

    routeCard.$inject = ['$window'];
    
    function routeCard($window) {
        // Usage:
        //     <route-card></route-card>
        // Creates:
        // 
        var directive = {
            link: link,
            restrict: 'EA',
            controller: controller,
            scope: { routeInfo: '=', onSelect: '&', pinnable: '='},
            templateUrl: 'app/modules/fixed-route/directives/route-card/route-card.html'
        };
        return directive;

        function link(scope, element, attrs) {
            scope.$watch("routeInfo", function (newValue, oldValue) {
                //This gets called when data changes.
                if (newValue !== oldValue && newValue != '') {
                    if (typeof newValue == "string")
                        scope.routeInfo = JSON.parse(newValue);
                    else if (typeof newValue == "object")
                        scope.routeInfo = newValue;
                    scope.activate();
                }

            });
        }

        

        function controller($scope, $location) {
            
           
            $scope.activateTrip = activateTrip;
            $scope.activateRoute = activateRoute;
            $scope.gotoRouteWithStops = gotoRouteWithStops;
            $scope.activate = activate;
            //$scope.isRouteSelected = false;
            $scope.activeTrip = null;

            activate();

            function activate() {
                var isAnyTripActive = false;
                for (var i = 0; i < $scope.routeInfo.trips.length; i++) {
                    if ($scope.routeInfo.trips[i].isActive) {
                        $scope.activeTrip = $scope.routeInfo.trips[i];
                        isAnyTripActive = true;
                        break;
                    } 
                };
                if (!isAnyTripActive) {
                    if ($scope.routeInfo && $scope.routeInfo.trips && !$scope.activeTrip) {
                        $scope.activeTrip = $scope.routeInfo.trips[0];
                        $scope.routeInfo.trips[0].isActive = true;
                    }
                }

            }

            function activateTrip(trip) {
                $scope.activeTrip = trip;
                for (var i = 0; i < $scope.routeInfo.trips.length; i++) {

                    if ($scope.routeInfo.trips[i] === trip) {
                        $scope.routeInfo.trips[i].isActive = true;
                    } else {
                        $scope.routeInfo.trips[i].isActive = false;
                    }
                };
            }

            function activateRoute() {
                $scope.routeInfo.isSelected = !$scope.routeInfo.isSelected
                //Send back the selected route to parent controller
                if ($scope.onSelect && typeof $scope.onSelect === "function")
                    $scope.onSelect({ schedule: $scope.routeInfo });
            };

            function gotoRouteWithStops() {
                $location.path("fixed-route/routes/" + $scope.routeInfo.route.id);
            }
        }
    }

})();
(function () {
    'use strict';  
    angular
        .module('oneMVApp')
        .directive('stopArrivalInfo', stopArrivalInfo);

    stopArrivalInfo.$inject = [];

    function stopArrivalInfo() {

        var directive = {
            link: link,
            restrict: 'E',
            controller: controller,            
            scope: { routeArrival: '=', selectedStopId:'=' },
            templateUrl: 'app/modules/fixed-route/directives/stop-arrival-info/stop-arrival-info.html'
        };
        return directive;

        function link(scope, element, attrs) {

        }

        function controller($scope) {

            $scope.selectedArrivalIndex = 0;

            $scope.showArrivals = function (index) {
                $scope.selectedArrivalIndex = index;
            }

            var x = $scope.selectedStopId;

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('oneMVApp')
        .controller('MenuController', MenuController);

    MenuController.$inject = ['$scope'];

    function MenuController($scope) {
        //var vm = this;
        $scope.onHammer = function onHammer (event) {
            $scope.eventType = event.type;
            console.log(event.type);
          };

        $scope.carouselOptions = {
            navText: ["", ""],
            responsiveClass: false,
            nav: true,
            onDrag:noscroll,
            onDragged:goscroll, 

            responsive: {
                0: {
                    items: 1,
                    stagePadding: 34,
                    startPosition: 1,
                    center: true,
                },
                375:{
                    items: 1,
                    stagePadding: 34,
                    startPosition: 1,
                    center: true,
                },
                768: {
                    items: 2,
                    stagePadding: 16,
                    startPosition: 1,
                    center: true,
                },
                992: {
                    items: 3,
                    stagePadding: 0,
                    center: false,
                    mergeFit:true
                }

            }
        };

        function noscroll(event) {
            angular.element('html').addClass('no-scroll');

        }
        function goscroll(event) {
            angular.element('html').removeClass('no-scroll');
        }
    }
})();

(function () {
    'use strict';

    angular.module('oneMVApp')
    .directive('owlCarousel', MVOwlCarousel);

    MVOwlCarousel.$inject = [];

    function MVOwlCarousel() {
        return {
            restrict: 'E',
            transclude: false,
            link: function (scope) {
                scope.initCarousel = function (element) {
                    // provide any default options you want
                    var defaultOptions = {
                    };
                    var customOptions = scope.$eval($(element).attr('data-options'));
                    // combine the two options objects
                    for (var key in customOptions) {
                        defaultOptions[key] = customOptions[key];
                    }
                    // init carousel
                    $(element).owlCarousel(defaultOptions);
                };
            }
        };
    }
})();


(function () {
    'use strict';

    angular.module('oneMVApp')
    .controller('RatingModalController', RatingModalController);

    RatingModalController.$inject = ['$scope', '$http', 'UtilityFactory',
        'ConfigFactory', '$uibModalInstance', 'trip', 'selectedRating', 'FeedbackService', 'authService'];

    function RatingModalController($scope, $http, UtilityFactory, ConfigFactory,
        $uibModalInstance, trip, selectedRating, FeedbackService, authService) {
        var vm = this;
        vm.trip = trip;

        vm.cancel = cancel;
        vm.saveFeedback = saveFeedback;

        vm.feedback = {
            rating: selectedRating,
            comment: ''
        };

        vm.disableSubmit = function () {
            var result = true;
            if (vm.feedback.rating > 0) {
                result = false;
            }

            return result;
        };

        function cancel() {
            $uibModalInstance.close();
        };

        function saveFeedback() {
            var feedbackRequest = {
                PassengerRating: vm.feedback.rating,
                Comment: vm.feedback.comment,
                TripId: vm.trip.TripId,
                CreatedBy: authService.authentication.passengerId
            };

            FeedbackService.SaveFeedback(feedbackRequest).then(function (response) {
                if (response.data.status == 1) {
                    vm.isSaving = false;
                    UtilityFactory.toastSuccess("Success!", "Feedback saved successfully");
                    $uibModalInstance.close(feedbackRequest);
                } else {
                    vm.isSaving = false;
                    UtilityFactory.toastError("Error!", "Could not save feedback");
                    $log.error('Error: - ' + response.data.message);
                }
            }, function errorCallback(response) {
                vm.isSaving = false;
                UtilityFactory.toastError("Error!", "Could not save feedback");
                $log.error('Error: - ' + response.data.message);
            });

        }
    }
})();
(function () {
    'use strict';
    angular.module("oneMVApp").directive('starRatingDirective', starRatingDirective);

    function starRatingDirective() {

        return {
            restrict: 'E',
            scope: {
                tripInfo: '=',
                options: '@',
                allowTripRating: '@'
            },
            templateUrl: 'app/modules/on-demand/reservations/rating-component/starRating.html',
            controller : controllerFunction
        };

        function controllerFunction($scope, $uibModal) {
            $scope.jsTripInfo = $scope.tripInfo; //JSON.parse($scope.tripInfo);
            $scope.jsOptions = JSON.parse($scope.options);
            $scope.rating = $scope.jsTripInfo.rating;
            $scope.ratingComment = $scope.jsTripInfo.ratingComment;
            $scope.mvReadOnly = false;

            var setRating = function () {
                //let today = new Date($scope.serviceDate);
                var serviceDate = new Date($scope.jsTripInfo.serviceDate);
                var arrRestrictedValues = ["No-show", "Cancel"];

                if ($scope.allowTripRating == false && $scope.jsTripInfo.rating <= 0) {
                    $scope.mvReadOnly = false;
                }
                else {
                    if (arrRestrictedValues.indexOf($scope.jsTripInfo.Status) >= 0) {
                        $scope.mvReadOnly = false;
                    }
                    else {

                        if ($scope.jsTripInfo.rating > 0) {
                            $scope.mvReadOnly = true;
                        };
                    }
                }
            };




            $scope.showRatingModal = function () {
                if ($scope.mvReadOnly) {
                    return false;
                }

                var modalInstance = $uibModal.open({
                    templateUrl: 'app/modules/on-demand/reservations/rating-component/ratingModal.html',
                    controller: 'RatingModalController as vm',
                    resolve: {
                        trip: $scope.jsTripInfo,
                        selectedRating: $scope.rating
                    }
                });

                modalInstance.result.then(function (item) {
                    if (!angular.isUndefined(item)) {
                        $scope.rating = item.PassengerRating;
                        $scope.ratingComment = item.Comment;
                        $scope.jsTripInfo.ratingComment = item.Comment;
                        $scope.jsTripInfo.rating = item.PassengerRating;
                        $scope.mvReadOnly = true;
                    }
                    else {
                        $scope.rating = 0;
                    }

                }, function () {
                    // dismiss
                });
            }

            setRating();

        }
    }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
